/**
 * Title: jqPlot Charts
 * 
 * Pure JavaScript plotting plugin for jQuery.
 * 
 * About: Version
 * 
 * 1.0.0b2_r1012 
 * 
 * 
 * jqPlot requires jQuery (1.4+ required for certain features). jQuery 1.4.2 is included in the distribution.  
 * To use jqPlot include jQuery, the jqPlot jQuery plugin, the jqPlot css file and optionally 
 * the excanvas script for IE support in your web page:
 * 
 * 
 */

(function($) {
    // make sure undefined is undefined
    var undefined;
    
    $.fn.emptyForce = function() {
      for ( var i = 0, elem; (elem = $(this)[i]) != null; i++ ) {
        // Remove element nodes and prevent memory leaks
        if ( elem.nodeType === 1 ) {
          jQuery.cleanData( elem.getElementsByTagName("*") );
        }
  
        // Remove any remaining nodes
        if ($.jqplot_use_excanvas) {
          elem.outerHTML = "";
        }
        else {
          while ( elem.firstChild ) {
            elem.removeChild( elem.firstChild );
          }
        }

        elem = null;
      }
  
      return $(this);
    };
  
    $.fn.removeChildForce = function(parent) {
      while ( parent.firstChild ) {
        this.removeChildForce( parent.firstChild );
        parent.removeChild( parent.firstChild );
      }
    };


    /**
     * Namespace: $.jqplot
     * jQuery function called by the user to create a plot.
     *  
     * Parameters:
     * target - ID of target element to render the plot into.
     * data - an array of data series.
     * options - user defined options object.  See the individual classes for available options.
     * 
     * Properties:
     * config - object to hold configuration information for jqPlot plot object.
     * 
     * attributes:
     * enablePlugins - False to disable plugins by default.  Plugins must then be explicitly 
     *   enabled in the individual plot options.  Default: false.
     *   This property sets the "show" property of certain plugins to true or false.
     *   Only plugins that can be immediately active upon loading are affected.  This includes
     *   non-renderer plugins like cursor, dragable, highlighter, and trendline.
     * defaultHeight - Default height for plots where no css height specification exists.  This
     *   is a jqplot wide default.
     * defaultWidth - Default height for plots where no css height specification exists.  This
     *   is a jqplot wide default.
     */

    $.jqplot = function(target, data, options) {
        var _data, _options;
        
        if (options == null) {
            if (jQuery.isArray(data)) {
                _data = data;
                _options = null;   
            }
            
            else if (typeof(data) === 'object') {
                _data = null;
                _options = data;
            }
        }
        else {
            _data = data;
            _options = options;
        }
        var plot = new jqPlot();
        plot.hiddenSeriesMap = {};
        // remove any error class that may be stuck on target.
        $('#'+target).removeClass('jqplot-error');
        
        if ($.jqplot.config.catchErrors) {
            try {
                plot.init(target, _data, _options);
                plot.draw();
                plot.themeEngine.init.call(plot);
                return plot;
            }
            catch(e) {
                var msg = $.jqplot.config.errorMessage || e.message;
                $('#'+target).append('<div class="jqplot-error-message">'+msg+'</div>');
                $('#'+target).addClass('jqplot-error');
                document.getElementById(target).style.background = $.jqplot.config.errorBackground;
                document.getElementById(target).style.border = $.jqplot.config.errorBorder;
                document.getElementById(target).style.fontFamily = $.jqplot.config.errorFontFamily;
                document.getElementById(target).style.fontSize = $.jqplot.config.errorFontSize;
                document.getElementById(target).style.fontStyle = $.jqplot.config.errorFontStyle;
                document.getElementById(target).style.fontWeight = $.jqplot.config.errorFontWeight;
            }
        }
        else {        
            plot.init(target, _data, _options);
            plot.draw();
            plot.themeEngine.init.call(plot);
            return plot;
        }
    };

    $.jqplot.version = "1.0.0b2_r1012";

    // canvas manager to reuse canvases on the plot.
    // Should help solve problem of canvases not being freed and
    // problem of waiting forever for firefox to decide to free memory.
    $.jqplot.CanvasManager = function() {
	
	var self = this;
	
	self.canvases = [];
	self.free = [];
	
        
        self.myCanvases = [];
        
        self.getCanvas = function() {
            var canvas;
            var makeNew = true;
            

            if (makeNew) {
                canvas = document.createElement('canvas');
                self.myCanvases.push(canvas);
            }   
            
            return canvas;
        };
        
        // this method has to be used after settings the dimesions
        // on the element returned by getCanvas()
        self.initCanvas = function(canvas) {
            if ($.jqplot.use_excanvas) {
                return window.G_vmlCanvasManager.initElement(canvas);
            }
            return canvas;
        };

        self.freeAllCanvases = function() {
            for (var i = 0, l=self.myCanvases.length; i < l; i++) {
                self.freeCanvas(self.myCanvases[i]);
                self.myCanvases[i] = null;
            }
            self.myCanvases = [];
        };

        self.freeCanvas = function(can) {
            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                // excanvas can't be reused, but properly unset
                window.G_vmlCanvasManager.uninitElement(can);
                $(can).empty();
                tiny.garbageCollect(can);
                can = null;
            } 
            else {
                var canvas = can;
                canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
                $(canvas).unbind().removeAttr('class').removeAttr('style');
                // Style attributes seemed to be still hanging around.  wierd.  Some ticks
                // still retained a left: 0px attribute after reusing a canvas.
                $(canvas).css({left: '', top: '', position: ''});
                // setting size to 0 may save memory of unused canvases?
                canvas.width = 0;
                canvas.height = 0;
		        canvas = null;
                can = null;
            }
        };
        
    };

            
    // Convienence function that won't hang IE or FF without FireBug.
    $.jqplot.log = function() {
        if (window.console) {
            window.console.log.apply(window.console, arguments);
        }
    };
        
    $.jqplot.config = {
        addDomReference: false,
        enablePlugins:false,
        defaultHeight:300,
        defaultWidth:400,
        UTCAdjust:false,
        timezoneOffset: new Date(new Date().getTimezoneOffset() * 60000),
        errorMessage: '',
        errorBackground: '',
        errorBorder: '',
        errorFontFamily: '',
        errorFontSize: '',
        errorFontStyle: '',
        errorFontWeight: '',
        catchErrors: false,
        defaultTickFormatString: "%.1f",
        defaultColors: [ "#4bb2c5", "#EAA228", "#c5b47f", "#579575", "#839557", "#958c12", "#953579", "#4b5de4", "#d8b83f", "#ff5800", "#0085cc", "#c747a3", "#cddf54", "#FBD178", "#26B4E3", "#bd70c7"],
        defaultNegativeColors: [ "#498991", "#C08840", "#9F9274", "#546D61", "#646C4A", "#6F6621", "#6E3F5F", "#4F64B0", "#A89050", "#C45923", "#187399", "#945381", "#959E5C", "#C7AF7B", "#478396", "#907294"],
        dashLength: 4,
        gapLength: 4,
        dotGapLength: 2.5,
        srcLocation: 'jqplot/src/',
        pluginLocation: 'jqplot/src/plugins/'
    };
    
    
    $.jqplot.arrayMax = function( array ){
        return Math.max.apply( Math, array );
    };
    
    $.jqplot.arrayMin = function( array ){
        return Math.min.apply( Math, array );
    };
    
    $.jqplot.enablePlugins = $.jqplot.config.enablePlugins;
    
    // http://www.modernizr.com
    
    $.jqplot.support_canvas = function() {
        if (typeof $.jqplot.support_canvas.result == 'undefined') {
            $.jqplot.support_canvas.result = !!document.createElement('canvas').getContext; 
        }
        return $.jqplot.support_canvas.result;
    };
            
    $.jqplot.support_canvas_text = function() {
        if (typeof $.jqplot.support_canvas_text.result == 'undefined') {
            if (window.G_vmlCanvasManager !== undefined && window.G_vmlCanvasManager._version > 887) {
                $.jqplot.support_canvas_text.result = true;
            }
            else {
                $.jqplot.support_canvas_text.result = !!(document.createElement('canvas').getContext && typeof document.createElement('canvas').getContext('2d').fillText == 'function');
            }
             
        }
        return $.jqplot.support_canvas_text.result;
    };
    
    $.jqplot.use_excanvas = ($.browser.msie && !$.jqplot.support_canvas()) ? true : false;
    
    /**
     * 
     * 
     * $.jqplot.preInitHooks - called before initialization.
     * $.jqplot.postInitHooks - called after initialization.
     * $.jqplot.preParseOptionsHooks - called before user options are parsed.
     * $.jqplot.postParseOptionsHooks - called after user options are parsed.
     * $.jqplot.preDrawHooks - called before plot draw.
     * $.jqplot.postDrawHooks - called after plot draw.
     * $.jqplot.preDrawSeriesHooks - called before each series is drawn.
     * $.jqplot.postDrawSeriesHooks - called after each series is drawn.
     * $.jqplot.preDrawLegendHooks - called before the legend is drawn.
     * $.jqplot.addLegendRowHooks - called at the end of legend draw, so plugins
     *     can add rows to the legend table.
     * $.jqplot.preSeriesInitHooks - called before series is initialized.
     * $.jqplot.postSeriesInitHooks - called after series is initialized.
     * $.jqplot.preParseSeriesOptionsHooks - called before series related options
     *     are parsed.
     * $.jqplot.postParseSeriesOptionsHooks - called after series related options
     *     are parsed.
     * $.jqplot.eventListenerHooks - called at the end of plot drawing, binds
     *     listeners to the event canvas which lays on top of the grid area.
     * $.jqplot.preDrawSeriesShadowHooks - called before series shadows are drawn.
     * $.jqplot.postDrawSeriesShadowHooks - called after series shadows are drawn.
     * 
     */
    
    $.jqplot.preInitHooks = [];
    $.jqplot.postInitHooks = [];
    $.jqplot.preParseOptionsHooks = [];
    $.jqplot.postParseOptionsHooks = [];
    $.jqplot.preDrawHooks = [];
    $.jqplot.postDrawHooks = [];
    $.jqplot.preDrawSeriesHooks = [];
    $.jqplot.postDrawSeriesHooks = [];
    $.jqplot.preDrawLegendHooks = [];
    $.jqplot.addLegendRowHooks = [];
    $.jqplot.preSeriesInitHooks = [];
    $.jqplot.postSeriesInitHooks = [];
    $.jqplot.preParseSeriesOptionsHooks = [];
    $.jqplot.postParseSeriesOptionsHooks = [];
    $.jqplot.eventListenerHooks = [];
    $.jqplot.preDrawSeriesShadowHooks = [];
    $.jqplot.postDrawSeriesShadowHooks = [];

    // A superclass holding some common properties and methods.
    $.jqplot.ElemContainer = function() {
        this._elem;
        this._plotWidth;
        this._plotHeight;
        this._plotDimensions = {height:null, width:null};
    };
    
    $.jqplot.ElemContainer.prototype.createElement = function(el, offsets, clss, cssopts, attrib) {
        this._offsets = offsets;
        var klass = clss || 'jqplot';
        var elem = document.createElement(el);
        this._elem = $(elem);
        this._elem.addClass(klass);
        this._elem.css(cssopts);
        this._elem.attr(attrib);
        // avoid memory leak;
        elem = null;
        return this._elem;
    };
    
    $.jqplot.ElemContainer.prototype.getWidth = function() {
        if (this._elem) 
        {
            if (this.isBigData)
            {
                this.elemWidth = this.elemWidth || this._elem.outerWidth(true);
                return this.elemWidth;
            }
            else
            {
                return this._elem.outerWidth(true);
            }
        }
        else {
            return null;
        }
    };
    
    $.jqplot.ElemContainer.prototype.getHeight = function() {
        if (this._elem) 
        {
            if (this.isBigData)
            {
                this.elemHeight = this.elemHeight || this._elem.outerHeight(true);
                return this.elemHeight;
            }
            else
            {
                return this._elem.outerHeight(true);
            }
        }
        else {
            return null;
        }
    };
    
    $.jqplot.ElemContainer.prototype.getPosition = function() {
        if (this._elem) {
            return this._elem.position();
        }
        else {
            return {top:null, left:null, bottom:null, right:null};
        }
    };
    
    $.jqplot.ElemContainer.prototype.getTop = function() {
        return this.getPosition().top;
    };
    
    $.jqplot.ElemContainer.prototype.getLeft = function() {
        return this.getPosition().left;
    };
    
    $.jqplot.ElemContainer.prototype.getBottom = function() {
        return this._elem.css('bottom');
    };
    
    $.jqplot.ElemContainer.prototype.getRight = function() {
        return this._elem.css('right');
    };
    

    /**
     * Class: Axis
     * An individual axis object.  Cannot be instantiated directly, but created
     * by the Plot oject.  Axis properties can be set or overriden by the 
     * options passed in from the user.
     * 
     */
    function Axis(name) {
        $.jqplot.ElemContainer.call(this);
        this.name = name;
        this._series = [];
        // prop: show
        // Wether to display the axis on the graph.
        this.show = false;
        // prop: tickRenderer
        // A class of a rendering engine for creating the ticks labels displayed on the plot, 
        // See <$.jqplot.AxisTickRenderer>.
        this.tickRenderer = $.jqplot.AxisTickRenderer;
        //unit tick renderer to draw unit
        this.unitTickRender = $.jqplot.CanvasAxisTickRenderer;
        // prop: tickOptions
        // Options that will be passed to the tickRenderer, see <$.jqplot.AxisTickRenderer> options.
        this.tickOptions = {};
        // prop: labelRenderer
        // A class of a rendering engine for creating an axis label.
        this.labelRenderer = $.jqplot.AxisLabelRenderer;
        // prop: labelOptions
        // Options passed to the label renderer.
        this.labelOptions = {};
        // prop: label
        // Label for the axis
        this.label = null;
        // prop: showLabel
        // true to show the axis label.
        this.showLabel = true;
        // prop: min
        // minimum value of the axis (in data units, not pixels).
        this.min = null;
        // prop: max
        // maximum value of the axis (in data units, not pixels).
        this.max = null;
        // prop: autoscale
        // DEPRECATED
        // the default scaling algorithm produces superior results.
        this.autoscale = false;
        // prop: pad
        // Padding to extend the range above and below the data bounds.
        // The data range is multiplied by this factor to determine minimum and maximum axis bounds.
        // A value of 0 will be interpreted to mean no padding, and pad will be set to 1.0.
        this.pad = 1.2;
        // prop: padMax
        // Padding to extend the range above data bounds.
        // The top of the data range is multiplied by this factor to determine maximum axis bounds.
        // A value of 0 will be interpreted to mean no padding, and padMax will be set to 1.0.
        this.padMax = null;
        // prop: padMin
        // Padding to extend the range below data bounds.
        // The bottom of the data range is multiplied by this factor to determine minimum axis bounds.
        // A value of 0 will be interpreted to mean no padding, and padMin will be set to 1.0.
        this.padMin = null;
        // prop: ticks
        // 1D [val, val, ...] or 2D [[val, label], [val, label], ...] array of ticks for the axis.
        // If no label is specified, the value is formatted into an appropriate label.
        this.ticks = [];
        // prop: numberTicks
        // Desired number of ticks.  Default is to compute automatically.
        this.numberTicks;
        // prop: tickInterval
        // number of units between ticks.  Mutually exclusive with numberTicks.
        this.tickInterval;
        // prop: renderer
        // A class of a rendering engine that handles tick generation, 
        // scaling input data to pixel grid units and drawing the axis element.
        this.renderer = $.jqplot.LinearAxisRenderer;
        // prop: rendererOptions
        // renderer specific options.  See <$.jqplot.LinearAxisRenderer> for options.
        this.rendererOptions = {};
        // prop: showTicks
        // Wether to show the ticks (both marks and labels) or not.
        // Will not override showMark and showLabel options if specified on the ticks themselves.
        this.showTicks = true;
        // prop: showTickMarks
        // Wether to show the tick marks (line crossing grid) or not.
        // Overridden by showTicks and showMark option of tick itself.
        this.showTickMarks = true;
        // prop: showMinorTicks
        // Wether or not to show minor ticks.  This is renderer dependent.
        this.showMinorTicks = true;
        // prop: drawMajorGridlines
        // True to draw gridlines for major axis ticks.
        this.drawMajorGridlines = true;
        // prop: drawMinorGridlines
        // True to draw gridlines for minor ticks.
        this.drawMinorGridlines = false;
        // prop: drawMajorTickMarks
        // True to draw tick marks for major axis ticks.
        this.drawMajorTickMarks = false;
        // prop: drawMinorTickMarks
        // True to draw tick marks for minor ticks.  This is renderer dependent.
        this.drawMinorTickMarks = true;
        // prop: useSeriesColor
        // Use the color of the first series associated with this axis for the
        // tick marks and line bordering this axis.
        this.useSeriesColor = false;
        // prop: borderWidth
        // width of line stroked at the border of the axis.  Defaults
        // to the width of the grid boarder.
        this.borderWidth = null;
        // prop: borderColor
        // color of the border adjacent to the axis.  Defaults to grid border color.
        this.borderColor = null;
        // minimum and maximum values on the axis.
        this._dataBounds = {min:null, max:null};
        // statistics (min, max, mean) as well as actual data intervals for each series attached to axis.
        // holds collection of {intervals:[], min:, max:, mean: } objects for each series on axis.
        this._intervalStats = [];
        // pixel position from the top left of the min value and max value on the axis.
        this._offsets = {min:null, max:null};
        this._ticks=[];
        this._label = null;
        // prop: syncTicks
        // true to try and synchronize tick spacing across multiple axes so that ticks and
        // grid lines line up.  This has an impact on autoscaling algorithm, however.
        // In general, autoscaling an individual axis will work better if it does not
        // have to sync ticks.
        this.syncTicks = null;
        // prop: tickSpacing
        // Approximate pixel spacing between ticks on graph.  Used during autoscaling.
        // This number will be an upper bound, actual spacing will be less.
        this.tickSpacing = 75;
        // Properties to hold the original values for min, max, ticks, tickInterval and numberTicks
        // so they can be restored if altered by plugins.
        this._min = null;
        this._max = null;
        this._tickInterval = null;
        this._numberTicks = null;
        this.__ticks = null;
        // hold original user options.
        this._options = {};
    }
    
    Axis.prototype = new $.jqplot.ElemContainer();
    Axis.prototype.constructor = Axis;
    Axis.prototype.destroy = function()
    {
        this.name = null;
        this._series =null;
        this.show = false;
        this.tickRenderer =null;
        this.unitTickRender =null;
        this.tickOptions = null;
        this.labelRenderer =null;
        this.labelOptions =null;
        this.label = null;
        this.min = null;
        this.max = null;
        this._offsets = null;
        this._ticks= null;
        this._label = null;
        this._min = null;
        this._max = null;
        this._tickInterval = null;
        this._numberTicks = null;
        this.__ticks = null;
        this._options = {};
        if(this._elem)
        {
            tiny.garbageCollect(this._elem, true);
            this._elem = null;
        }
    }
    Axis.prototype.init = function() {
        this.renderer = new this.renderer();
        // set the axis name
        this.tickOptions.axis = this.name;
        // if showMark or showLabel tick options not specified, use value of axis option.
        // showTicks overrides showTickMarks.
        if (this.tickOptions.showMark == null) {
            this.tickOptions.showMark = this.showTicks;
        }
        if (this.tickOptions.showMark == null) {
            this.tickOptions.showMark = this.showTickMarks;
        }
        if (this.tickOptions.showLabel == null) {
            this.tickOptions.showLabel = this.showTicks;
        }
        
        if (this.label == null || this.label == '') {
            this.showLabel = false;
        }
        else {
            this.labelOptions.label = this.label;
        }
        if (this.showLabel == false) {
            this.labelOptions.show = false;
        }
        // set the default padMax, padMin if not specified
        // special check, if no padding desired, padding
        // should be set to 1.0
        if (this.pad == 0) {
            this.pad = 1.0;
        }
        if (this.padMax == 0) {
            this.padMax = 1.0;
        }
        if (this.padMin == 0) {
            this.padMin = 1.0;
        }
        if (this.padMax == null) {
            this.padMax = (this.pad-1)/2 + 1;
        }
        if (this.padMin == null) {
            this.padMin = (this.pad-1)/2 + 1;
        }
        // now that padMin and padMax are correctly set, reset pad in case user has supplied 
        // padMin and/or padMax
        this.pad = this.padMax + this.padMin - 1;
        if (this.min != null || this.max != null) {
            this.autoscale = false;
        }
        // if not set, sync ticks for y axes but not x by default.
        if (this.syncTicks == null && this.name.indexOf('y') > -1) {
            this.syncTicks = true;
        }
        else if (this.syncTicks == null){
            this.syncTicks = false;
        }
        this.renderer.init.call(this, this.rendererOptions);
        
    };
    
    Axis.prototype.draw = function(ctx, plot) {
        // Memory Leaks patch
        if (this.__ticks) {
          this.__ticks = null;
        }

        return this.renderer.draw.call(this, ctx, plot);
        
    };
    Axis.prototype.createOnlyTicks = function(plot) {
        // Memory Leaks patch
        if (this.__ticks) {
          this.__ticks = null;
        }

        return this.renderer.createOnlyTicks.call(this, plot);
    };
    Axis.prototype.set = function() {
        this.renderer.set.call(this);
    };
    
    Axis.prototype.pack = function(pos, offsets, plot) {
        if (this.show) {
            this.renderer.pack.call(this, pos, offsets, plot);
        }
        // these properties should all be available now.
        if (this._min == null) {
            this._min = this.min;
            this._max = this.max;
            this._tickInterval = this.tickInterval;
            this._numberTicks = this.numberTicks;
        }
        pos = null;
        offsets = null;
    };
    
    // reset the axis back to original values if it has been scaled, zoomed, etc.
    Axis.prototype.reset = function() {
        this.renderer.reset.call(this);
    };
    
    Axis.prototype.resetScale = function(opts) {
        $.extend(true, this, {min: null, max: null, numberTicks: null, tickInterval: null, _ticks: [], ticks: []}, opts);
        this.resetDataBounds();
    };
    
    Axis.prototype.resetDataBounds = function() {
        // Go through all the series attached to this axis and find
        // the min/max bounds for this axis.
        var db = this._dataBounds;
        db.min = null;
        db.max = null;
        var l, s, d;
        // check for when to force min 0 on bar series plots.
        var doforce = (this.show) ? true : false;
        for (var i=0; i<this._series.length; i++) {
            s = this._series[i];
            if (s.show) {
                d = s._plotData;
                if (s._type === 'line' && s.renderer.bands.show && this.name.charAt(0) !== 'x') {
                    d = [[0, s.renderer.bands._min], [1, s.renderer.bands._max]];
                }

                var minyidx = 1, maxyidx = 1;

                if (s._type != null && s._type == 'ohlc') {
                    minyidx = 3;
                    maxyidx = 2;
                }
                
                for (var j=0, l=d.length; j<l; j++) { 
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        if ((d[j][0] != null && d[j][0] < db.min) || db.min == null) {
                            db.min = d[j][0];
                        }
                        if ((d[j][0] != null && d[j][0] > db.max) || db.max == null) {
                            db.max = d[j][0];
                        }
                    }              
                    else {
                        if ((d[j][minyidx] != null && d[j][minyidx] < db.min) || db.min == null) {
                            db.min = d[j][minyidx];
                        }
                        if ((d[j][maxyidx] != null && d[j][maxyidx] > db.max) || db.max == null) {
                            db.max = d[j][maxyidx];
                        }
                    }              
                }

                // Hack to not pad out bottom of bar plots unless user has specified a padding.
                // every series will have a chance to set doforce to false.  once it is set to 
                // false, it cannot be reset to true.
                // If any series attached to axis is not a bar, wont force 0.
                if (doforce && s.renderer.constructor !== $.jqplot.BarRenderer) {
                    doforce = false;
                }

                else if (doforce && this._options.hasOwnProperty('forceTickAt0') && this._options.forceTickAt0 == false) {
                    doforce = false;
                }

                else if (doforce && s.renderer.constructor === $.jqplot.BarRenderer) {
                    if (s.barDirection == 'vertical' && this.name != 'xaxis' && this.name != 'x2axis') { 
                        if (this._options.pad != null || this._options.padMin != null) {
                            doforce = false;
                        }
                    }

                    else if (s.barDirection == 'horizontal' && (this.name == 'xaxis' || this.name == 'x2axis')) {
                        if (this._options.pad != null || this._options.padMin != null) {
                            doforce = false;
                        }
                    }

                }
            }
        }

        if (doforce && this.renderer.constructor === $.jqplot.LinearAxisRenderer && db.min >= 0) {
            this.padMin = 1.0;
            this.forceTickAt0 = true;
        }
    };

    /**
     * Class: Legend
     * Legend object.  Cannot be instantiated directly, but created
     * by the Plot oject.  Legend properties can be set or overriden by the 
     * options passed in from the user.
     */
    function Legend(options) {
        $.jqplot.ElemContainer.call(this);
        // Group: Properties
        
        // prop: show
        // Wether to display the legend on the graph.
        this.show = false;
        // prop: location
        // Placement of the legend.  one of the compass directions: nw, n, ne, e, se, s, sw, w
        this.location = 'ne';
        // prop: labels
        // Array of labels to use.  By default the renderer will look for labels on the series.
        // Labels specified in this array will override labels specified on the series.
        this.labels = [];
        // prop: showLabels
        // true to show the label text on the  legend.
        this.showLabels = true;
        // prop: showSwatch
        // true to show the color swatches on the legend.
        this.showSwatches = true;
        // prop: placement
        // "insideGrid" places legend inside the grid area of the plot.
        // "outsideGrid" places the legend outside the grid but inside the plot container, 
        // shrinking the grid to accomodate the legend.
        // "inside" synonym for "insideGrid", 
        // "outside" places the legend ouside the grid area, but does not shrink the grid which
        // can cause the legend to overflow the plot container.
        this.placement = "insideGrid";
        // prop: xoffset
        // DEPRECATED.  Set the margins on the legend using the marginTop, marginLeft, etc. 
        // properties or via CSS margin styling of the .jqplot-table-legend class.
        this.xoffset = 0;
        // prop: yoffset
        // DEPRECATED.  Set the margins on the legend using the marginTop, marginLeft, etc. 
        // properties or via CSS margin styling of the .jqplot-table-legend class.
        this.yoffset = 0;
        // prop: border
        // css spec for the border around the legend box.
        this.border;
        // prop: background
        // css spec for the background of the legend box.
        this.background;
        // prop: textColor
        // css color spec for the legend text.
        this.textColor;
        // prop: fontFamily
        // css font-family spec for the legend text.
        this.fontFamily; 
        // prop: fontSize
        // css font-size spec for the legend text.
        this.fontSize ;
        // prop: rowSpacing
        // css padding-top spec for the rows in the legend.
        this.rowSpacing = '0.5em';
        // renderer
        // A class that will create a DOM object for the legend,
        // see <$.jqplot.TableLegendRenderer>.
        this.renderer = $.jqplot.TableLegendRenderer;
        // prop: rendererOptions
        // renderer specific options passed to the renderer.
        this.rendererOptions = {};
        // prop: predraw
        // Wether to draw the legend before the series or not.
        // Used with series specific legend renderers for pie, donut, mekko charts, etc.
        this.preDraw = false;
        // prop: marginTop
        // CSS margin for the legend DOM element. This will set an element 
        // CSS style for the margin which will override any style sheet setting.
        // The default will be taken from the stylesheet.
        this.marginTop = null;
        // prop: marginRight
        // CSS margin for the legend DOM element. This will set an element 
        // CSS style for the margin which will override any style sheet setting.
        // The default will be taken from the stylesheet.
        this.marginRight = null;
        // prop: marginBottom
        // CSS margin for the legend DOM element. This will set an element 
        // CSS style for the margin which will override any style sheet setting.
        // The default will be taken from the stylesheet.
        this.marginBottom = null;
        // prop: marginLeft
        // CSS margin for the legend DOM element. This will set an element 
        // CSS style for the margin which will override any style sheet setting.
        // The default will be taken from the stylesheet.
        this.marginLeft = null;
        // prop: escapeHtml
        // True to escape special characters with their html entity equivalents
        // in legend text.  "<" becomes &lt; and so on, so html tags are not rendered.
        this.escapeHtml = false;
        this._series = [];
        
        $.extend(true, this, options);
    }
    
    Legend.prototype = new $.jqplot.ElemContainer();
    Legend.prototype.constructor = Legend;

    Legend.prototype.destroy = function()
    {
        this.labels = null;
        this._series = null;
        if(this.renderer && this.renderer.destroy)
        {
        }
        this.renderer = null;
        this.rendererOptions = null;
        if(this._elem)
        {
            this._elem = null;
        }
    }
    
    Legend.prototype.setOptions = function(options) {
        $.extend(true, this, options);
        
        // Try to emulate deprecated behaviour
        // if user has specified xoffset or yoffset, copy these to
        // the margin properties.
        
        if (this.placement ==  'inside') {
            this.placement = 'insideGrid';
        }
        
        if (this.xoffset >0) {
            if (this.placement == 'insideGrid') {
                switch (this.location) {
                    case 'nw':
                    case 'w':
                    case 'sw':
                        if (this.marginLeft == null) {
                            this.marginLeft = this.xoffset + 'px';
                        }
                        this.marginRight = '0px';
                        break;
                    case 'ne':
                    case 'e':
                    case 'se':
                    default:
                        if (this.marginRight == null) {
                            this.marginRight = this.xoffset + 'px';
                        }
                        this.marginLeft = '0px';
                        break;
                }
            }
            else if (this.placement == 'outside') {
                switch (this.location) {
                    case 'nw':
                    case 'w':
                    case 'sw':
                        if (this.marginRight == null) {
                            this.marginRight = this.xoffset + 'px';
                        }
                        this.marginLeft = '0px';
                        break;
                    case 'ne':
                    case 'e':
                    case 'se':
                    default:
                        if (this.marginLeft == null) {
                            this.marginLeft = this.xoffset + 'px';
                        }
                        this.marginRight = '0px';
                        break;
                }
            }
            this.xoffset = 0;
        }
        
        if (this.yoffset >0) {
            if (this.placement == 'outside') {
                switch (this.location) {
                    case 'sw':
                    case 's':
                    case 'se':
                        if (this.marginTop == null) {
                            this.marginTop = this.yoffset + 'px';
                        }
                        this.marginBottom = '0px';
                        break;
                    case 'ne':
                    case 'n':
                    case 'nw':
                    default:
                        if (this.marginBottom == null) {
                            this.marginBottom = this.yoffset + 'px';
                        }
                        this.marginTop = '0px';
                        break;
                }
            }
            else if (this.placement == 'insideGrid') {
                switch (this.location) {
                    case 'sw':
                    case 's':
                    case 'se':
                        if (this.marginBottom == null) {
                            this.marginBottom = this.yoffset + 'px';
                        }
                        this.marginTop = '0px';
                        break;
                    case 'ne':
                    case 'n':
                    case 'nw':
                    default:
                        if (this.marginTop == null) {
                            this.marginTop = this.yoffset + 'px';
                        }
                        this.marginBottom = '0px';
                        break;
                }
            }
            this.yoffset = 0;
        }
        
    };
    
    Legend.prototype.init = function() {
        this.renderer = new this.renderer();
        this.renderer.init.call(this, this.rendererOptions);
    };
    
    Legend.prototype.draw = function(offsets,plot) {
        for (var i=0; i<$.jqplot.preDrawLegendHooks.length; i++){
            $.jqplot.preDrawLegendHooks[i].call(this, offsets);
        }
        return this.renderer.draw.call(this, offsets,plot);
    };
    
    Legend.prototype.pack = function(offsets) {
        this.renderer.pack.call(this, offsets);
    };

    /**
     * Class: Title
     * Plot Title object.  Cannot be instantiated directly, but created
     * by the Plot oject.  Title properties can be set or overriden by the 
     * options passed in from the user.
     * 
     * Parameters:
     * text - text of the title.
     */
    function Title(text) {
        $.jqplot.ElemContainer.call(this);
        // Group: Properties
        
        // prop: text
        // text of the title;
        this.text = text;
        // prop: show
        // wether or not to show the title
        this.show = true;
        // prop: fontFamily
        // css font-family spec for the text.
        this.fontFamily;
        // prop: fontSize
        // css font-size spec for the text.
        this.fontSize ;
        // prop: textAlign
        // css text-align spec for the text.
        this.textAlign;
        // prop: textColor
        // css color spec for the text.
        this.textColor;
        // prop: renderer
        // A class for creating a DOM element for the title,
        // see <$.jqplot.DivTitleRenderer>.
        this.renderer = $.jqplot.DivTitleRenderer;
        // prop: rendererOptions
        // renderer specific options passed to the renderer.
        this.rendererOptions = {};   
        // prop: escapeHtml
        // True to escape special characters with their html entity equivalents
        // in title text.  "<" becomes &lt; and so on, so html tags are not rendered.
        this.escapeHtml = false;
    }
    
    Title.prototype = new $.jqplot.ElemContainer();
    Title.prototype.constructor = Title;
    
    Title.prototype.destroy = function()
    {
        if(this.renderer && this.renderer.destroy)
        {
             this.renderer.destroy();
             this.renderer = null;
        }
        if(this.yUnitSpan)
        {
            tiny.garbageCollect(this.yUnitSpan);
            this.yUnitSpan  = null;
        }
        if(this.y2UnitSpan)
        {
            tiny.garbageCollect(this.y2UnitSpan);
            this.y2UnitSpan  = null;
        }
        if(this.trTitile)
        {
            tiny.garbageCollect(this.trTitile);
            this.trTitile  = null;
        }
        if(this.tdTitile)
        {
            tiny.garbageCollect(this.tdTitile);
            this.tdTitile  = null;
        }
        if(this.trUnit)
        {
            tiny.garbageCollect(this.trUnit);
            this.trUnit  = null;
        }
        if(this.tdUnit)
        {
            tiny.garbageCollect(this.trUnit);
            this.trUnit  = null;
        }
        if(this._elem)
        {
            tiny.garbageCollect(this._elem, true);
            this._elem = null;
        }
        this.text = null;
        this.rendererOptions = null;
    }
    Title.prototype.init = function() {
        this.renderer = new this.renderer();
        this.renderer.init.call(this, this.rendererOptions);
    };
    
    Title.prototype.draw = function(width, plot) {
        return this.renderer.draw.call(this, width, plot);
    };
    
    Title.prototype.pack = function() {
        this.renderer.pack.call(this);
    };


    /**
     * Class: Series
     * An individual data series object.  Cannot be instantiated directly, but created
     * by the Plot oject.  Series properties can be set or overriden by the 
     * options passed in from the user.
     */
    function Series(isBigData) {
        $.jqplot.ElemContainer.call(this);
        // Group: Properties
        // Properties will be assigned from a series array at the top level of the
        // options.  If you had two series and wanted to change the color and line
        // width of the first and set the second to use the secondary y axis with
        // no shadow and supply custom labels for each:

        // prop: show
        // wether or not to draw the series.
        this.show = true;
        // prop: xaxis
        // which x axis to use with this series, either 'xaxis' or 'x2axis'.
        this.xaxis = 'xaxis';
        this._xaxis;
        // prop: yaxis
        // which y axis to use with this series, either 'yaxis' or 'y2axis'.
        this.yaxis = 'yaxis';
        this._yaxis;
        this.gridBorderWidth = 2.0;
        // prop: renderer
        // A class of a renderer which will draw the series, 
        // see <$.jqplot.LineRenderer>.
        this.renderer = $.jqplot.LineRenderer;
        // prop: rendererOptions
        // Options to pass on to the renderer.
        this.rendererOptions = {};
        this.data = [];
        this.gridData = [];
        // prop: label
        // Line label to use in the legend.
        this.label = '';
        // prop: showLabel
        // true to show label for this series in the legend.
        this.showLabel = true;
        // prop: color
        // css color spec for the series
        this.color;
        // prop: negativeColor
        // css color spec used for filled (area) plots that are filled to zero and
        // the "useNegativeColors" option is true.
        this.negativeColor;
        // prop: lineWidth
        // width of the line in pixels.  May have different meanings depending on renderer.
        this.lineWidth = 2.0;
        // prop: lineJoin
        // Canvas lineJoin style between segments of series.
        this.lineJoin = 'round';
        // prop: lineCap
        // Canvas lineCap style at ends of line.
        this.lineCap = 'round';
        // prop: linePattern
        // line pattern 'dashed', 'dotted', 'solid', some combination
        // of '-' and '.' characters such as '.-.' or a numerical array like 
        // [draw, skip, draw, skip, ...] such as [1, 10] to draw a dotted line, 
        // [1, 10, 20, 10] to draw a dot-dash line, and so on.
        this.linePattern = 'solid';
        this.shadow = true;
        // prop: shadowAngle
        // Shadow angle in degrees
        this.shadowAngle = 45;
        // prop: shadowOffset
        // Shadow offset from line in pixels
        this.shadowOffset = 1.25;
        // prop: shadowDepth
        // Number of times shadow is stroked, each stroke offset shadowOffset from the last.
        this.shadowDepth = 3;
        // prop: shadowAlpha
        // Alpha channel transparency of shadow.  0 = transparent.
        this.shadowAlpha = '0.1';
        // prop: breakOnNull
        // Wether line segments should be be broken at null value.
        // False will join point on either side of line.
        this.breakOnNull = false;
        // prop: markerRenderer
        // A class of a renderer which will draw marker (e.g. circle, square, ...) at the data points,
        // see <$.jqplot.MarkerRenderer>.
        this.markerRenderer = $.jqplot.MarkerRenderer;
        // prop: markerOptions
        // renderer specific options to pass to the markerRenderer,
        // see <$.jqplot.MarkerRenderer>.
        this.markerOptions = {};
        // prop: showLine
        // wether to actually draw the line or not.  Series will still be renderered, even if no line is drawn.
        this.showLine = true;
        // prop: showMarker
        // wether or not to show the markers at the data points.
        this.showMarker = true;
        // prop: index
        // 0 based index of this series in the plot series array.
        this.index;
        // prop: fill
        // true or false, wether to fill under lines or in bars.
        // May not be implemented in all renderers.
        this.fill = false;
        // prop: fillColor
        // CSS color spec to use for fill under line.  Defaults to line color.
        this.fillColor;
        // prop: fillAlpha
        // Alpha transparency to apply to the fill under the line.
        // Use this to adjust alpha separate from fill color.
        this.fillAlpha;
        // prop: fillAndStroke
        // If true will stroke the line (with color this.color) as well as fill under it.
        // Applies only when fill is true.
        this.fillAndStroke = false;
        // prop: disableStack
        // true to not stack this series with other series in the plot.
        // To render properly, non-stacked series must come after any stacked series
        // in the plot's data series array.  So, the plot's data series array would look like:
        // > [stackedSeries1, stackedSeries2, ..., nonStackedSeries1, nonStackedSeries2, ...]
        // disableStack will put a gap in the stacking order of series, and subsequent
        // stacked series will not fill down through the non-stacked series and will
        // most likely not stack properly on top of the non-stacked series.
        this.disableStack = false;
        // _stack is set by the Plot if the plot is a stacked chart.
        // will stack lines or bars on top of one another to build a "mountain" style chart.
        // May not be implemented in all renderers.
        this._stack = false;
        // prop: neighborThreshold
        // how close or far (in pixels) the cursor must be from a point marker to detect the point.
        this.neighborThreshold = 4;
        // prop: fillToZero
        // true will force bar and filled series to fill toward zero on the fill Axis.
        this.fillToZero = false;
        // prop: fillToValue
        // fill a filled series to this value on the fill axis.
        // Works in conjunction with fillToZero, so that must be true.
        this.fillToValue = 0;
        // prop: fillAxis
        // Either 'x' or 'y'.  Which axis to fill the line toward if fillToZero is true.
        // 'y' means fill up/down to 0 on the y axis for this series.
        this.fillAxis = 'y';
        // prop: useNegativeColors
        // true to color negative values differently in filled and bar charts.
        this.useNegativeColors = true;
        this._stackData = [];
        // _plotData accounts for stacking.  If plots not stacked, _plotData and data are same.  If
        // stacked, _plotData is accumulation of stacking data.
        this._plotData = [];
        // _plotValues hold the individual x and y values that will be plotted for this series.
        this._plotValues = {x:[], y:[]};
        // statistics about the intervals between data points.  Used for auto scaling.
        this._intervals = {x:{}, y:{}};
        // data from the previous series, for stacked charts.
        this._prevPlotData = [];
        this._prevGridData = [];
        this._stackAxis = 'y';
        this._primaryAxis = '_xaxis';
        // give each series a canvas to draw on.  This should allow for redrawing speedups.
        this.canvas = new $.jqplot.GenericCanvas();
        this.shadowCanvas = null;
        this.isBigData = isBigData;
        if(!isBigData)
        {
            this.shadowCanvas = new $.jqplot.GenericCanvas();            
        }
        this.plugins = {};
        // sum of y values in this series.
        this._sumy = 0;
        this._sumx = 0;
        this._type = '';
    }
    
    Series.prototype = new $.jqplot.ElemContainer();
    Series.prototype.constructor = Series;

    Series.prototype.destroy = function()
    {
        this._stackData = null;
        this._plotData = null;
        this._plotValues = null;
        this._intervals = null;
        this._prevPlotData = null;
        this._prevGridData = null;
        this._stackAxis = null;
        this._primaryAxis = null;
        this.gridData = null;
        this._boundingBox = null;
        this.markerRenderer = null;
        this.markerOptions = null;
        this.negativeSeriesColors = null;
        if(this.plugins)
        {
            if(this.plugins.pointLabels)
            {
                this.plugins.pointLabels.destroy();
            }
        }
        if(this.canvas)
        {
            this.canvas.resetCanvas();
            this.canvas = null;
        }
        if(this.shadowCanvas)
        {
            this.shadowCanvas.resetCanvas();
            this.shadowCanvas = null;
        }
        if(this.renderer && this.renderer._smoothedData)
        {
             this.renderer._smoothedData = [];
        }
        if(this.renderer)
        {
            this.renderer._smoothedData = [];
            this.renderer._smoothedPlotData = [];
            this.renderer._hiBandGridData = [];
            this.renderer._lowBandGridData = [];
            this.renderer._hiBandSmoothedData = [];
            this.renderer._lowBandSmoothedData = [];
        }
        if(this._elem)
        {
            tiny.garbageCollect(this._elem, true);
            this._elem = null;
        }
        this.plugins = {};
        // sum of y values in this series.
        this._sumy = 0;
        this._sumx = 0;
        this._type = '';
    }
    
    Series.prototype.init = function(index, gridbw, plot) {
        // weed out any null values in the data.
        this.index = index;
        this.gridBorderWidth = gridbw;
        var d = this.data;
        var temp = [], i;
        for (i=0; i<d.length; i++) {
            if (! this.breakOnNull) {
                if (d[i] == null || d[i][0] == null || d[i][1] == null) {
                    continue;
                }
                else {
                    temp.push(d[i]);
                }
            }
            else {
               
                temp.push(d[i]);
            }
        }
        this.data = temp;

        // parse the renderer options and apply default colors if not provided
        if (!this.color && this.show) {
            this.color = plot.colorGenerator.get(this.index);
        }
        if (!this.negativeColor && this.show) {
            this.negativeColor = plot.negativeColorGenerator.get(this.index);
        }


        if (!this.fillColor) {
            this.fillColor = this.color;
        }
        if (this.fillAlpha) {
            var comp = $.jqplot.normalize2rgb(this.fillColor);
            var comp = $.jqplot.getColorComponents(comp);
            this.fillColor = 'rgba('+comp[0]+','+comp[1]+','+comp[2]+','+this.fillAlpha+')';
        }
        this.renderer = new this.renderer();
        this.renderer.init.call(this, this.rendererOptions, plot);
        this.markerRenderer = new this.markerRenderer();
        if (!this.markerOptions.color) {
            this.markerOptions.color = this.color;
        }
        if (this.markerOptions.show == null) {
            this.markerOptions.show = this.showMarker;
        }
        this.showMarker = this.markerOptions.show;
        // the markerRenderer is called within it's own scaope, don't want to overwrite series options!!
        this.markerRenderer.init(this.markerOptions);
    };
    
    // data - optional data point array to draw using this series renderer
    // gridData - optional grid data point array to draw using this series renderer
    // stackData - array of cumulative data for stacked plots.
    Series.prototype.draw = function(sctx, opts, plot, isDrawPointLabel, canWidth) {
        var options = (opts == undefined) ? {} : opts;
        sctx = (sctx == undefined) ? this.canvas._ctx : sctx;
        
        var j, data, gridData;
        
        // hooks get called even if series not shown
        // we don't clear canvas here, it would wipe out all other series as well.
        for (j=0; j<$.jqplot.preDrawSeriesHooks.length; j++) {
            $.jqplot.preDrawSeriesHooks[j].call(this, sctx, options);
        }
        if (this.show) {
            this.renderer.setGridData.call(this, plot, canWidth);
            if (!options.preventJqPlotSeriesDrawTrigger) {
                $(sctx.canvas).trigger('jqplotSeriesDraw', [this.data, this.gridData]);
            }
            data = [];
            if (options.data) {
                data = options.data;
            }
            else if (!this._stack) {
                data = this.data;
            }
            else {
                data = this._plotData;
            }
            gridData = options.gridData || this.renderer.makeGridData.call(this, data, plot, canWidth);

            if (this._type === 'line' && this.renderer.smooth && this.renderer._smoothedData.length) {
                gridData = this.renderer._smoothedData;
				if(this.fill)
				{
					 var gradient = sctx.createLinearGradient(0,0,
						0,parseFloat($(sctx.canvas).css('height')));
					gradient.addColorStop(0.1, this.fillColor);					
					var c1 =this.fillColor.substring(0,this.fillColor.lastIndexOf(','))+',.30)';
					gradient.addColorStop(0.7, c1);
					var c3 = this.fillColor.substring(0,this.fillColor.lastIndexOf(','))+',.35)';
					gradient.addColorStop(0.75, c3);
					var c2 = this.fillColor.substring(0,this.fillColor.lastIndexOf(','))+',.40)';
					gradient.addColorStop(0.85, c2);
					 var c4 = this.fillColor.substring(0,this.fillColor.lastIndexOf(','))+',.45)';
					gradient.addColorStop(0.90, c4);
					var c5 = this.fillColor.substring(0,this.fillColor.lastIndexOf(','))+',.50)';
					gradient.addColorStop(0.94, c5);
					this.renderer.shapeRenderer.fillStyle = gradient; 					
				}
            }

            this.renderer.draw.call(this, sctx, gridData, options, plot);
        }
        
        for (j=0; j<$.jqplot.postDrawSeriesHooks.length; j++) {
            if(isDrawPointLabel)
            {
                $.jqplot.postDrawSeriesHooks[j].call(this, sctx, options, plot);
            }
            else if(this._type === 'line'||this._type === 'bar')
            {
                $.jqplot.postDrawSeriesHooks[j].call(this, sctx, options, plot);                
            }
        }
        
        sctx = opts = plot = j = data = gridData = null;
    };
    
        Series.prototype.drawShadow = function(sctx, opts, plot, canWidth) {
        if(this.isBigData)
        {
             return;       
        }
        var options = (opts == undefined) ? {} : opts;
        sctx = (sctx == undefined) ? this.shadowCanvas._ctx : sctx;
        
        var j, data, gridData;
        
        // hooks get called even if series not shown
        // we don't clear canvas here, it would wipe out all other series as well.
        for (j=0; j<$.jqplot.preDrawSeriesShadowHooks.length; j++) {
            $.jqplot.preDrawSeriesShadowHooks[j].call(this, sctx, options);
        }
        if (this.shadow) {
            this.renderer.setGridData.call(this, plot);

            data = [];
            if (options.data) {
                data = options.data;
            }
            else if (!this._stack) {
                data = this.data;
            }
            else {
                data = this._plotData;
            }
            gridData = options.gridData || this.renderer.makeGridData.call(this, data, plot, canWidth);
        
            this.renderer.drawShadow.call(this, sctx, gridData, options);
        }
        
        for (j=0; j<$.jqplot.postDrawSeriesShadowHooks.length; j++) {
            $.jqplot.postDrawSeriesShadowHooks[j].call(this, sctx, options);
        }
        
        sctx = opts = plot = j = data = gridData = null;
        
    };
    
    // toggles series display on plot, e.g. show/hide series
    Series.prototype.toggleDisplay = function(ev) {
        var s, speed;
        if (ev.data.series) {
            s = ev.data.series;
        }
        else {
            s = this;
        }
        if (ev.data.speed) {
            speed = ev.data.speed;
        }
        if (speed) {
            if (s.canvas._elem.is(':hidden')) {
                s.canvas._elem.removeClass('jqplot-series-hidden');
                if (!this.isBigData && s.shadowCanvas._elem) {
                    s.shadowCanvas._elem.fadeIn(speed);
                }
                s.canvas._elem.fadeIn(speed);
                s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).fadeIn(speed);
            }
            else {
                s.canvas._elem.addClass('jqplot-series-hidden');
                if (!this.isBigData && s.shadowCanvas._elem) {
                    s.shadowCanvas._elem.fadeOut(speed);
                }
                s.canvas._elem.fadeOut(speed);
                s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).fadeOut(speed);
            }
        }
        else {
            if (s.canvas._elem.is(':hidden')) {
                s.canvas._elem.removeClass('jqplot-series-hidden');
                if (!this.isBigData && s.shadowCanvas._elem) {
                    s.shadowCanvas._elem.show();
                }
                s.canvas._elem.show();
                s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).show();
            }
            else {
                s.canvas._elem.addClass('jqplot-series-hidden');
                if (!this.isBigData && s.shadowCanvas._elem) {
                    s.shadowCanvas._elem.hide();
                }
                s.canvas._elem.hide();
                s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).hide();
            }
        }
    };
    
    Series.prototype.showSeries = function(isShow, series) 
    {
        var s, speed;
        if (series) 
        {
            s = series;
        }
        else
        {
            s = this;
        }
       if(isShow)
       {
            if (s.canvas._elem.is(':hidden')) 
            {
                s.canvas._elem.removeClass('jqplot-series-hidden');
                if (!this.isBigData && s.shadowCanvas._elem) 
                {
                    s.shadowCanvas._elem.show();
                }
                s.canvas._elem.show();
                s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).show();
                // In case of pie chart the point labels has to be shown
                s.canvas._elem.siblings('.jqplot-pie-series.jqplot-data-label').show();
            }
        }
        else 
        {
            s.canvas._elem.addClass('jqplot-series-hidden');
            if (!this.isBigData && s.shadowCanvas._elem) 
            {
                s.shadowCanvas._elem.hide();
            }
            s.canvas._elem.hide();
            s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-'+s.index).hide();
            // In case of pie chart the point labels has to be hidden
            s.canvas._elem.siblings('.jqplot-pie-series.jqplot-data-label').hide();
        }
    };
    


    /**
     * Class: Grid
     * 
     * Object representing the grid on which the plot is drawn.  The grid in this
     * context is the area bounded by the axes, the area which will contain the series.
     * Note, the series are drawn on their own canvas.
     * The Grid object cannot be instantiated directly, but is created by the Plot oject.  
     * Grid properties can be set or overriden by the options passed in from the user.
     */
    function Grid() {
        $.jqplot.ElemContainer.call(this);
        // Group: Properties
        
        // prop: drawGridlines
        // wether to draw the gridlines on the plot.
        this.drawGridlines = true;
        // prop: gridLineColor
        // color of the grid lines.
        this.gridLineColor = '#cccccc';
        // prop: gridLineWidth
        // width of the grid lines.
        this.gridLineWidth = 1.0;
        // prop: background
        // css spec for the background color.
        this.background = '#fffdf6';
        // prop: borderColor
        // css spec for the color of the grid border.
        this.borderColor = '#999999';
        // prop: borderWidth
        // width of the border in pixels.
        this.borderWidth = 0.0;
        // prop: drawBorder
        // True to draw border around grid.
        this.drawBorder = true;
        // prop: shadow
        // wether to show a shadow behind the grid.
        this.shadow = false;
        // prop: shadowAngle
        // shadow angle in degrees
        this.shadowAngle = 45;
        // prop: shadowOffset
        // Offset of each shadow stroke from the border in pixels
        this.shadowOffset = 1.5;
        // prop: shadowWidth
        // width of the stoke for the shadow
        this.shadowWidth = 3;
        // prop: shadowDepth
        // Number of times shadow is stroked, each stroke offset shadowOffset from the last.
        this.shadowDepth = 3;
        // prop: shadowColor
        // an optional css color spec for the shadow in 'rgba(n, n, n, n)' form
        this.shadowColor = null;
        // prop: shadowAlpha
        // Alpha channel transparency of shadow.  0 = transparent.
        this.shadowAlpha = '0.07';
        this._left;
        this._top;
        this._right;
        this._bottom;
        this._width;
        this._height;
        this._axes = [];
        // prop: renderer
        // Instance of a renderer which will actually render the grid,
        // see <$.jqplot.CanvasGridRenderer>.
        this.renderer = $.jqplot.CanvasGridRenderer;
        // prop: rendererOptions
        // Options to pass on to the renderer,
        // see <$.jqplot.CanvasGridRenderer>.
        this.rendererOptions = {};
        this._offsets = {top:null, bottom:null, left:null, right:null};
    }
    
    Grid.prototype = new $.jqplot.ElemContainer();
    Grid.prototype.constructor = Grid;

    Grid.prototype.destroy = function()
    {
         if(this.renderer)
         {
            this.renderer.resetCanvas(this._elem);
            this._elem = null;
         }
         else if (this._elem) {
          if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
            elem = this._elem.get(0);
            window.G_vmlCanvasManager.uninitElement(elem);
            tiny.garbageCollect(elem);
          }
          
          this._elem.emptyForce();
          this._elem = null;
        }
         this._axes = null;
    }
    
    Grid.prototype.init = function() {
        this.renderer = new this.renderer();
        this.renderer.init.call(this, this.rendererOptions);
    };
    
    Grid.prototype.createElement = function(offsets,plot) {
        this._offsets = offsets;
        return this.renderer.createElement.call(this, plot);
    };
    
    Grid.prototype.draw = function() {
        this.renderer.draw.call(this);
    };
    
    $.jqplot.GenericCanvas = function() {
        $.jqplot.ElemContainer.call(this);
        this._ctx;  
    };
    
    $.jqplot.GenericCanvas.prototype = new $.jqplot.ElemContainer();
    $.jqplot.GenericCanvas.prototype.constructor = $.jqplot.GenericCanvas;
    
    $.jqplot.GenericCanvas.prototype.createElement = function(offsets, clss, plotDimensions, plot) {
        this._offsets = offsets;
        var klass = 'jqplot';
        if (clss != undefined) {
            klass = clss;
        }
        var elem;

        elem = plot.canvasManager.getCanvas();
        
        // if new plotDimensions supplied, use them.
        if (plotDimensions != null) {
            this._plotDimensions = plotDimensions;
        }
        
        elem.width = this._plotDimensions.width - this._offsets.left - this._offsets.right;
        elem.height = this._plotDimensions.height - this._offsets.top - this._offsets.bottom;
        this._elem = $(elem);
        this._elem.css({ position: 'absolute', left: this._offsets.left, top: this._offsets.top });
        
        this._elem.addClass(klass);
        
        elem = plot.canvasManager.initCanvas(elem);
        
        elem = null;
        return this._elem;
    };
    
    $.jqplot.GenericCanvas.prototype.setContext = function() {
        this._ctx = this._elem.get(0).getContext("2d");
        return this._ctx;
    };
    
    // Memory Leaks patch
    $.jqplot.GenericCanvas.prototype.resetCanvas = function(_elem) {
      if (_elem) {
        if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
           window.G_vmlCanvasManager.uninitElement(_elem.get(0));
           tiny.garbageCollect(_elem.get(0));
           _elem.empty();
        }
        
        _elem.emptyForce();
        tiny.garbageCollect(_elem, true);
      }
      
      this._ctx = null;
    };
    
    $.jqplot.HooksManager = function () {
        this.hooks =[];
        this.args = [];
    };
    
    $.jqplot.HooksManager.prototype.addOnce = function(fn, args) {
        args = args || [];
        var havehook = false;
        for (var i=0, l=this.hooks.length; i<l; i++) {
            if (this.hooks[i][0] == fn) {
                havehook = true;
            }
        }
        if (!havehook) {
            this.hooks.push(fn);
            this.args.push(args);
        }
    };
    
    $.jqplot.HooksManager.prototype.add = function(fn, args) {
        args = args || [];
        this.hooks.push(fn);
        this.args.push(args);
    };
    
    $.jqplot.EventListenerManager = function () {
        this.hooks =[];
    };
    
    $.jqplot.EventListenerManager.prototype.addOnce = function(ev, fn) {
        var havehook = false, h, i;
        for (var i=0, l=this.hooks.length; i<l; i++) {
            h = this.hooks[i];
            if (h[0] == ev && h[1] == fn) {
                havehook = true;
            }
        }
        if (!havehook) {
            this.hooks.push([ev, fn]);
        }
    };
    
    $.jqplot.EventListenerManager.prototype.add = function(ev, fn) {
        this.hooks.push([ev, fn]);
    };


    var _axisNames = ['yMidAxis', 'xaxis', 'yaxis', 'x2axis', 'y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis'];

    /**
     * Class: jqPlot
     * Plot object returned by call to $.jqplot.  Handles parsing user options,
     * creating sub objects (Axes, legend, title, series) and rendering the plot.
     */
    function jqPlot() {
        // Group: Properties
        // These properties are specified at the top of the options object

        this.LARGE_DATA_SIZE = 240;//39 commented because it gives chat rerender problem for ie8

        // prop: animate
        // True to animate the series on initial plot draw (renderer dependent).
        // Actual animation functionality must be supported in the renderer.
        this.animate = false;
        // prop: animateReplot
        // True to animate series after a call to the replot() method.
        // Use with caution!  Replots can happen very frequently under
        // certain circumstances (e.g. resizing, dragging points) and
        // animation in these situations can cause problems.
        this.animateReplot = false;
        // prop: axes
        // up to 4 axes are supported, each with it's own options, 
        // See <Axis> for axis specific options.
        this.axes = {xaxis: new Axis('xaxis'), yaxis: new Axis('yaxis'), x2axis: new Axis('x2axis'), y2axis: new Axis('y2axis'), y3axis: new Axis('y3axis'), y4axis: new Axis('y4axis'), y5axis: new Axis('y5axis'), y6axis: new Axis('y6axis'), y7axis: new Axis('y7axis'), y8axis: new Axis('y8axis'), y9axis: new Axis('y9axis'), yMidAxis: new Axis('yMidAxis')};
        this.baseCanvas = new $.jqplot.GenericCanvas();
        // true to intercept right click events and fire a 'jqplotRightClick' event.
        // this will also block the context menu.
        this.captureRightClick = false;
        // prop: data
        // user's data.  Data should *NOT* be specified in the options object,
        // but be passed in as the second argument to the $.jqplot() function.
        // The data property is described here soley for reference. 
        // The data should be in the form of an array of 2D or 1D arrays like
        this.data = [];
        // prop: dataRenderer
        // A callable which can be used to preprocess data passed into the plot.
        // Will be called with 2 arguments, the plot data and a reference to the plot.
        this.dataRenderer;
        // prop: dataRendererOptions
        // Options that will be passed to the dataRenderer.
        // Can be of any type.
        this.dataRendererOptions;
        this.defaults = {
            // prop: axesDefaults
            // default options that will be applied to all axes.
            // see <Axis> for axes options.
            axesDefaults: {},
            axes: {xaxis:{}, yaxis:{}, x2axis:{}, y2axis:{}, y3axis:{}, y4axis:{}, y5axis:{}, y6axis:{}, y7axis:{}, y8axis:{}, y9axis:{}, yMidAxis:{}},
            // prop: seriesDefaults
            // default options that will be applied to all series.
            // see <Series> for series options.
            seriesDefaults: {},
            series:[]
        };
        // prop: defaultAxisStart
        // 1-D data series are internally converted into 2-D [x,y] data point arrays
        // by jqPlot.  This is the default starting value for the missing x or y value.
        // The added data will be a monotonically increasing series (e.g. [1, 2, 3, ...])
        // starting at this value.
        this.defaultAxisStart = 1;
        // this.doCustomEventBinding = true;
        // prop: drawIfHidden
        // True to execute the draw method even if the plot target is hidden.
        // Generally, this should be false.  Most plot elements will not be sized/
        // positioned correclty if renderered into a hidden container.  To render into
        // a hidden container, call the replot method when the container is shown.
        this.drawIfHidden = false;
        this.eventCanvas = new $.jqplot.GenericCanvas();
        // prop: fillBetween
        // Fill between 2 line series in a plot.
        // Options object:
        // {
        //    series1: first index (0 based) of series in fill
        //    series2: second index (0 based) of series in fill
        //    color: color of fill [default fillColor of series1]
        //    baseSeries:  fill will be drawn below this series (0 based index)
        //    fill: false to turn off fill [default true].
        //  }
        this.fillBetween = {
            series1: null,
            series2: null,
            color: null,
            baseSeries: 0,
            fill: true
        };
        // prop; fontFamily
        // css spec for the font-family attribute.  Default for the entire plot.
        this.fontFamily;
        // prop: fontSize
        // css spec for the font-size attribute.  Default for the entire plot.
        this.fontSize;
        // prop: grid
        // See <Grid> for grid specific options.
        this.grid = new Grid();
        // prop: legend
        // see <$.jqplot.TableLegendRenderer>
        this.legend = new Legend();
        // prop: noDataIndicator
        // Options to set up a mock plot with a data loading indicator if no data is specified.
        this.negativeSeriesColors = $.jqplot.config.defaultNegativeColors;
        this.noDataIndicator = {    
            show: false,
            indicator: 'Loading Data...',
            axes: {
            }
        };
        // container to hold all of the merged options.  Convienence for plugins.
        this.options = {};
        this.previousSeriesStack = [];
        // Namespece to hold plugins.  Generally non-renderer plugins add themselves to here.
        this.plugins = {};
        // prop: series
        // Array of series object options.
        // see <Series> for series specific options.
        this.series = [];
        // array of series indicies. Keep track of order
        // which series canvases are displayed, lowest
        // to highest, back to front.
        this.seriesStack = [];
        // prop: seriesColors
        // Ann array of CSS color specifications that will be applied, in order,
        // to the series in the plot.  Colors will wrap around so, if their
        // are more series than colors, colors will be reused starting at the
        // beginning.  For pie charts, this specifies the colors of the slices.
        this.seriesColors = $.jqplot.config.defaultColors;
        // prop: seriesDefGradColors
        // An array of CSS color specifications that will be applied, in order,
        // to the series in the plot for gradient.  Colors will wrap around so, if their
        // are more series than colors, colors will be reused starting at the
        // beginning.  For pie charts, this specifies the colors of the slices.        
        this.seriesDefGradColors = $.jqplot.config.defaultColors;
        // prop: sortData
        // false to not sort the data passed in by the user.
        // Many bar, stakced and other graphs as well as many plugins depend on
        // having sorted data.
        this.sortData = true;
        // prop: stackSeries
        // true or false, creates a stack or "mountain" plot.
        // Not all series renderers may implement this option.
        this.stackSeries = false;
        // a shortcut for axis syncTicks options.  Not implemented yet.
        this.syncXTicks = true;
        // a shortcut for axis syncTicks options.  Not implemented yet.
        this.syncYTicks = true;
        // the jquery object for the dom target.
        this.target = null; 
        // The id of the dom element to render the plot into
        this.targetId = null;
        // prop textColor
        // css spec for the css color attribute.  Default for the entire plot.
        this.textColor;
        // prop: title
        // Title object.  See <Title> for specific options.  As a shortcut, you
        // can specify the title option as just a string like: title: 'My Plot'
        // and this will create a new title object with the specified text.
        this.title = new Title();
        // Count how many times the draw method has been called while the plot is visible.
        // Mostly used to test if plot has never been dran (=0), has been successfully drawn
        // into a visible container once (=1) or draw more than once into a visible container.
        // Can use this in tests to see if plot has been visibly drawn at least one time.
        // After plot has been visibly drawn once, it generally doesn't need redrawn if its
        // container is hidden and shown.
        this._drawCount = 0;
        // sum of y values for all series in plot.
        // used in mekko chart.
        this._sumy = 0;
        this._sumx = 0;
        // array to hold the cumulative stacked series data.
        // used to ajust the individual series data, which won't have access to other
        // series data.
        this._stackData = [];
        // array that holds the data to be plotted. This will be the series data
        // merged with the the appropriate data from _stackData according to the stackAxis.
        this._plotData = [];
        this._width = null;
        this._height = null; 
        this._plotDimensions = {height:null, width:null};
        this._gridPadding = {top:null, right:null, bottom:null, left:null};
        this._defaultGridPadding = {top:10, right:10, bottom:23, left:10};

        this._addDomReference = $.jqplot.config.addDomReference;

        this.preInitHooks = new $.jqplot.HooksManager();
        this.postInitHooks = new $.jqplot.HooksManager();
        this.preParseOptionsHooks = new $.jqplot.HooksManager();
        this.postParseOptionsHooks = new $.jqplot.HooksManager();
        this.preDrawHooks = new $.jqplot.HooksManager();
        this.postDrawHooks = new $.jqplot.HooksManager();
        this.preDrawSeriesHooks = new $.jqplot.HooksManager();
        this.postDrawSeriesHooks = new $.jqplot.HooksManager();
        this.preDrawLegendHooks = new $.jqplot.HooksManager();
        this.addLegendRowHooks = new $.jqplot.HooksManager();
        this.preSeriesInitHooks = new $.jqplot.HooksManager();
        this.postSeriesInitHooks = new $.jqplot.HooksManager();
        this.preParseSeriesOptionsHooks = new $.jqplot.HooksManager();
        this.postParseSeriesOptionsHooks = new $.jqplot.HooksManager();
        this.eventListenerHooks = new $.jqplot.EventListenerManager();
        this.preDrawSeriesShadowHooks = new $.jqplot.HooksManager();
        this.postDrawSeriesShadowHooks = new $.jqplot.HooksManager();
        
        this.colorGenerator = new $.jqplot.ColorGenerator();
        this.negativeColorGenerator = new $.jqplot.ColorGenerator();

        this.canvasManager = new $.jqplot.CanvasManager();

        this.themeEngine = new $.jqplot.ThemeEngine();
        
        var seriesColorsIndex = 0;

        // Group: methods
        //
        // method: init
        // sets the plot target, checks data and applies user
        // options to plot.
        this.init = function(target, data, options) {
            options = options || {};
            for (var i=0; i<$.jqplot.preInitHooks.length; i++) {
                $.jqplot.preInitHooks[i].call(this, target, data, options);
            }

            for (var i=0; i<this.preInitHooks.hooks.length; i++) {
                this.preInitHooks.hooks[i].call(this, target, data, options);
            }
            
            this.targetId = '#'+target;
            this.target = $('#'+target);

            if(data && data.length > 0)
            {
                options.isBigData = data.length * data[0].length > this.LARGE_DATA_SIZE && $.jqplot.use_excanvas;
            }

            //////
            // Add a reference to plot
            //////
            if (this._addDomReference) {
                this.target.data('jqplot_plot', this);
            }
            // remove any error class that may be stuck on target.
            this.target.removeClass('jqplot-error');
            if (!this.target.get(0)) {
                throw "No plot target specified";
            }
            
            // make sure the target is positioned by some means and set css
            if (this.target.css('position') == 'static') {
                this.target.css('position', 'relative');
            }
            if (!this.target.hasClass('jqplot-target')) {
                this.target.addClass('jqplot-target');
            }
            
            // if no height or width specified, use a default.
            var optionH = options.height || this.target.height();
            if (!optionH) {
                var h;
                if (options && options.height) {
                    h = parseInt(options.height, 10);
                }
                else if (this.target.attr('data-height')) {
                    h = parseInt(this.target.attr('data-height'), 10);
                }
                else {
                    if (options.tinyType === 'cylinder')
                    {
                        h = 230;
                    }
                    else if (options.tinyType === 'linear')
                    {
                        h = 150;
                    }
                    else
                    {
                        h = parseInt($.jqplot.config.defaultHeight, 10);
                    }
                }
                this._height = options.height = h;
                this.target.css('height', h+'px');
            }
            else {
                this._height = h = options.height = optionH;
            }
            var optionW = options.width || this.target.width();
            if (!optionW) {
                var w;
                if (options && options.width) {
                    w = parseInt(options.width, 10);
                }
                else if (this.target.attr('data-width')) {
                    w = parseInt(this.target.attr('data-width'), 10);
                }
                else {
                    w = parseInt($.jqplot.config.defaultWidth, 10);
                }
                this._width = options.width = w;
                this.target.css('width', w+'px');
            }
            else {
                this._width = w = options.width = optionW;
            }
            
            this._plotDimensions.height = this._height;
            this._plotDimensions.width = this._width;
            this.grid._plotDimensions = this._plotDimensions;
            this.title._plotDimensions = this._plotDimensions;
            this.baseCanvas._plotDimensions = this._plotDimensions;
            this.eventCanvas._plotDimensions = this._plotDimensions;
            this.legend._plotDimensions = this._plotDimensions;
            if (this._height <=0 || this._width <=0 || !this._height || !this._width) {
                throw "Canvas dimension not set";
            }
            
            if (options.dataRenderer && jQuery.isFunction(options.dataRenderer)) {
                if (options.dataRendererOptions) {
                    this.dataRendererOptions = options.dataRendererOptions;
                }
                this.dataRenderer = options.dataRenderer;
                data = this.dataRenderer(data, this, this.dataRendererOptions);
            }
            
            if (options.noDataIndicator && jQuery.isPlainObject(options.noDataIndicator)) {
                $.extend(true, this.noDataIndicator, options.noDataIndicator);
            }
            
            if (data == null || jQuery.isArray(data) == false || data.length == 0 || jQuery.isArray(data[0]) == false || data[0].length == 0) {
                
                if (this.noDataIndicator.show == false) {
                    throw{
                        name: "DataError",
                        message: "No data to plot."
                    };
                }
                
                else {
                    // have to be descructive here in order for plot to not try and render series.
                    // This means that $.jqplot() will have to be called again when there is data.
                    //delete options.series;
                    
                    for (var ax in this.noDataIndicator.axes) {
                        for (var prop in this.noDataIndicator.axes[ax]) {
                            this.axes[ax][prop] = this.noDataIndicator.axes[ax][prop];
                        }
                    }
                    
                    this.postDrawHooks.add(function() {
                    });

                }
            }
            
            this.data = data;
            
            this.parseOptions(options);
            
            if (this.textColor) {
                this.target.css('color', this.textColor);
            }
            if (this.fontFamily) {
                this.target.css('font-family', this.fontFamily);
            }
            if (this.fontSize) {
                this.target.css('font-size', this.fontSize);
            }
            
            this.title.init();
            this.legend.init();
            this._sumy = 0;
            this._sumx = 0;
            for (var i=0; i<this.series.length; i++) {
                // set default stacking order for series canvases
                this.seriesStack.push(i);
                this.previousSeriesStack.push(i);
                if(!this.series[i].isBigData)
                {
                    this.series[i].shadowCanvas._plotDimensions = this._plotDimensions;
                }
                this.series[i].canvas._plotDimensions = this._plotDimensions;
                for (var j=0; j<$.jqplot.preSeriesInitHooks.length; j++) {
                    $.jqplot.preSeriesInitHooks[j].call(this.series[i], target, data, this.options.seriesDefaults, this.options.series[i], this);
                }
                for (var j=0; j<this.preSeriesInitHooks.hooks.length; j++) {
                    this.preSeriesInitHooks.hooks[j].call(this.series[i], target, data, this.options.seriesDefaults, this.options.series[i], this);
                }
                this.populatePlotData(this.series[i], i);
                this.series[i]._plotDimensions = this._plotDimensions;
                this.series[i].init(i, this.grid.borderWidth, this);
                for (var j=0; j<$.jqplot.postSeriesInitHooks.length; j++) {
                    $.jqplot.postSeriesInitHooks[j].call(this.series[i], target, data, this.options.seriesDefaults, this.options.series[i], this);
                }
                for (var j=0; j<this.postSeriesInitHooks.hooks.length; j++) {
                    this.postSeriesInitHooks.hooks[j].call(this.series[i], target, data, this.options.seriesDefaults, this.options.series[i], this);
                }
                this._sumy += this.series[i]._sumy;
                this._sumx += this.series[i]._sumx;
            }

            var name;
            for (var i=0; i<12; i++) {
                name = _axisNames[i];
                this.axes[name]._plotDimensions = this._plotDimensions;
                this.axes[name].init();
                this.axes[name].isBigData = this.options.isBigData;
                if (this.axes[name].borderColor == null) {
                    if (name.charAt(0) !== 'x' && this.axes[name].useSeriesColor === true && this.axes[name].show) {
                        this.axes[name].borderColor = this.axes[name]._series[0].color;
                    }
                    else {
                        this.axes[name].borderColor = this.grid.borderColor;
                    }
                }
            }
            
            if (this.sortData) {
                sortData(this.series);
            }
            this.grid.init();
            this.grid._axes = this.axes;
            
            this.legend._series = this.series;

            for (var i=0; i<$.jqplot.postInitHooks.length; i++) {
                $.jqplot.postInitHooks[i].call(this, target, data, options);
            }

            for (var i=0; i<this.postInitHooks.hooks.length; i++) {
                this.postInitHooks.hooks[i].call(this, target, data, options);
            }
        };  
        
        // method: resetAxesScale
        // Reset the specified axes min, max, numberTicks and tickInterval properties to null
        // or reset these properties on all axes if no list of axes is provided.
        //
        // Parameters:
        // axes - Boolean to reset or not reset all axes or an array or object of axis names to reset.
        this.resetAxesScale = function(axes, options) {
            var opts = options || {};
            var ax = axes || this.axes;
            if (ax === true) {
                ax = this.axes;
            }
            if (jQuery.isArray(ax)) {
                for (var i = 0; i < ax.length; i++) {
                    this.axes[ax[i]].resetScale(opts[ax[i]]);
                }
            }
            else if (typeof(ax) === 'object') {
                for (var name in ax) {
                    this.axes[name].resetScale(opts[name]);
                }
            }
        };
        // method: reInitialize
        // reinitialize plot for replotting.
        // not called directly.
        this.reInitialize = function () {
            // Plot should be visible and have a height and width.
            // If plot doesn't have height and width for some
            // reason, set it by other means.  Plot must not have
            // a display:none attribute, however.
            
            if (this.isBigData)
            {
                this._height = this.options.height;
                this._width = this.options.width;
            }
            else
            {
                this._height = this.target.height();
                this._width = this.target.width();
            }
            
            if (this._height <=0 || this._width <=0 || !this._height || !this._width) {
                throw "Target dimension not set";
            }
            var resizeFactorY =  this._height / this._plotDimensions.height;
            var resizeFactorX =  this._width / this._plotDimensions.width;
            this._plotDimensions.height = this._height;
            this._plotDimensions.width = this._width;
            this.grid._plotDimensions = this._plotDimensions;
            this.title._plotDimensions = this._plotDimensions;
            this.baseCanvas._plotDimensions = this._plotDimensions;
            this.eventCanvas._plotDimensions = this._plotDimensions;
            this.legend._plotDimensions = this._plotDimensions;
            
            for (var n in this.axes) {
                this.axes[n]._plotWidth = this._width;
                this.axes[n]._plotHeight = this._height;
            }
            
            this.title._plotWidth = this._width;
            
            if (this.textColor) {
                this.target.css('color', this.textColor);
            }
            if (this.fontFamily) {
                this.target.css('font-family', this.fontFamily);
            }
            if (this.fontSize) {
                this.target.css('font-size', this.fontSize);
            }
            
            this._sumy = 0;
            this._sumx = 0;
            for (var i=0; i<this.series.length; i++) {
                if(this.series[i]._type === 'bar')
                {
                    if( this.series[i].barDirection === "vertical")
                    {
                        this.series[i].barWidth =  this.series[i].barWidth * resizeFactorX;
                    }
                    else
                    {
                        this.series[i].barWidth =  this.series[i].barWidth * resizeFactorY;
                    }
                }
                this.populatePlotData(this.series[i], i);
                if (this.series[i]._type === 'line' && this.series[i].renderer.bands.show) {
                    this.series[i].renderer.initBands.call(this.series[i], this.series[i].renderer.options, this);
                }
                this.series[i]._plotDimensions = this._plotDimensions;
                this.series[i].canvas._plotDimensions = this._plotDimensions;
                this._sumy += this.series[i]._sumy;
                this._sumx += this.series[i]._sumx;
            }

            var name;
            
            for (var j=0; j<12; j++) {
                name = _axisNames[j];
                // Memory Leaks patch : clear ticks elements
                var t = this.axes[name]._ticks;
                for (var i = 0; i < t.length; i++) {
                  var el = t[i]._elem;
                  if (el) {
                    // if canvas renderer
                    if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                      window.G_vmlCanvasManager.uninitElement(el.get(0));
                      tiny.garbageCollect(el.get(0));
                    }
                    el.emptyForce();
                    el = null;
                    t._elem = null;
                  }
                }
                t = null;
                
                this.axes[name]._plotDimensions = this._plotDimensions;
                this.axes[name]._ticks = [];
            }
            
            if (this.sortData) {
                sortData(this.series);
            }
            
            this.grid._axes = this.axes;
            
            this.legend._series = this.series;
        };
        
        this.sortAllSeriesData = function()
        {
            if (this.sortData) {
                sortData(this.series);
            }
        }
        // sort the series data in increasing order.
        function sortData(series) {
            var d, sd, pd, ppd, ret;
            for (var i=0; i<series.length; i++) {
                var check;
                var bat = [series[i].data, series[i]._stackData, series[i]._plotData, series[i]._prevPlotData];
                for (var n=0; n<4; n++) {
                    check = true;
                    d = bat[n];
                    if (series[i]._stackAxis == 'x') {
                        for (var j = 0; j < d.length; j++) {
                            if (typeof(d[j][1]) != "number") {
                                check = false;
                                break;
                            }
                        }
                        if (check) {
                            d.sort(function(a,b) { return a[1] - b[1]; });
                        }
                    }
                    else {
                        for (var j = 0; j < d.length; j++) {
                            if (typeof(d[j][0]) != "number") {
                                check = false;
                                break;
                            }
                        }
                        if (check) {
                            d.sort(function(a,b) { return a[0] - b[0]; });
                        }
                    }
                }
               
            }
        }
        
        // populate the _stackData and _plotData arrays for the plot and the series.
        this.populatePlotData = function(series, index) {
            // if a stacked chart, compute the stacked data
            this._plotData = [];
            this._stackData = [];
            series._stackData = [];
            series._plotData = [];
            var plotValues = {x:[], y:[]};
            if (this.stackSeries && !series.disableStack) {
                series._stack = true;
                var sidx = series._stackAxis == 'x' ? 0 : 1;
                var idx = sidx ? 0 : 1;
                // push the current data into stackData
                var temp = $.extend(true, [], series.data);
                
                if (temp.length === 0)
                {
                    return;
                }
                
                // create the data that will be plotted for this series
                var plotdata = $.extend(true, [], series.data);
                // for first series, nothing to add to stackData.
                for (var j=0; j<index; j++) {
                    var cd = this.series[j].data;
                    if(temp.length<cd.length)
                    {
                        var tmpLen = cd.length - temp.length;
                        //changes for defect 9.
                        var count = temp.length;
                        for (var kk = 0;kk < tmpLen;kk++)
                        {
                            temp.push([0,count]);
                            plotdata.push([0,count]);
                            count++;
                        }
                    }
                    for (var k=0; k<cd.length; k++) {
                        temp[k][0] += cd[k][0];
                        temp[k][1] += cd[k][1];
                        // only need to sum up the stack axis column of data
                        plotdata[k][sidx] += cd[k][sidx];
                    }
                }
                for (var i=0; i<plotdata.length; i++) {
                    plotValues.x.push(plotdata[i][0]);
                    plotValues.y.push(plotdata[i][1]);
                }
                this._plotData.push(plotdata);
                this._stackData.push(temp);
                series._stackData = temp;
                series._plotData = plotdata;
                series._plotValues = plotValues;
                plotValues = null;
            }
            else {
                for (var i=0; i<series.data.length; i++) {
                    plotValues.x.push(series.data[i][0]);
                    plotValues.y.push(series.data[i][1]);
                }
                this._stackData.push(series.data);
                this.series[index]._stackData = series.data;
                this._plotData.push(series.data);
                series._plotData = series.data;
                series._plotValues = plotValues;
                 plotValues = null;
            }
            if (index>0) {
                series._prevPlotData = this.series[index-1]._plotData;
            }
            series._sumy = 0;
            series._sumx = 0;
            for (i=series.data.length-1; i>-1; i--) {
                series._sumy += series.data[i][1];
                series._sumx += series.data[i][0];
            }
            series = index = null;
        };
        
        // function to safely return colors from the color array and wrap around at the end.
        this.getNextSeriesColor = (function(t) {
            var idx = 0;
            var sc = t.seriesColors;
            
            return function () { 
                if (idx < sc.length) {
                    return sc[idx++];
                }
                else {
                    idx = 0;
                    return sc[idx++];
                }
            };
        })(this);
    
        this.parseOptions = function(options){
            for (var i=0; i<this.preParseOptionsHooks.hooks.length; i++) {
                this.preParseOptionsHooks.hooks[i].call(this, options);
            }
            for (var i=0; i<$.jqplot.preParseOptionsHooks.length; i++) {
                $.jqplot.preParseOptionsHooks[i].call(this, options);
            }
            this.options = $.extend(true, {}, this.defaults, options);
            var opts = this.options;
            this.animate = opts.animate;
            this.animateReplot = opts.animateReplot;
            this.stackSeries = opts.stackSeries;
            if ($.isPlainObject(opts.fillBetween)) {

                var temp = ['series1', 'series2', 'color', 'baseSeries', 'fill'], 
                    tempi;

                for (var i=0, l=temp.length; i<l; i++) {
                    tempi = temp[i];
                    if (opts.fillBetween[tempi] != null) {
                        this.fillBetween[tempi] = opts.fillBetween[tempi];
                    }
                }
            }

            if (opts.seriesColors) {
                this.seriesColors = opts.seriesColors;
            }
            else
            {
                var colorDefArray = [],colorDefGradArray = [];
                if (opts.islinechart && !opts.isareachart)
                {
                    // For line charts override default UCD colors
                    var color1 = '#CA3333',color2 = '#EA9E25',color3 = '#ACC666',color4 = '#61C44F',color5 = '#73BEE3',color6 = '#795EB5';
                    switch(this.data.length)
                    {
                        case 1:
                            colorDefArray = [color5];
                            break;
                        case 2:
                            colorDefArray = [color5,color2];
                            break;
                        case 3:
                            colorDefArray = [color5,color4,color1];
                            break;
                        case 4:
                            colorDefArray = [color5,color4,color2,color1];
                            break;
                        case 5:
                            colorDefArray = [color6,color5,color4,color2,color1];
                            break;
                        case 6:
                            colorDefArray = [color6,color5,color4,color3,color2,color1];
                            break;
                    }
                    colorDefGradArray = colorDefArray;
                }
                else if (opts.isbar)
                {
                    // For Horizontal and Vertical Barcharts override default UCD colors
                    var color1 = '#CA3333',color2 = '#CB6C33',color3 = '#EA9E25',color4 = '#E7CB52',color5 = '#ACC666',color6 = '#73BEE3';
                    var lcolor1 = '#F29D9D',lcolor2 = '#F3B996',lcolor3 = '#FCD9A2',lcolor4 = '#FEF5CE',lcolor5 = '#D6F692',lcolor6 = '#B1E0F4';
                    switch(this.data.length)
                    {
                        case 1:
                            colorDefArray = [color6];
                            colorDefGradArray = [lcolor6];
                            break;
                        case 2:
                            colorDefArray = [color1,color6];
                            colorDefGradArray = [lcolor1,lcolor6];
                            break;
                        case 3:
                            colorDefArray = [color1,color2,color6];
                            colorDefGradArray = [lcolor1,lcolor2,lcolor6];
                            break;
                        case 4:
                            colorDefArray = [color1,color2,color3,color6];
                            colorDefGradArray = [lcolor1,lcolor2,lcolor3,lcolor6];
                            break;
                        case 5:
                            colorDefArray = [color1,color2,color3,color5,color6];
                            colorDefGradArray = [lcolor1,lcolor2,lcolor3,lcolor5,lcolor6];
                            break;
                        case 6:
                            colorDefArray = [color1,color2,color3,color4,color5,color6];
                            colorDefGradArray = [lcolor1,lcolor2,lcolor3,lcolor4,lcolor5,lcolor6];
                            break;
                    }
                }
                else if (opts.isareachart)
                {
                    // For area charts override default UCD colors
                    var color1 = '#26ADAE',color2 = '#61C44F',color3 = '#E7CB52',color4 = '#ACC666',color5 = '#EA7825',color6 = '#73BEE3';
                    switch(this.data.length)
                    {
                        case 1:
                            colorDefArray = [color6];
                            break;
                        case 2:
                            colorDefArray = [color6,color5];
                            break;
                        case 3:
                            colorDefArray = [color6,color5,color4];
                            break;
                        case 4:
                            colorDefArray = [color6,color5,color4,color3];
                            break;
                        case 5:
                            colorDefArray = [color6,color5,color4,color3,color2];
                            break;
                        case 6:
                            colorDefArray = [color6,color5,color4,color3,color2,color1];
                            break;
                    }
                    colorDefGradArray = colorDefArray;
                }
                var colorlen = colorDefArray.length;
                for (var k=colorlen;k<$.jqplot.config.defaultColors.length;k++)
                {
                    colorDefArray.push($.jqplot.config.defaultColors[k]);
                }
                if (colorDefArray.length>0)
                {
                    this.seriesColors = colorDefArray;
                }
                if (colorDefGradArray.length>0)
                {
                    var colorlen = colorDefGradArray.length;
                    for (var k=colorlen;k<$.jqplot.config.defaultColors.length;k++)
                    {
                        colorDefGradArray.push($.jqplot.config.defaultColors[k]);
                    }
                    this.seriesDefGradColors = colorDefGradArray;
                }
            }
            if (opts.negativeSeriesColors) {
                this.negativeSeriesColors = opts.negativeSeriesColors;
            }
            if (opts.captureRightClick) {
                this.captureRightClick = opts.captureRightClick;
            }
            this.defaultAxisStart = (options && options.defaultAxisStart != null) ? options.defaultAxisStart : this.defaultAxisStart;
            this.colorGenerator.setColors(this.seriesColors);
            this.negativeColorGenerator.setColors(this.negativeSeriesColors);
            $.extend(true, this._gridPadding, opts.gridPadding);
            this.sortData = (opts.sortData != null) ? opts.sortData : this.sortData;
            for (var i=0; i<12; i++) {
                var n = _axisNames[i];
                var axis = this.axes[n];
                axis._options = $.extend(true, {}, opts.axesDefaults, opts.axes[n]);
                $.extend(true, axis, opts.axesDefaults, opts.axes[n]);
                axis._plotWidth = this._width;
                axis._plotHeight = this._height;
            }
                
            var normalizeData = function(data, dir, start) {
                // return data as an array of point arrays,
                // in form [[x1,y1...], [x2,y2...], ...]
                var temp = [];
                var i;
                dir = dir || 'vertical';
                if (!jQuery.isArray(data[0])) {
                    // we have a series of scalars.  One line with just y values.
                    // turn the scalar list of data into a data array of form: [[1, data[0]], [2, data[1]], ...]
                    for (i=0; i<data.length; i++) {
                        if (dir == 'vertical') {
                            temp.push([start + i, data[i]]);   
                        }
                        else {
                            temp.push([data[i], start+i]);
                        }
                    }
                }            
                else {
                    // we have a properly formatted data series, copy it.
                    $.extend(true, temp, data);
                }
                return temp;
            };

            var colorIndex = 0;
            for (var i=0; i<this.data.length; i++) {
                var temp = new Series(this.options.isBigData);
                for (var j=0; j<$.jqplot.preParseSeriesOptionsHooks.length; j++) {
                    $.jqplot.preParseSeriesOptionsHooks[j].call(temp, this.options.seriesDefaults, this.options.series[i]);
                }
                for (var j=0; j<this.preParseSeriesOptionsHooks.hooks.length; j++) {
                    this.preParseSeriesOptionsHooks.hooks[j].call(temp, this.options.seriesDefaults, this.options.series[i]);
                }
                $.extend(true, temp, {seriesColors:this.seriesColors, negativeSeriesColors:this.negativeSeriesColors}, this.options.seriesDefaults, this.options.series[i], {rendererOptions:{animation:{show: this.animate}}});
                var dir = 'vertical';
                if (temp.renderer === $.jqplot.BarRenderer && temp.rendererOptions && temp.rendererOptions.barDirection == 'horizontal' && temp.transposeData === true) {
                    dir = 'horizontal';
                }
                temp.data = normalizeData(this.data[i], dir, this.defaultAxisStart);
                switch (temp.xaxis) {
                    case 'xaxis':
                        temp._xaxis = this.axes.xaxis;
                        break;
                    case 'x2axis':
                        temp._xaxis = this.axes.x2axis;
                        break;
                    default:
                        break;
                }
                temp._yaxis = this.axes[temp.yaxis];
                temp._xaxis._series.push(temp);
                temp._yaxis._series.push(temp);
                if (temp.show) {
                    temp._xaxis.show = true;
                    temp._yaxis.show = true;
                }

                if (!temp.label) {
                    temp.label = 'Series '+ (i+1).toString();
                }
                this.series.push(temp);  
                for (var j=0; j<$.jqplot.postParseSeriesOptionsHooks.length; j++) {
                    $.jqplot.postParseSeriesOptionsHooks[j].call(this.series[i], this.options.seriesDefaults, this.options.series[i]);
                }
                for (var j=0; j<this.postParseSeriesOptionsHooks.hooks.length; j++) {
                    this.postParseSeriesOptionsHooks.hooks[j].call(this.series[i], this.options.seriesDefaults, this.options.series[i]);
                }
            }
            
            // copy the grid and title options into this object.
            $.extend(true, this.grid, this.options.grid);
            // if axis border properties aren't set, set default.
            for (var i=0; i<12; i++) {
                var n = _axisNames[i];
                var axis = this.axes[n];
                if (axis.borderWidth == null) {
                    axis.borderWidth =this.grid.borderWidth;
                }
            }
            
            if (typeof this.options.title == 'string') {
                this.title.text = this.options.title;
            }
            else if (typeof this.options.title == 'object') {
                $.extend(true, this.title, this.options.title);
            }
            this.title._plotWidth = this._width;
            this.legend.setOptions(this.options.legend);
            
            for (var i=0; i<$.jqplot.postParseOptionsHooks.length; i++) {
                $.jqplot.postParseOptionsHooks[i].call(this, options);
            }
            for (var i=0; i<this.postParseOptionsHooks.hooks.length; i++) {
                this.postParseOptionsHooks.hooks[i].call(this, options);
            }
            options = null;
            opts = null;
        };
        
        // method: destroy
        // Releases all resources occupied by the plot
        this.destroy = function() {
            this.freeOldObjects();
            this.clearLegendObjects();
            this.canvasManager.freeAllCanvases();
            if (this.eventCanvas && this.eventCanvas._elem) {
                this.eventCanvas._elem.unbind();
            }

            var ngElements = getAllElements(this.target, 'ng-scope');
           

              removeAllElements(this.target, ngElements);
        };

        this.dispose = function()
        {
                       
            for (var j=0; j<12; j++) {
            	
                name = _axisNames[j];
                // Memory Leaks patch : clear ticks elements
               
                if(this.axes[name]._ticks && this.axes[name]._ticks.length > 0)
                {
                     var t = this.axes[name]._ticks;
                      for (var i = 0; i < t.length; i++) {
                      var el = t[i]._elem;
                      if (el) {
                        // if canvas renderer
                        if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                          window.G_vmlCanvasManager.uninitElement(el.get(0));
                          el.empty();
                        }
                        el.emptyForce();
                        tiny.garbageCollect(el, true);
                        el = null;
                        t._elem = null;
                      }
                    }
                    t = null;
                }
                this.axes[name]._ticks = [];
                var axis = this.axes[name];
                
                if( axis._elem)
                {
                    var axisElemChildren = axis._elem.children();
                    for(var indx=0; indx < axisElemChildren.length; indx++)
                    {
                        tiny.garbageCollect(axisElemChildren[indx]);
                    }
                    axis._elem.emptyForce();
                }
                axis.destroy();
            }
            for (var i=0; i<this.series.length; i++) {
                this.series[i].destroy();
                tiny.disposeObject(this.series[i]);
            }
            this.destroy();
            this.grid.destroy();
            this.title.destroy();
            this._stackData = null;
            this._plotData = null;
            this.previousSeriesStack = null;
            if(this.plugins  && this.plugins.highlighter)
            {
                if(this.plugins.cursor)
                {
                    tiny.garbageCollect(this.plugins.cursor._tooltipElem, true);
                    this.plugins.cursor._tooltipElem = null;
                }
                if(this.plugins.F)
                {
                    this.plugins.highlighter.tips.remove();
                }
                if(this.plugins.highlighter.highlightCanvas)
                {
                     this.plugins.highlighter.highlightCanvas.resetCanvas();
                }
                if(this.plugins.highlighter._tooltipElem)
                {
                    tiny.garbageCollect(this.plugins.highlighter._tooltipElem, true);
                    this.plugins.highlighter._tooltipElem = null;
                }
                if(this.plugins.barRenderer)
                {
                    this.plugins.barRenderer.highlightCanvas.resetCanvas();
                    this.plugins.barRenderer.highlightCanvas = null;
                }
            }
            if (this.eventCanvas && this.eventCanvas._elem) 
            {
                this.eventCanvas._elem.unbind();
                this.eventCanvas.resetCanvas();
                this.eventCanvas = null;
            }
        }

        function getAllElements(parentElem, className)
        {
        	return parentElem.children().not('[class="'+className+'"]');
        }
        function removeAllElements(parentElem, elements)
        {
            elements.empty();
            tiny.garbageCollect(elements, true);
    		elements.remove();
        }
        // method: replot
        // Does a reinitialization of the plot followed by
        // a redraw.  Method could be used to interactively
        // change plot characteristics and then replot.
        //
        // Parameters:
        // options - Options used for replotting.
        //
        // Properties:
        // clear - false to not clear (empty) the plot container before replotting (default: true).
        // resetAxes - true to reset all axes min, max, numberTicks and tickInterval setting so axes will rescale themselves.
        //             optionally pass in list of axes to reset (e.g. ['xaxis', 'y2axis']) (default: false).
        this.replot = function(options) {		
            var opts =  options || {};
            var clear = (opts.clear === false) ? false : true;
            var resetAxes = opts.resetAxes || false;
            this.target.trigger('jqplotPreReplot');
            
            if (clear) {
                this.destroy();
            }
            this.reInitialize();
            if (resetAxes) {
                this.resetAxesScale(resetAxes, opts.axes);
            }			
            this.draw();
            this.target.trigger('jqplotPostReplot');
        };
        
        // method: redraw
        // Empties the plot target div and redraws the plot.
        // This enables plot data and properties to be changed
        // and then to comletely clear the plot and redraw.
        // redraw *will not* reinitialize any plot elements.
        // That is, axes will not be autoscaled and defaults
        // will not be reapplied to any plot elements.  redraw
        // is used primarily with zooming. 
        //
        // Parameters:
        // clear - false to not clear (empty) the plot container before redrawing (default: true).
        this.redraw = function(clear) {
            clear = (clear != null) ? clear : true;
            this.target.trigger('jqplotPreRedraw');
            if (clear) {
                this.canvasManager.freeAllCanvases();
                this.eventCanvas._elem.unbind();
                // Dont think I bind any events to the target, this shouldn't be necessary.
                // It will remove user's events.
                tiny.garbageCollect(this.target, true);
                this.target.empty();
            }
             for (var ax in this.axes) {
                this.axes[ax]._ticks = [];
            }
            for (var i=0; i<this.series.length; i++) {
                this.populatePlotData(this.series[i], i);
            }
            this._sumy = 0;
            this._sumx = 0;
            for (i=0; i<this.series.length; i++) {
                this._sumy += this.series[i]._sumy;
                this._sumx += this.series[i]._sumx;
            }
            this.draw();
            this.target.trigger('jqplotPostRedraw');
        };
        
        this.destroyAxisTicks = function(axis)
        {
            var tick;
            var t;
            t = axis._ticks;
                for (var i=0; i < t.length; i++)
                {
                     tick = t[i];
                     axis._ticks = null;
                     if(tick._elem)
                     {
                         if(tick.constructor === $.jqplot.CanvasAxisTickRenderer)
                         {
                             tick._elem[0].className = "";
                            tick._elem[0].removeAttribute("width");
                            tick._elem[0].removeAttribute("height");
                            tick._elem[0].removeAttribute("index");
                            tick._elem[0].removeAttribute("numberticks");
                            tick._elem[0].removeAttribute("style");
                            tick._elem[0].removeAttribute("class");
                            tick._elem[0].width = 0;
                            tick._elem[0].height = 0;
                             if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) 
                             {
                                window.G_vmlCanvasManager.uninitElement(tick._elem[0]);
                             }
                             if(tick._elem[0].idx)
                             {
                                 this.canvasManager.freeCanvas(tick._elem[0].idx);
                             }
                             if(tick.canvasIdx)
                             {
                                 this.canvasManager.freeCanvas(tick.canvasIdx);
                             }
                             tick._elem[0].idx
                             tick.destroy();
                         }
                         tick = null;
                         t[i] = null;
                     }
                }
                t = null;
                axis._ticks = [];
                axis.__ticks = [];                
        };
        
        this.createAxisTicks = function(axis, resetTicks)
        {
            var tick;
            var t;
            if(resetTicks)
            {
                  t = axis._ticks;
                for (var i=0; i < t.length; i++)
                {
                     tick = t[i];
                     axis._ticks = null;
                     if(tick._elem)
                     {
                         if(tick.constructor === $.jqplot.CanvasAxisTickRenderer)
                         {
                             tick._elem[0].className = "";
                            tick._elem[0].removeAttribute("width");
                            tick._elem[0].removeAttribute("height");
                            tick._elem[0].removeAttribute("index");
                            tick._elem[0].removeAttribute("numberticks");
                            tick._elem[0].removeAttribute("style");
                            tick._elem[0].removeAttribute("class");
                            tick._elem[0].width = 0;
                            tick._elem[0].height = 0;
                             if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) 
                             {
                                window.G_vmlCanvasManager.uninitElement(tick._elem[0]);
                             }
                             if(tick._elem[0].idx)
                             {
                                 this.canvasManager.freeCanvas(tick._elem[0].idx);
                             }
                             if(tick.canvasIdx)
                             {
                                 this.canvasManager.freeCanvas(tick.canvasIdx);
                             }
                             tick.destroy();
                         }
                         tick = null;
                         t[i] = null;
                     }
                }
                t = null;
                axis._ticks = [];
                axis.__ticks = [];
            }
            axis.createOnlyTicks(this);
          
            t = axis._ticks;

            // Remove all before add. If not, Memory leak 
            if (axis._elem)
            {
                var axisElemChildren = axis._elem.children();
                for(var indx=0; indx < axisElemChildren.length; indx++)
                {
                   tiny.garbageCollect(axisElemChildren[indx]);
                }
                axis._elem.emptyForce();
            }
            var tickIndex = 0,totalTicks = 0;
            for (var i=0; i < t.length; i++)
            {
                tick = t[i];
                if (tick.show && tick.showLabel && (!tick.isMinorTick || axis.showMinorTicks))
                {
                    totalTicks++;
                }
            }
            if (axis._elem)
            {
				var hidSpan = document.createElement('span');
			  $(hidSpan).css({visibility:'hidden','white-space':'nowrap','font-size':'10px'});
			  $(document.body).append(hidSpan); 			
                for (var i=0; i < t.length; i++)
                {
                    tick = t[i];
                    if (tick.show && tick.showLabel && (!tick.isMinorTick || axis.showMinorTicks))
                    {
                        axis._elem.append(tick.draw(this.baseCanvas._ctx, this,tickIndex++,totalTicks,hidSpan));
                    }
                }
				tiny.garbageCollect(hidSpan);
				hidSpan = null;
            }
            if (this.options.ishorizontalbar && axis._elem)
            {
                var name = axis.name;
                axis._elem.find('.jqplot-'+name+'-tick').each(function(ind,elmm)
                {
                    if (parseInt(elmm.scrollWidth) > parseInt(elmm.clientWidth))
                    {
                        $(elmm).attr('title',$(elmm).text());
                    }
                }
                );
            }
            tick = null;
            t = null;
        };
        this.packAllAxes = function(plot)
        {
            var ax = this.axes;
            ax.xaxis.pack({position:'absolute', bottom:this._gridPadding.bottom - ax.xaxis.getHeight(), left:0, width:this._width}, {min:this._gridPadding.left, max:this._width - this._gridPadding.right});
            ax.yaxis.pack({position:'absolute', top:0, left:this._gridPadding.left - ax.yaxis.getWidth(), height:this._height}, {min:this._height - this._gridPadding.bottom, max: this._gridPadding.top}, plot);
            if(ax.x2axis.show)
            {
                ax.x2axis.pack({position:'absolute', top:this._gridPadding.top - ax.x2axis.getHeight(), left:0, width:this._width}, {min:this._gridPadding.left, max:this._width - this._gridPadding.right});
            }
            var ra = ['y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis'];
            var rapad = [0, 0, 0, 0, 0, 0, 0, 0];
            var gpr = 0;
            var n;
            for (n=0; n<8; n++)
            {
                if (ax[ra[n]].show)
                {
                    gpr += ax[ra[n]].getWidth();
                    rapad[n] = gpr;
                }
            }
            for (i=8; i>0; i--)
            {
                ax[ra[i-1]].pack({position:'absolute', top:0, right:this._gridPadding.right - rapad[i-1]}, {min:this._height - this._gridPadding.bottom, max: this._gridPadding.top}, plot);
            }
        };
        // method: draw
        // Draws all elements of the plot into the container.
        // Does not clear the container before drawing.
        this.draw = function(){
            if (this.drawIfHidden || this.target.is(':visible')) {
                this.target.trigger('jqplotPreDraw');
                var i,
                    j,
                    l,
                    tempseries;
                for (i=0, l=$.jqplot.preDrawHooks.length; i<l; i++) {
                    $.jqplot.preDrawHooks[i].call(this);
                }
                for (i=0, l=this.preDrawHooks.length; i<l; i++) {
                    this.preDrawHooks.hooks[i].apply(this, this.preDrawSeriesHooks.args[i]);
                }
                // create an underlying canvas to be used for special features.
                this.target.append(this.baseCanvas.createElement({left:0, right:0, top:0, bottom:0}, 'jqplot-base-canvas', null, this));
                this.baseCanvas.setContext();
                this.target.append(this.title.draw(null, this));
                
                
                this.title.pack({top:0, left:0});
                // make room  for the legend between the grid and the edge.
                var legendElem = this.legend.draw({},this);//offset,plot
                
                var gridPadding = {top:0, left:0, bottom:0, right:0};
                
                if (this.legend.placement == "outsideGrid") {
                    // temporarily append the legend to get dimensions
                    this.target.append(legendElem);
                    switch (this.legend.location) {
                        case 'n':
                            gridPadding.top += this.legend.getHeight();
                            break;
                        case 's':
                        case 'c':
                            gridPadding.bottom += this.legend.getHeight();
                            break;
                        case 'ne':
                        case 'e':
                        case 'se':
                            gridPadding.right += this.legend.getWidth();
                            break;
                        case 'nw':
                        case 'w':
                        case 'sw':
                            gridPadding.left += this.legend.getWidth();
                            break;
                        default:  // same as 'ne'
                            gridPadding.right += this.legend.getWidth();
                            break;
                    }                     
                    if(legendElem)
                    {
                        var legactwidth = legendElem.outerWidth(true);
                        if (legactwidth > this._plotDimensions.width)
                        {
                            legendElem.css('width',this._plotDimensions.width+'px');
                        }
                        legendElem = legendElem.detach();
                    }
                }
                
                var ax = this.axes;
                var name;
                // draw the yMidAxis first, so xaxis of pyramid chart can adjust itself if needed.
                for (i=0; i<12; i++) {
                    name = _axisNames[i];
                    this.target.append(ax[name].draw(this.baseCanvas._ctx, this));
                    if (this.options.ishorizontalbar && ax[name]._elem)
                    {
                        ax[name]._elem.find('.jqplot-'+name+'-tick').each(function(ind,elmm)
                        {
                            if (parseInt(elmm.scrollWidth) > parseInt(elmm.clientWidth))
                            {
                                $(elmm).attr('title',$(elmm).text());
                            }
                        }
                        );
                    }
                    ax[name].set();
                }
                if (ax.yaxis.show) {
                    gridPadding.left += ax.yaxis.getWidth();
                }
                var ra = ['y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis'];
                var rapad = [0, 0, 0, 0, 0, 0, 0, 0];
                var gpr = 0;
                var n;
                for (n=0; n<8; n++) {
                    if (ax[ra[n]].show) {
                        gpr += ax[ra[n]].getWidth();
                        rapad[n] = gpr;
                    }
                }
                gridPadding.right += gpr;
                if (ax.x2axis.show) {
                    gridPadding.top += ax.x2axis.getHeight();
                }
                if (this.title.show) {
                    gridPadding.top += this.title.getHeight();
                }
                if (ax.xaxis.show) {
                    gridPadding.bottom += ax.xaxis.getHeight();
                }
                
                // end of gridPadding adjustments.

                // if user passed in gridDimensions option, check against calculated gridPadding
                if (this.options.gridDimensions && $.isPlainObject(this.options.gridDimensions)) {
                    var gdw = parseInt(this.options.gridDimensions.width, 10) || 0;
                    var gdh = parseInt(this.options.gridDimensions.height, 10) || 0;
                    var widthAdj = (this._width - gridPadding.left - gridPadding.right - gdw)/2;
                    var heightAdj = (this._height - gridPadding.top - gridPadding.bottom - gdh)/2;

                    if (heightAdj >= 0 && widthAdj >= 0) {
                        gridPadding.top += heightAdj;
                        gridPadding.bottom += heightAdj;
                        gridPadding.left += widthAdj;
                        gridPadding.right += widthAdj;
                    }
                }
                var arr = ['top', 'bottom', 'left', 'right'];
                for (var n in arr) {
                    if (this._gridPadding[arr[n]] == null && gridPadding[arr[n]] > 0) {
                        this._gridPadding[arr[n]] = gridPadding[arr[n]];
                    }
                    else if (this._gridPadding[arr[n]] == null) {
                        this._gridPadding[arr[n]] = this._defaultGridPadding[arr[n]];
                    }
                }
                
                var legendPadding = (this.legend.placement == 'outsideGrid') ? {top:this.title.getHeight(), left: 0, right: 0, bottom: 0} : this._gridPadding;
            
                ax.xaxis.pack({position:'absolute', bottom:this._gridPadding.bottom - ax.xaxis.getHeight(), left:0, width:this._width}, {min:this._gridPadding.left, max:this._width - this._gridPadding.right});
                ax.yaxis.pack({position:'absolute', top:0, left:this._gridPadding.left - ax.yaxis.getWidth(), height:this._height}, {min:this._height - this._gridPadding.bottom, max: this._gridPadding.top}, this);
                if(ax.x2axis.show)
                {
                    ax.x2axis.pack({position:'absolute', top:this._gridPadding.top - ax.x2axis.getHeight(), left:0, width:this._width}, {min:this._gridPadding.left, max:this._width - this._gridPadding.right});
                }
                for (i=8; i>0; i--) {
                    ax[ra[i-1]].pack({position:'absolute', top:0, right:this._gridPadding.right - rapad[i-1]}, {min:this._height - this._gridPadding.bottom, max: this._gridPadding.top}, this);
                }
                var ltemp = (this._width - this._gridPadding.left - this._gridPadding.right)/2.0 + this._gridPadding.left - ax.yMidAxis.getWidth()/2.0;
                ax.yMidAxis.pack({position:'absolute', top:0, left:ltemp, zIndex:9, textAlign: 'center'}, {min:this._height - this._gridPadding.bottom, max: this._gridPadding.top});
            
                if(this.grid._elem)
                {
                    this.grid._elem = null;
                }

                this.target.append(this.grid.createElement(this._gridPadding, this));
				var seriesLength = this.series.length;
                // put the shadow canvases behind the series canvases so shadows don't overlap on stacked bars.
                for (var sCount=0, l=seriesLength; sCount<l; sCount++) {
                    // draw series in order of stacking.  This affects only
                    // order in which canvases are added to dom.
                    var sIndex = this.seriesStack[sCount];
					if(this.series[sIndex]._type ==='bar' && this.series[sIndex].barDirection=== 'horizontal')
					{
					this.grid.tinyHGrid = true;
					break;
					}
					}
                this.grid.draw();
                
                var series = this.series;
                var seriesLength = series.length;
                // put the shadow canvases behind the series canvases so shadows don't overlap on stacked bars.
                for (i=0, l=seriesLength; i<l; i++) {
                    // draw series in order of stacking.  This affects only
                    // order in which canvases are added to dom.
                    j = this.seriesStack[i];
                    if(!series[j].isBigData)
                    {
                        this.target.append(series[j].shadowCanvas.createElement(this._gridPadding, 'jqplot-series-shadowCanvas', null, this));
                        series[j].shadowCanvas.setContext();
                        series[j].shadowCanvas._elem.data('seriesIndex', j);
                    }
                }
                
                for (i=0, l=seriesLength; i<l; i++) {
                    // draw series in order of stacking.  This affects only
                    // order in which canvases are added to dom.
                    j = this.seriesStack[i];
                    this.target.append(series[j].canvas.createElement(this._gridPadding, 'jqplot-series-canvas', null, this));
                    series[j].canvas.setContext();
                    series[j].canvas._elem.data('seriesIndex', j);
                }
                // Need to use filled canvas to capture events in IE.
                // Also, canvas seems to block selection of other elements in document on FF.
                this.target.append(this.eventCanvas.createElement(this._gridPadding, 'jqplot-event-canvas', null, this));
                this.eventCanvas.setContext();
                this.eventCanvas._ctx.fillStyle = 'rgba(0,0,0,0)';
                this.eventCanvas._ctx.fillRect(0,0,this.eventCanvas._ctx.canvas.width, this.eventCanvas._ctx.canvas.height);
            
                // bind custom event handlers to regular events.
                this.bindCustomEvents();
            
                // draw legend before series if the series needs to know the legend dimensions.
                if (this.legend.preDraw) {  
                    this.eventCanvas._elem.before(legendElem);
                    this.legend.pack(legendPadding);
                    if (this.legend._elem) {
                        this.drawSeries({legendInfo:{location:this.legend.location, placement:this.legend.placement, width:this.legend.getWidth(), height:this.legend.getHeight(), xoffset:this.legend.xoffset, yoffset:this.legend.yoffset}});
                    }
                    else {
                        this.drawSeries();
                    }
                }
                else {  // draw series before legend
                    this.drawSeries();
                    if (seriesLength) {
                        $(series[seriesLength-1].canvas._elem).after(legendElem);
                        if(!series[seriesLength-1].canvas._elem) 
                        {
                            console.log(" ===== Error Series canvas doesnt exist ");
                            if(this.eventCanvas && this.eventCanvas._elem)
                            {
                                this.eventCanvas._elem.before(legendElem);                       
                            }
                        }
                    }
                    this.legend.pack(legendPadding);                
                }
            
                // register event listeners on the overlay canvas
                for (var i=0, l=$.jqplot.eventListenerHooks.length; i<l; i++) {
                    // in the handler, this will refer to the eventCanvas dom element.
                    // make sure there are references back into plot objects.
                    this.eventCanvas._elem.bind($.jqplot.eventListenerHooks[i][0], {plot:this}, $.jqplot.eventListenerHooks[i][1]);
                }
            
                // register event listeners on the overlay canvas
                for (var i=0, l=this.eventListenerHooks.hooks.length; i<l; i++) {
                    // in the handler, this will refer to the eventCanvas dom element.
                    // make sure there are references back into plot objects.
                    this.eventCanvas._elem.bind(this.eventListenerHooks.hooks[i][0], {plot:this}, this.eventListenerHooks.hooks[i][1]);
                }

                var fb = this.fillBetween;
                if (fb.fill && fb.series1 !== fb.series2 && fb.series1 < seriesLength && fb.series2 < seriesLength && series[fb.series1]._type === 'line' && series[fb.series2]._type === 'line') {
                    this.doFillBetweenLines();
                }

                for (var i=0, l=$.jqplot.postDrawHooks.length; i<l; i++) {
                    $.jqplot.postDrawHooks[i].call(this);
                }

                for (var i=0, l=this.postDrawHooks.hooks.length; i<l; i++) {
                    this.postDrawHooks.hooks[i].apply(this, this.postDrawHooks.args[i]);
                }
            
                if (this.target.is(':visible')) {
                    this._drawCount += 1;
                }

                var temps, 
                    tempr,
                    sel,
                    _els;
					
								
					if(this.options.isBarchart  )
						{
						
						if(!this.options.adjustCanvasWidth)
						{
						this.options.adjustCanvasWidth = true;
						for (var j=0, l=seriesLength; j<l; j++) {
							series[j].canvas._elem.hide(); 
							}			
							var margin=0;							
							var ptsCnt = series[0]._barPoints.length - 1;
                            if (ptsCnt>=0)
                            {
                            }
							if(margin>20)
							{
								var wDiff = 0;
								this.target.trigger('jqplotRedraw', [this,parseFloat(this.target.css('width'))-wDiff]);
								
							}
							
							 for (var j=0, l=seriesLength; j<l; j++) {
							series[j].canvas._elem.show(); 
							}
							
							// ughh.  ideally would hide all series then show them.
							for (var j=0, l=seriesLength; j<l; j++) {
								temps = series[j];
								tempr = temps.renderer;
								sel = '.jqplot-point-label.jqplot-series-'+j;
								
									if(this.options.isBarchart && this.options.animate)
									{		
                                        // fixed for 55
                                        _els = this.target.find(sel);
                                        _els.stop(true, true).hide();
										var left = parseInt(temps.canvas._elem.css('left'))+3;								  
										var girdLoc = temps.gridData;
                                        if (girdLoc.length === 0)
                                        {
                                            continue;
                                        }
										var width = 20;//minwidth for grid when only one bar is present
                                        if (girdLoc[1])
                                        {
                                            width = parseInt(girdLoc[1][0]-girdLoc[0][0]);
                                        }
                                        
										var divList=[];
										for(var j=0;j<girdLoc.length;j++)
										{
											wrapper = $( "<div id=tinyWrap"+j+" ></div>" ) .addClass( "ui-effects-wrapper1" );
											divList.push(wrapper);
											left = left+width;
                                            wrapper.css( {'left':left+'px','width' :width+'px', 'height':temps.canvas._elem.css('height'),
                                               'top':temps.canvas._elem.css('top'), 'position':'absolute','background-color':'white'  });
											temps.canvas._elem.parent().append(wrapper);
										}
										 this.animationBar(divList,0);										   
									}																	
							}
							this.options.adjustCanvasWidth = true;
							}
						}
						else
						{
						// ughh.  ideally would hide all series then show them.
						for (i=0, l=seriesLength; i<l; i++) {
							temps = series[i];
							tempr = temps.renderer;
							sel = '.jqplot-point-label.jqplot-series-'+i;
							if (tempr.animation && tempr.animation._supported && tempr.animation.show && (this._drawCount < 2 || this.animateReplot)) {
								_els = this.target.find(sel);
								_els.stop(true, true).hide();
								
									temps.canvas._elem.stop(true, true).hide();                       
									temps.canvas._elem.jqplotEffect('blind', {mode: 'show', direction: tempr.animation.direction}, tempr.animation.speed);
                                    if(!temps.isBigData)
                                    {
									    temps.shadowCanvas._elem.stop(true, true).hide();
								    	temps.shadowCanvas._elem.jqplotEffect('blind', {mode: 'show', direction: tempr.animation.direction}, tempr.animation.speed);
                                    }
									_els.fadeIn(tempr.animation.speed*0.8);								
							}
						}
				}
                _els = null;
            
                this.target.trigger('jqplotPostDraw', [this]);
            }
	    
        };

		this.animationBar = function(divList,i)
        {
			var jqplot = this;
			animation = [];
			animation['height']='0';
			if(divList.length>i)
			{			
				divList[i].animate(animation , {
				duration: 500,
				easing: 'swing',
				queue: false,
				step: function(a,b,c,d) {
				if((b.startTime+25)<=new Date() && !b.elem.tinyFinsih)
				{			
					 i++;
					 jqplot.animationBar(divList,i); 
					 b.elem.tinyFinsih = true;				
				}
				},
				complete: function() {
				if(divList.length==i)
				{
					if(jqplot.options.drawGridAfterAnimate)
					{
						jqplot.target.trigger('jqplotAnimateFinish', [jqplot]);
					}
				}
				}
			}); 
			}
        }	
		
        jqPlot.prototype.doFillBetweenLines = function () {
            var fb = this.fillBetween;
            var sid1 = fb.series1;
            var sid2 = fb.series2;
            // first series should always be lowest index
            var id1 = (sid1 < sid2) ? sid1 : sid2;
            var id2 = (sid2 >  sid1) ? sid2 : sid1;

            var series1 = this.series[id1];
            var series2 = this.series[id2];

            if (series2.renderer.smooth) {
                var tempgd = series2.renderer._smoothedData.slice(0).reverse();
            }
            else {
                var tempgd = series2.gridData.slice(0).reverse();
            }

            if (series1.renderer.smooth) {
                var gd = series1.renderer._smoothedData.concat(tempgd);
            }
            else {
                var gd = series1.gridData.concat(tempgd);
            }

            var color = (fb.color !== null) ? fb.color : this.series[sid1].fillColor;
            var baseSeries = (fb.baseSeries !== null) ? fb.baseSeries : id1;

            // now apply a fill to the shape on the lower series shadow canvas,
            // so it is behind both series.
            var sr = this.series[baseSeries].renderer.shapeRenderer;
            var opts = {fillStyle: color, fill: true, closePath: true};
            if(!series1.isBigData)
            {
                sr.draw(series1.shadowCanvas._ctx, gd, opts);
            }
        };
        
        this.bindCustomEvents = function() {
            this.eventCanvas._elem.bind('click', {plot:this}, this.onClick);
            this.eventCanvas._elem.bind('dblclick', {plot:this}, this.onDblClick);
            this.eventCanvas._elem.bind('mousedown', {plot:this}, this.onMouseDown);
            this.eventCanvas._elem.bind('mousemove', {plot:this}, this.onMouseMove);
            this.eventCanvas._elem.bind('mouseenter', {plot:this}, this.onMouseEnter);
            this.eventCanvas._elem.bind('mouseleave', {plot:this}, this.onMouseLeave);
            if (this.captureRightClick) {
                this.eventCanvas._elem.bind('mouseup', {plot:this}, this.onRightClick);
                this.eventCanvas._elem.get(0).oncontextmenu = function() {
                    return false;
                };
            }
            else {
                this.eventCanvas._elem.bind('mouseup', {plot:this}, this.onMouseUp);
            }
        };
        
        function getEventPosition(ev) {
            var plot = ev.data.plot;
            var go = plot.eventCanvas._elem.offset();
            var gridPos = {x:ev.pageX - go.left, y:ev.pageY - go.top};
            var dataPos = {xaxis:null, yaxis:null, x2axis:null, y2axis:null, y3axis:null, y4axis:null, y5axis:null, y6axis:null, y7axis:null, y8axis:null, y9axis:null, yMidAxis:null};
            var an = ['xaxis', 'yaxis', 'x2axis', 'y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];
            var ax = plot.axes;
            var n, axis;
            for (n=11; n>0; n--) {
                axis = an[n-1];
                if (ax[axis].show) {
                    dataPos[axis] = ax[axis].series_p2u(gridPos[axis.charAt(0)]);
                }
            }

            return {offsets:go, gridPos:gridPos, dataPos:dataPos};
        }
        
        this.customCheckIntersection = function(gridpos, plot)
        {
            return checkIntersection(gridpos, plot);
        };
        // function to check if event location is over a area area
        function checkIntersection(gridpos, plot) {
            var series = plot.series;
            var i, j, k, s, r, x, y, theta, sm, sa, minang, maxang;
            var d0, d, p, pp, points, bw;
            var threshold, t;
            for (k=plot.seriesStack.length-1; k>=0; k--) {
                i = plot.seriesStack[k];
                s = series[i];
                switch (s.renderer.constructor) {
                    case $.jqplot.BarRenderer:
                    case $.jqplot.PyramidRenderer:
                        x = gridpos.x;
                        y = gridpos.y;
                        for (j=0; j<s._barPoints.length; j++) {
                            points = s._barPoints[j];
                            p = s.gridData[j];
                            if (x>points[0][0] && x<points[2][0] && y>points[2][1] && y<points[0][1]) {
                                var ret = {seriesIndex:s.index, pointIndex:j, gridData:p, data:s.data[j], points:s._barPoints[j]};
                                series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                p = pp = points = bw = threshold = t = null;
                                return ret;
                            }
                        }
                        break;
                   case $.jqplot.MeterGaugeRenderer:
                        x = gridpos.x;
                        y = gridpos.y;
                        p = s.gridData[1];
                        if (s.seriesPoints) {
                            for ( j = 0; j < s.seriesPoints.length; j++) {
                                if (x > 0 && x < s.seriesPoints[0] && y > s.drawY && y < s.drawY + 22) {
                                    var ret = {
                                        seriesIndex : s.index,
                                        pointIndex : 0,
                                        gridData : p,
                                        data : s.data[j],
                                        points : 0
                                    };
                                    series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                    p = pp = points = bw = threshold = t = null;
                                    return ret;
                                }

                                if (x > s.seriesPoints[j] && x < s.seriesPoints[j + 1] && y > s.drawY && y < s.drawY + 22) {
                                    var ret = {
                                        seriesIndex : s.index,
                                        pointIndex : (j + 1),
                                        gridData : p,
                                        data : s.data[j],
                                        points : s.seriesPoints[j]
                                    };
                                    series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                    p = pp = points = bw = threshold = t = null;
                                    return ret;
                                }
                            }
                        }
                        break;
                    
                    case $.jqplot.DonutRenderer:
                        sa = s.startAngle/180*Math.PI;
                        x = gridpos.x - s._center[0];
                        y = gridpos.y - s._center[1];
                        r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
                        if (x > 0 && -y >= 0) {
                            theta = 2*Math.PI - Math.atan(-y/x);
                        }
                        else if (x > 0 && -y < 0) {
                            theta = -Math.atan(-y/x);
                        }
                        else if (x < 0) {
                            theta = Math.PI - Math.atan(-y/x);
                        }
                        else if (x == 0 && -y > 0) {
                            theta = 3*Math.PI/2;
                        }
                        else if (x == 0 && -y < 0) {
                            theta = Math.PI/2;
                        }
                        else if (x == 0 && y == 0) {
                            theta = 0;
                        }
                        if (sa) {
                            theta -= sa;
                            if (theta < 0) {
                                theta += 2*Math.PI;
                            }
                            else if (theta > 2*Math.PI) {
                                theta -= 2*Math.PI;
                            }
                        }
            
                        sm = s.sliceMargin/180*Math.PI;
                        if (r < s._radius && r > s._innerRadius) {
                            for (j=0; j<s.gridData.length; j++) {
                                minang = (j>0) ? s.gridData[j-1][1]+sm : sm;
                                maxang = s.gridData[j][1];
                                if (theta > minang && theta < maxang) {
                                    var ret =  {seriesIndex:s.index, pointIndex:j, gridData:s.gridData[j], data:s.data[j]};
                                    series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                    p = pp = points = bw = threshold = t = null;
                                    return ret;
                                }
                            }
                        }
                        break;
                        
                    case $.jqplot.PieRenderer:
                        sa = s.startAngle/180*Math.PI;
                        x = gridpos.x - s._center[0];
                        y = gridpos.y - s._center[1];
                        r = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
                        if (x > 0 && -y >= 0) {
                            theta = 2*Math.PI - Math.atan(-y/x);
                        }
                        else if (x > 0 && -y < 0) {
                            theta = -Math.atan(-y/x);
                        }
                        else if (x < 0) {
                            theta = Math.PI - Math.atan(-y/x);
                        }
                        else if (x == 0 && -y > 0) {
                            theta = 3*Math.PI/2;
                        }
                        else if (x == 0 && -y < 0) {
                            theta = Math.PI/2;
                        }
                        else if (x == 0 && y == 0) {
                            theta = 0;
                        }
                        if (sa) {
                            theta -= sa;
                            if (theta < 0) {
                                theta += 2*Math.PI;
                            }
                            else if (theta > 2*Math.PI) {
                                theta -= 2*Math.PI;
                            }
                        }
            
                        sm = s.sliceMargin/180*Math.PI;
                        if (r < s._radius) {
                            for (j=0; j<s.gridData.length; j++) {
                                minang = (j>0) ? s.gridData[j-1][1]+sm : sm;
                                maxang = s.gridData[j][1];
                                if (theta > minang && theta < maxang) {
                                    return {seriesIndex:s.index, pointIndex:j, gridData:s.gridData[j], data:s.data[j]};
                                }
                            }
                        }
                        break;
                        
                    case $.jqplot.BubbleRenderer:
                        x = gridpos.x;
                        y = gridpos.y;
                        var ret = null;
                        
                        if (s.show) {
                            for (var j=0; j<s.gridData.length; j++) {
                                p = s.gridData[j];
                                d = Math.sqrt( (x-p[0]) * (x-p[0]) + (y-p[1]) * (y-p[1]) );
                                if (d <= p[2] && (d <= d0 || d0 == null)) {
                                   d0 = d;
                                   ret = {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};
                                }
                            }
                            if (ret != null) {
                                    series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                    p = pp = points = bw = threshold = t = null;
                                return ret;
                            }
                        }
                        break;
                        
                    case $.jqplot.FunnelRenderer:
                        x = gridpos.x;
                        y = gridpos.y;
                        var v = s._vertices,
                            vfirst = v[0],
                            vlast = v[v.length-1],
                            lex,
                            rex,
                            cv;
    
                        // equations of right and left sides, returns x, y values given height of section (y value and 2 points)
    
                        function findedge (l, p1 , p2) {
                            var m = (p1[1] - p2[1])/(p1[0] - p2[0]);
                            var b = p1[1] - m*p1[0];
                            var y = l + p1[1];
        
                            return [(y - b)/m, y];
                        }
    
                        // check each section
                        lex = findedge(y, vfirst[0], vlast[3]);
                        rex = findedge(y, vfirst[1], vlast[2]);
                        for (j=0; j<v.length; j++) {
                            cv = v[j];
                            if (y >= cv[0][1] && y <= cv[3][1] && x >= lex[0] && x <= rex[0]) {
                                var ret =  {seriesIndex:s.index, pointIndex:j, gridData:null, data:s.data[j]};
                                    series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                    p = pp = points = bw = threshold = t = null;
                                    return ret;
                            }
                        }         
                        break;           
                    
                    case $.jqplot.LineRenderer:
                        x = gridpos.x;
                        y = gridpos.y;
                        r = s.renderer;
                        if (s.show && s.showHighlight) {
                            if ((s.fill || (s.renderer.bands.show && s.renderer.bands.fill)) && (!plot.plugins.highlighter || !plot.plugins.highlighter.show)) {
                                // first check if it is in bounding box
                                var inside = false;
                                if (x>s._boundingBox[0][0] && x<s._boundingBox[1][0] && y>s._boundingBox[1][1] && y<s._boundingBox[0][1]) { 
                                    // now check the crossing number   
                                    
                                    var numPoints = s._areaPoints.length;
                                    var ii;
                                    var j = numPoints-1;

                                    for(var ii=0; ii < numPoints; ii++) { 
                                        var vertex1 = [s._areaPoints[ii][0], s._areaPoints[ii][1]];
                                        var vertex2 = [s._areaPoints[j][0], s._areaPoints[j][1]];

                                        if (vertex1[1] < y && vertex2[1] >= y || vertex2[1] < y && vertex1[1] >= y)     {
                                            if (vertex1[0] + (y - vertex1[1]) / (vertex2[1] - vertex1[1]) * (vertex2[0] - vertex1[0]) < x) {
                                                inside = !inside;
                                            }
                                        }

                                        j = ii;
                                    }        
                                }
                                if (inside) {
                                    var ret = {seriesIndex:i, pointIndex:null, gridData:s.gridData, data:s.data, points:s._areaPoints};
                                    series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                    p = pp = points = bw = threshold = t = null;
                                }
                                break;
                                
                            }

                            else {
                                t = s.markerRenderer.size/2+s.neighborThreshold;
                                threshold = (t > 0) ? t : 0;
                                for (var j=0; j<s.gridData.length; j++) {
                                    p = s.gridData[j];
                                    // neighbor looks different to OHLC chart.
                                    if (r.constructor == $.jqplot.OHLCRenderer) {
                                        if (r.candleStick) {
                                            var yp = s._yaxis.series_u2p;
                                            if (x >= p[0]-r._bodyWidth/2 && x <= p[0]+r._bodyWidth/2 && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {
                                                var ret = {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};
                                                series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                                p = pp = points = bw = threshold = t = null;
                                                return ret;
                                                }
                                        }
                                        // if an open hi low close chart
                                        else if (!r.hlc){
                                            var yp = s._yaxis.series_u2p;
                                            if (x >= p[0]-r._tickLength && x <= p[0]+r._tickLength && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {

                                                var ret =  {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};
                                    series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                    p = pp = points = bw = threshold = t = null;
                                    return ret;
                                            }
                                        }
                                        // a hi low close chart
                                        else {
                                            var yp = s._yaxis.series_u2p;
                                            if (x >= p[0]-r._tickLength && x <= p[0]+r._tickLength && y >= yp(s.data[j][1]) && y <= yp(s.data[j][2])) {
                                                var ret = {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};
                                                series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                                p = pp = points = bw = threshold = t = null;
                                                return ret;
                                            }
                                        }
                            
                                    }
                                    else if (p[0] != null && p[1] != null){
                                        d = Math.sqrt( (x-p[0]) * (x-p[0]) + (y-p[1]) * (y-p[1]) );
                                        if (d <= threshold && (d <= d0 || d0 == null)) {
                                           d0 = d;
                                           var ret = {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};
                                series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                p = pp = points = bw = threshold = t = null;
                                return ret;
                                        }
                                    }
                                } 
                            }
                        }
                        break;
                        
                    default:
                        x = gridpos.x;
                        y = gridpos.y;
                        r = s.renderer;
                        if (s.show) {
                            t = s.markerRenderer.size/2+s.neighborThreshold;
                            threshold = (t > 0) ? t : 0;
                            for (var j=0; j<s.gridData.length; j++) {
                                p = s.gridData[j];
                                // neighbor looks different to OHLC chart.
                                if (r.constructor == $.jqplot.OHLCRenderer) {
                                    if (r.candleStick) {
                                        var yp = s._yaxis.series_u2p;
                                        if (x >= p[0]-r._bodyWidth/2 && x <= p[0]+r._bodyWidth/2 && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {
                                            var ret = {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};
    series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                p = pp = points = bw = threshold = t = null;
                                return ret;
                                        }
                                    }
                                    // if an open hi low close chart
                                    else if (!r.hlc){
                                        var yp = s._yaxis.series_u2p;
                                        if (x >= p[0]-r._tickLength && x <= p[0]+r._tickLength && y >= yp(s.data[j][2]) && y <= yp(s.data[j][3])) {
                                            var ret = {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};
                                            series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                            p = pp = points = bw = threshold = t = null;
                                            return ret;
                                        }
                                    }
                                    // a hi low close chart
                                    else {
                                        var yp = s._yaxis.series_u2p;
                                        if (x >= p[0]-r._tickLength && x <= p[0]+r._tickLength && y >= yp(s.data[j][1]) && y <= yp(s.data[j][2])) {
                                            var ret = {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};
                                            series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                            p = pp = points = bw = threshold = t = null;
                                            return ret;
                                        }
                                    }
                            
                                }
                                else {
                                    d = Math.sqrt( (x-p[0]) * (x-p[0]) + (y-p[1]) * (y-p[1]) );
                                    if (d <= threshold && (d <= d0 || d0 == null)) {
                                       d0 = d;
                                       var ret = {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]};
                                            series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                            p = pp = points = bw = threshold = t = null;
                                            return ret;
                                    }
                                }
                            } 
                        }
                        break;
                }
            }
                                                series = plot = i = j = k = s = r = x = y = theta = sm = sa = minang = maxang = d0 = d = null;
                                    p = pp = points = bw = threshold = t = null;
            return null;
        }
        
        var checkSeriesHidden = function(p,neighbor)
        {
            if (neighbor)
            {
                var seriesIndex = neighbor.seriesIndex;
                if (!isNaN(seriesIndex) && p.series[seriesIndex] && !p.series[seriesIndex].show)
                {                    
                    //If series is hidden then event handler need not be called            
                    //if tip is showing hide the tip
                     if (p.plugins.highlighter)
                     {
                         var tips = p.plugins.highlighter.tips;
                         if (tips)
                         {
                            tips.hide();
                         }
                     }
                    return false;
                }
            }
            return true;
        }
        
        this.onClick = function(ev) {
            // Event passed in is normalized and will have data attribute.
            // Event passed out is unnormalized.
            var positions = getEventPosition(ev);
            var p = ev.data.plot;
            var neighbor = checkIntersection(positions.gridPos, p);
            if (!checkSeriesHidden(p,neighbor))
            {
                return false;
            }
            var evt = jQuery.Event('jqplotClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);
        };
        
        this.onDblClick = function(ev) {
            // Event passed in is normalized and will have data attribute.
            // Event passed out is unnormalized.
            var positions = getEventPosition(ev);
            var p = ev.data.plot;
            var neighbor = checkIntersection(positions.gridPos, p);
            var evt = jQuery.Event('jqplotDblClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);
        };
        
        this.onMouseDown = function(ev) {
            var positions = getEventPosition(ev);
            var p = ev.data.plot;
            var neighbor = checkIntersection(positions.gridPos, p);
            var evt = jQuery.Event('jqplotMouseDown');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);
            positions = p = evt = ev = null;
        };
        
        this.onMouseUp = function(ev) {
            var positions = getEventPosition(ev);
            var evt = jQuery.Event('jqplotMouseUp');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            $(this).trigger(evt, [positions.gridPos, positions.dataPos, null, ev.data.plot]);
            positions = evt = null;
        };
        
        this.onRightClick = function(ev) {
            var positions = getEventPosition(ev);
            var p = ev.data.plot;
            var neighbor = checkIntersection(positions.gridPos, p);
            if (p.captureRightClick) {
                if (ev.which == 3) {
                var evt = jQuery.Event('jqplotRightClick');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                    $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);
                }
                else {
                var evt = jQuery.Event('jqplotMouseUp');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                    $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);
                }
            }
            positions = p = ev = null;
        };
        
        this.onMouseMove = function(ev) {
            var positions = getEventPosition(ev);
            var p = ev.data.plot;
            var neighbor = checkIntersection(positions.gridPos, p);
            if (!checkSeriesHidden(p,neighbor))
            {
                return false;
            }
            var evt = jQuery.Event('jqplotMouseMove');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            $(this).trigger(evt, [positions.gridPos, positions.dataPos, neighbor, p]);
            positions = p = evt = ev = null;
        };
        
        this.onMouseEnter = function(ev) {
            var positions = getEventPosition(ev);
            var p = ev.data.plot;
            var evt = jQuery.Event('jqplotMouseEnter');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            evt.relatedTarget = ev.relatedTarget;
            $(this).trigger(evt, [positions.gridPos, positions.dataPos, null, p]);
            positions = p = evt = ev = null;
        };
        
        this.onMouseLeave = function(ev) {
            var positions = getEventPosition(ev);
            var p = ev.data.plot;
            var evt = jQuery.Event('jqplotMouseLeave');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            evt.relatedTarget = ev.relatedTarget;
            $(this).trigger(evt, [positions.gridPos, positions.dataPos, null, p]);
            positions = p = evt = ev = null;
        };

        this.freeOldObjects = function()
        {
            tiny.removeListeners(this);
            if(!this.target)
            {
                return;
            }
            var tipparentID = "map_tip_"+this.target[0].id;
            var ptLabels = $('#'+tipparentID +'_ptLabel');
             ptLabels.each(function(idx, elem)
            {
                tiny.garbageCollect($(elem), true);
            });
            var piePtLabels = this.target.find('.jqplot-data-label');
             piePtLabels.each(function(idx, elem)
            {
                tiny.garbageCollect($(elem), true);
            });
            var tipDivs = $('#'+tipparentID);
             tipDivs.each(function(idx, elem)
            {
                tipDivs.html("");
            });
            this.addedEvt = false;
            var ptLabels_ = $('#map_' + this.bc);
            ptLabels_.each(function(idx, elem)
            {
                tiny.garbageCollect(elem);
            });
            var args = ['AREA','AREA.piearea','area.piearea','map.pie_map','MAP.pie_map','div.jqplot-pie-series','div.tiny_tips','div.piemap_tip','jqplot-table-legend',
            '.jqplot-meterGauge-label',
            '.jqplot-meterGauge-value',
            '.tiny-highlighter-tooltip',
            '.jqplot-cursor-tooltip',
            'map'
            ];
            for(var ia=0;ia<args.length;ia++)
            {
                this.target.find(args[ia]).each(function(a,elm)
                {
                    tiny.garbageCollect(elm);
                });
            }
            tiny.garbageCollect($('#charttip'), true);
        }

        this.clearLegendObjects = function()
        {
            if(this.legend && this.legend._elem)
            {
                this.isLegendEvtsAdded = false;
                this.legend._elem.children().each(function(idx, elem)
                {
                    tiny.garbageCollect($(elem), true);
                });
                 tiny.garbageCollect(this.legend._elem, true);
            }
        }
        
        // method: drawSeries
        // Redraws all or just one series on the plot.  No axis scaling
        // is performed and no other elements on the plot are redrawn.
        // options is an options object to pass on to the series renderers.
        // It can be an empty object {}.  idx is the series index
        // to redraw if only one series is to be redrawn.
        this.drawSeries = function(options, idx){
            var i, series, ctx;
            this.freeOldObjects();
            // if only one argument passed in and it is a number, use it ad idx.
            idx = (typeof(options) === "number" && idx == null) ? options : idx;
            options = (typeof(options) === "object") ? options : {};
            // draw specified series
            if (idx != undefined) {
                series = this.series[idx];
                if(!series.isBigData)
                {
                    ctx = series.shadowCanvas._ctx;
                    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                    series.drawShadow(ctx, options, this);
                }
                ctx = series.canvas._ctx;
                var canWidth = ctx.canvas.width;
                ctx.clearRect(0, 0, canWidth, ctx.canvas.height);
                series.draw(ctx, options, this, undefined, canWidth);
                if (series.renderer.constructor == $.jqplot.BezierCurveRenderer) {
                    if (idx < this.series.length - 1) {
                        this.drawSeries(idx+1); 
                    }
                }
            }
            
            else {
                // if call series drawShadow method first, in case all series shadows
                // should be drawn before any series.  This will ensure, like for 
                // stacked bar plots, that shadows don't overlap series.
                for (i=0; i<this.series.length; i++) {
                    // first clear the canvas
                    series = this.series[i];
                    if(!series.isBigData)
                    {
                        ctx = series.shadowCanvas._ctx;
                        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                        series.drawShadow(ctx, options, this);
                    }
                    ctx = series.canvas._ctx;
                    ctx = series.canvas._ctx;
                    var canWidth = ctx.canvas.width;
                    ctx.clearRect(0, 0, canWidth, ctx.canvas.height);
                    var drawPointLabel = false;
                    if(i == (this.series.length - 1))
                    {
                        drawPointLabel = true;
                    }
                    series.draw(ctx, options, this, drawPointLabel, canWidth);
                }
            }
            options = idx = i = series = ctx = null;
        };
        
        // method: moveSeriesToFront
        // This method requires jQuery 1.4+
        // Moves the specified series canvas in front of all other series canvases.
        // This effectively "draws" the specified series on top of all other series,
        // although it is performed through DOM manipulation, no redrawing is performed.
        //
        // Parameters:
        // idx - 0 based index of the series to move.  This will be the index of the series
        // as it was first passed into the jqplot function.
        this.moveSeriesToFront = function (idx) { 
            idx = parseInt(idx, 10);
            var stackIndex = $.inArray(idx, this.seriesStack);
            // if already in front, return
            if (stackIndex == -1) {
                return;
            }
            if (stackIndex == this.seriesStack.length -1) {
                this.previousSeriesStack = this.seriesStack.slice(0);
                return;
            }
            var opidx = this.seriesStack[this.seriesStack.length -1];
            var serelem = this.series[idx].canvas._elem.detach();
            if(!this.series[idx].isBigData)
            {
                var shadelem = this.series[idx].shadowCanvas._elem.detach();
                this.series[opidx].shadowCanvas._elem.after(shadelem);
            }
            this.series[opidx].canvas._elem.after(serelem);
            this.previousSeriesStack = this.seriesStack.slice(0);
            this.seriesStack.splice(stackIndex, 1);
            this.seriesStack.push(idx);
        };
        
        // method: moveSeriesToBack
        // This method requires jQuery 1.4+
        // Moves the specified series canvas behind all other series canvases.
        //
        // Parameters:
        // idx - 0 based index of the series to move.  This will be the index of the series
        // as it was first passed into the jqplot function.
        this.moveSeriesToBack = function (idx) {
            idx = parseInt(idx, 10);
            var stackIndex = $.inArray(idx, this.seriesStack);
            // if already in back, return
            if (stackIndex == 0 || stackIndex == -1) {
                return;
            }
            var opidx = this.seriesStack[0];
            var serelem = this.series[idx].canvas._elem.detach();
            if(!this.series[opidx].isBigData)
            {
                var shadelem = this.series[idx].shadowCanvas._elem.detach();
                this.series[opidx].shadowCanvas._elem.before(shadelem);
            }
            this.series[opidx].canvas._elem.before(serelem);
            this.previousSeriesStack = this.seriesStack.slice(0);
            this.seriesStack.splice(stackIndex, 1);
            this.seriesStack.unshift(idx);
        };
        
        // method: restorePreviousSeriesOrder
        // This method requires jQuery 1.4+
        // Restore the series canvas order to its previous state.
        // Useful to put a series back where it belongs after moving
        // it to the front.
        this.restorePreviousSeriesOrder = function () {
            var i, j, serelem, shadelem, temp, move, keep;
            // if no change, return.
            if (this.seriesStack == this.previousSeriesStack) {
                return;
            }
            for (i=1; i<this.previousSeriesStack.length; i++) {
                move = this.previousSeriesStack[i];
                keep = this.previousSeriesStack[i-1];
                serelem = this.series[move].canvas._elem.detach();
                if(!this.series[move].isBigData)
                {
                    shadelem = this.series[move].shadowCanvas._elem.detach();
                    this.series[keep].shadowCanvas._elem.after(shadelem);
                }
                this.series[keep].canvas._elem.after(serelem);
            }
            temp = this.seriesStack.slice(0);
            this.seriesStack = this.previousSeriesStack.slice(0);
            this.previousSeriesStack = temp;
        };
        
        // method: restoreOriginalSeriesOrder
        // This method requires jQuery 1.4+
        // Restore the series canvas order to its original order
        // when the plot was created.
        this.restoreOriginalSeriesOrder = function () {
            var i, j, arr=[], serelem, shadelem;
            for (i=0; i<this.series.length; i++) {
                arr.push(i);
            }
            if (this.seriesStack == arr) {
                return;
            }
            this.previousSeriesStack = this.seriesStack.slice(0);
            this.seriesStack = arr;
            for (i=1; i<this.seriesStack.length; i++) {
                serelem = this.series[i].canvas._elem.detach();
                if(!this.series[i].isBigData)
                {
                    shadelem = this.series[i].shadowCanvas._elem.detach();
                    this.series[i-1].shadowCanvas._elem.after(shadelem);
                }
                this.series[i-1].canvas._elem.after(serelem);
            }
        };
        
        this.activateTheme = function (name) {
            this.themeEngine.activate(this, name);
        };
    }
    
    
    // conpute a highlight color or array of highlight colors from given colors.
    $.jqplot.computeHighlightColors  = function(colors) {
        var ret;
        if (jQuery.isArray(colors)) {
            ret = [];
            for (var i=0; i<colors.length; i++){
                var rgba = $.jqplot.getColorComponents(colors[i]);
                var newrgb = [rgba[0], rgba[1], rgba[2]];
                var sum = newrgb[0] + newrgb[1] + newrgb[2];
                for (var j=0; j<3; j++) {
                    // when darkening, lowest color component can be is 60.
                    newrgb[j] = (sum > 660) ?  newrgb[j] * 0.85 : 0.73 * newrgb[j] + 90;
                    newrgb[j] = parseInt(newrgb[j], 10);
                    (newrgb[j] > 255) ? 255 : newrgb[j];
                }
                newrgb[3] = 0.3 + 0.35 * rgba[3];
                ret.push('rgba('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+','+newrgb[3]+')');
            }
        }
        else {
            var rgba = $.jqplot.getColorComponents(colors);
            var newrgb = [rgba[0], rgba[1], rgba[2]];
            var sum = newrgb[0] + newrgb[1] + newrgb[2];
            for (var j=0; j<3; j++) {
                newrgb[j] = (sum > 660) ?  newrgb[j] * 0.85 : 0.73 * newrgb[j] + 90;
                newrgb[j] = parseInt(newrgb[j], 10);
                (newrgb[j] > 255) ? 255 : newrgb[j];
            }
            newrgb[3] = 0.3 + 0.35 * rgba[3];
            ret = 'rgba('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+','+newrgb[3]+')';
        }
        return ret;
    };
        
   $.jqplot.ColorGenerator = function(colors) {
        colors = colors || $.jqplot.config.defaultColors;
        var idx = 0;
        
        this.next = function () { 
            if (idx < colors.length) {
                return colors[idx++];
            }
            else {
                idx = 0;
                return colors[idx++];
            }
        };
        
        this.previous = function () { 
            if (idx > 0) {
                return colors[idx--];
            }
            else {
                idx = colors.length-1;
                return colors[idx];
            }
        };
        
        // get a color by index without advancing pointer.
        this.get = function(i) {
            var idx = i - colors.length * Math.floor(i/colors.length);
            return colors[idx];
        };
        
        this.setColors = function(c) {
            colors = c;
        };
        
        this.reset = function() {
            idx = 0;
        };

        this.getIndex = function() {
            return idx;
        };

        this.setIndex = function(index) {
            idx = index;
        };
    };

    // convert a hex color string to rgb string.
    // h - 3 or 6 character hex string, with or without leading #
    // a - optional alpha
    $.jqplot.hex2rgb = function(h, a) {
        h = h.replace('#', '');
        if (h.length == 3) {
            h = h.charAt(0)+h.charAt(0)+h.charAt(1)+h.charAt(1)+h.charAt(2)+h.charAt(2);
        }
        var rgb;
        rgb = 'rgba('+parseInt(h.slice(0,2), 16)+', '+parseInt(h.slice(2,4), 16)+', '+parseInt(h.slice(4,6), 16);
        if (a) {
            rgb += ', '+a;
        }
        rgb += ')';
        return rgb;
    };
    
    // convert an rgb color spec to a hex spec.  ignore any alpha specification.
    $.jqplot.rgb2hex = function(s) {
        var pat = /rgba?\( *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *(?:, *[0-9.]*)?\)/;
        var m = s.match(pat);
        var h = '#';
        for (var i=1; i<4; i++) {
            var temp;
            if (m[i].search(/%/) != -1) {
                temp = parseInt(255*m[i]/100, 10).toString(16);
                if (temp.length == 1) {
                    temp = '0'+temp;
                }
            }
            else {
                temp = parseInt(m[i], 10).toString(16);
                if (temp.length == 1) {
                    temp = '0'+temp;
                }
            }
            h += temp;
        }
        return h;
    };
    
    // given a css color spec, return an rgb css color spec
    $.jqplot.normalize2rgb = function(s, a) {
        if (s.search(/^ *rgba?\(/) != -1) {
            return s; 
        }
        else if (s.search(/^ *#?[0-9a-fA-F]?[0-9a-fA-F]/) != -1) {
            return $.jqplot.hex2rgb(s, a);
        }
        else {
            throw 'invalid color spec';
        }
    };
    
    // extract the r, g, b, a color components out of a css color spec.
    $.jqplot.getColorComponents = function(s) {
        // check to see if a color keyword.
        s = $.jqplot.colorKeywordMap[s] || s;
        var rgb = $.jqplot.normalize2rgb(s);
        var pat = /rgba?\( *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *, *([0-9]{1,3}\.?[0-9]*%?) *,? *([0-9.]* *)?\)/;
        var m = rgb.match(pat);
        var ret = [];
        for (var i=1; i<4; i++) {
            if (m[i].search(/%/) != -1) {
                ret[i-1] = parseInt(255*m[i]/100, 10);
            }
            else {
                ret[i-1] = parseInt(m[i], 10);
            }
        }
        ret[3] = parseFloat(m[4]) ? parseFloat(m[4]) : 1.0;
        return ret;
    };
    
    $.jqplot.colorKeywordMap = {
        aliceblue: 'rgb(240, 248, 255)',
        antiquewhite: 'rgb(250, 235, 215)',
        aqua: 'rgb( 0, 255, 255)',
        aquamarine: 'rgb(127, 255, 212)',
        azure: 'rgb(240, 255, 255)',
        beige: 'rgb(245, 245, 220)',
        bisque: 'rgb(255, 228, 196)',
        black: 'rgb( 0, 0, 0)',
        blanchedalmond: 'rgb(255, 235, 205)',
        blue: 'rgb( 0, 0, 255)',
        blueviolet: 'rgb(138, 43, 226)',
        brown: 'rgb(165, 42, 42)',
        burlywood: 'rgb(222, 184, 135)',
        cadetblue: 'rgb( 95, 158, 160)',
        chartreuse: 'rgb(127, 255, 0)',
        chocolate: 'rgb(210, 105, 30)',
        coral: 'rgb(255, 127, 80)',
        cornflowerblue: 'rgb(100, 149, 237)',
        cornsilk: 'rgb(255, 248, 220)',
        crimson: 'rgb(220, 20, 60)',
        cyan: 'rgb( 0, 255, 255)',
        darkblue: 'rgb( 0, 0, 139)',
        darkcyan: 'rgb( 0, 139, 139)',
        darkgoldenrod: 'rgb(184, 134, 11)',
        darkgray: 'rgb(169, 169, 169)',
        darkgreen: 'rgb( 0, 100, 0)',
        darkgrey: 'rgb(169, 169, 169)',
        darkkhaki: 'rgb(189, 183, 107)',
        darkmagenta: 'rgb(139, 0, 139)',
        darkolivegreen: 'rgb( 85, 107, 47)',
        darkorange: 'rgb(255, 140, 0)',
        darkorchid: 'rgb(153, 50, 204)',
        darkred: 'rgb(139, 0, 0)',
        darksalmon: 'rgb(233, 150, 122)',
        darkseagreen: 'rgb(143, 188, 143)',
        darkslateblue: 'rgb( 72, 61, 139)',
        darkslategray: 'rgb( 47, 79, 79)',
        darkslategrey: 'rgb( 47, 79, 79)',
        darkturquoise: 'rgb( 0, 206, 209)',
        darkviolet: 'rgb(148, 0, 211)',
        deeppink: 'rgb(255, 20, 147)',
        deepskyblue: 'rgb( 0, 191, 255)',
        dimgray: 'rgb(105, 105, 105)',
        dimgrey: 'rgb(105, 105, 105)',
        dodgerblue: 'rgb( 30, 144, 255)',
        firebrick: 'rgb(178, 34, 34)',
        floralwhite: 'rgb(255, 250, 240)',
        forestgreen: 'rgb( 34, 139, 34)',
        fuchsia: 'rgb(255, 0, 255)',
        gainsboro: 'rgb(220, 220, 220)',
        ghostwhite: 'rgb(248, 248, 255)',
        gold: 'rgb(255, 215, 0)',
        goldenrod: 'rgb(218, 165, 32)',
        gray: 'rgb(128, 128, 128)',
        grey: 'rgb(128, 128, 128)',
        green: 'rgb( 0, 128, 0)',
        greenyellow: 'rgb(173, 255, 47)',
        honeydew: 'rgb(240, 255, 240)',
        hotpink: 'rgb(255, 105, 180)',
        indianred: 'rgb(205, 92, 92)',
        indigo: 'rgb( 75, 0, 130)',
        ivory: 'rgb(255, 255, 240)',
        khaki: 'rgb(240, 230, 140)',
        lavender: 'rgb(230, 230, 250)',
        lavenderblush: 'rgb(255, 240, 245)',
        lawngreen: 'rgb(124, 252, 0)',
        lemonchiffon: 'rgb(255, 250, 205)',
        lightblue: 'rgb(173, 216, 230)',
        lightcoral: 'rgb(240, 128, 128)',
        lightcyan: 'rgb(224, 255, 255)',
        lightgoldenrodyellow: 'rgb(250, 250, 210)',
        lightgray: 'rgb(211, 211, 211)',
        lightgreen: 'rgb(144, 238, 144)',
        lightgrey: 'rgb(211, 211, 211)',
        lightpink: 'rgb(255, 182, 193)',
        lightsalmon: 'rgb(255, 160, 122)',
        lightseagreen: 'rgb( 32, 178, 170)',
        lightskyblue: 'rgb(135, 206, 250)',
        lightslategray: 'rgb(119, 136, 153)',
        lightslategrey: 'rgb(119, 136, 153)',
        lightsteelblue: 'rgb(176, 196, 222)',
        lightyellow: 'rgb(255, 255, 224)',
        lime: 'rgb( 0, 255, 0)',
        limegreen: 'rgb( 50, 205, 50)',
        linen: 'rgb(250, 240, 230)',
        magenta: 'rgb(255, 0, 255)',
        maroon: 'rgb(128, 0, 0)',
        mediumaquamarine: 'rgb(102, 205, 170)',
        mediumblue: 'rgb( 0, 0, 205)',
        mediumorchid: 'rgb(186, 85, 211)',
        mediumpurple: 'rgb(147, 112, 219)',
        mediumseagreen: 'rgb( 60, 179, 113)',
        mediumslateblue: 'rgb(123, 104, 238)',
        mediumspringgreen: 'rgb( 0, 250, 154)',
        mediumturquoise: 'rgb( 72, 209, 204)',
        mediumvioletred: 'rgb(199, 21, 133)',
        midnightblue: 'rgb( 25, 25, 112)',
        mintcream: 'rgb(245, 255, 250)',
        mistyrose: 'rgb(255, 228, 225)',
        moccasin: 'rgb(255, 228, 181)',
        navajowhite: 'rgb(255, 222, 173)',
        navy: 'rgb( 0, 0, 128)',
        oldlace: 'rgb(253, 245, 230)',
        olive: 'rgb(128, 128, 0)',
        olivedrab: 'rgb(107, 142, 35)',
        orange: 'rgb(255, 165, 0)',
        orangered: 'rgb(255, 69, 0)',
        orchid: 'rgb(218, 112, 214)',
        palegoldenrod: 'rgb(238, 232, 170)',
        palegreen: 'rgb(152, 251, 152)',
        paleturquoise: 'rgb(175, 238, 238)',
        palevioletred: 'rgb(219, 112, 147)',
        papayawhip: 'rgb(255, 239, 213)',
        peachpuff: 'rgb(255, 218, 185)',
        peru: 'rgb(205, 133, 63)',
        pink: 'rgb(255, 192, 203)',
        plum: 'rgb(221, 160, 221)',
        powderblue: 'rgb(176, 224, 230)',
        purple: 'rgb(128, 0, 128)',
        red: 'rgb(255, 0, 0)',
        rosybrown: 'rgb(188, 143, 143)',
        royalblue: 'rgb( 65, 105, 225)',
        saddlebrown: 'rgb(139, 69, 19)',
        salmon: 'rgb(250, 128, 114)',
        sandybrown: 'rgb(244, 164, 96)',
        seagreen: 'rgb( 46, 139, 87)',
        seashell: 'rgb(255, 245, 238)',
        sienna: 'rgb(160, 82, 45)',
        silver: 'rgb(192, 192, 192)',
        skyblue: 'rgb(135, 206, 235)',
        slateblue: 'rgb(106, 90, 205)',
        slategray: 'rgb(112, 128, 144)',
        slategrey: 'rgb(112, 128, 144)',
        snow: 'rgb(255, 250, 250)',
        springgreen: 'rgb( 0, 255, 127)',
        steelblue: 'rgb( 70, 130, 180)',
        tan: 'rgb(210, 180, 140)',
        teal: 'rgb( 0, 128, 128)',
        thistle: 'rgb(216, 191, 216)',
        tomato: 'rgb(255, 99, 71)',
        turquoise: 'rgb( 64, 224, 208)',
        violet: 'rgb(238, 130, 238)',
        wheat: 'rgb(245, 222, 179)',
        white: 'rgb(255, 255, 255)',
        whitesmoke: 'rgb(245, 245, 245)',
        yellow: 'rgb(255, 255, 0)',
        yellowgreen: 'rgb(154, 205, 50)'
    };

    

    // class: $.jqplot.AxisLabelRenderer
    // Renderer to place labels on the axes.
    $.jqplot.AxisLabelRenderer = function(options) {
        // Group: Properties
        $.jqplot.ElemContainer.call(this);
        // name of the axis associated with this tick
        this.axis;
        // prop: show
        // wether or not to show the tick (mark and label).
        this.show = true;
        // prop: label
        // The text or html for the label.
        this.label = '';
        this.fontFamily = null;
        this.fontSize = null;
        this.textColor = null;
        this._elem;
        // prop: escapeHTML
        // true to escape HTML entities in the label.
        this.escapeHTML = false;
        
        $.extend(true, this, options);
    };
    
    $.jqplot.AxisLabelRenderer.prototype = new $.jqplot.ElemContainer();
    $.jqplot.AxisLabelRenderer.prototype.constructor = $.jqplot.AxisLabelRenderer;
    
    $.jqplot.AxisLabelRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
    };
    
    $.jqplot.AxisLabelRenderer.prototype.draw = function(ctx, plot) {
        // Memory Leaks patch
        if (this._elem) {
            tiny.garbageCollect(this._elem, true);
            this._elem.emptyForce();
            this._elem = null;
        }

        this._elem = $('<div style="position:absolute;" class="jqplot-'+this.axis+'-label"></div>');
        
        if (Number(this.label)) {
            this._elem.css('white-space', 'nowrap');
        }
        
        if (!this.escapeHTML) {
            this._elem.html(this.label);
        }
        else {
            this._elem.text(this.label);
        }
        if (this.fontFamily) {
            this._elem.css('font-family', this.fontFamily);
        }
        if (this.fontSize) {
            this._elem.css('font-size', this.fontSize);
        }
        if (this.textColor) {
            this._elem.css('color', this.textColor);
        }
        
        return this._elem;
    };
    
    $.jqplot.AxisLabelRenderer.prototype.pack = function() {
    };

    // class: $.jqplot.AxisTickRenderer
    // A "tick" object showing the value of a tick/gridline on the plot.
    $.jqplot.AxisTickRenderer = function(options) {
        // Group: Properties
        $.jqplot.ElemContainer.call(this);
        // prop: mark
        // tick mark on the axis.  One of 'inside', 'outside', 'cross', '' or null.
        this.mark = 'outside';
        // name of the axis associated with this tick
        this.axis;
        // prop: showMark
        // wether or not to show the mark on the axis.
        this.showMark = true;
        // prop: showGridline
        // wether or not to draw the gridline on the grid at this tick.
        this.showGridline = true;
        // prop: isMinorTick
        // if this is a minor tick.
        this.isMinorTick = false;
        // prop: size
        // Length of the tick beyond the grid in pixels.
        // DEPRECATED: This has been superceeded by markSize
        this.size = 4;
        // prop:  markSize
        // Length of the tick marks in pixels.  For 'cross' style, length
        // will be stoked above and below axis, so total length will be twice this.
        this.markSize = 6;
        // prop: show
        // wether or not to show the tick (mark and label).
        // Setting this to false requires more testing.  It is recommended
        // to set showLabel and showMark to false instead.
        this.show = true;
        // prop: showLabel
        // wether or not to show the label.
        this.showLabel = true;
        this.label = null;
        this.value = null;
        this._styles = {};
        // prop: formatter
        // A class of a formatter for the tick text.  sprintf by default.
        this.formatter = $.jqplot.DefaultTickFormatter;
        // prop: prefix
        // String to prepend to the tick label.
        // Prefix is prepended to the formatted tick label.
        this.prefix = '';
        // prop: formatString
        // string passed to the formatter.
        this.formatString = '';
        // prop: fontFamily
        // css spec for the font-family css attribute.
        this.fontFamily;
        // prop: fontSize
        // css spec for the font-size css attribute.
        this.fontSize;
        // prop: textColor
        // css spec for the color attribute.
        this.textColor;
        // prop: escapeHTML
        // true to escape HTML entities in the label.
        this.escapeHTML = false;
        this._elem;
		this._breakTick = false;
        
        $.extend(true, this, options);
    };
    
    $.jqplot.AxisTickRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
    };
    
    $.jqplot.AxisTickRenderer.prototype = new $.jqplot.ElemContainer();
    $.jqplot.AxisTickRenderer.prototype.constructor = $.jqplot.AxisTickRenderer;
    
    $.jqplot.AxisTickRenderer.prototype.setTick = function(value, axisName, isMinor) {
        this.value = value;
        this.axis = axisName;
        if (isMinor) {
            this.isMinorTick = true;
        }
        return this;
    };
    
    $.jqplot.AxisTickRenderer.prototype.draw = function() {
        if (this.label === null) {
            this.label = this.prefix + this.formatter(this.formatString, this.value);
        }
        var style = {position: 'absolute'};
        if (Number(this.label)) {
            style['whitSpace'] = 'nowrap';
        }
        
        // Memory Leaks patch
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null;
        }

        this._elem = $(document.createElement('div'));
        this._elem.addClass("jqplot-"+this.axis+"-tick");
        
        if (!this.escapeHTML) {
            this._elem.html(this.label);
        }
        else {
            this._elem.text(this.label);
        }
        

        for (var s in this._styles) {
            style[s] = this._styles[s];
        }
        if (this.fontFamily) {
            style['font-family'] = this.fontFamily;
        }
        if (this.fontSize) {
            style['font-size'] = this.fontSize;
        }
        if (this.textColor) {
            style['color'] = this.textColor;
        }
        this._elem.css(style);
		if (this._breakTick) {
			this._elem.addClass('jqplot-breakTick');
		}
        
        return this._elem;
    };
        
    $.jqplot.DefaultTickFormatter = function (format, val) {
        if (typeof val == 'number') {
            if (!format) {
                format = $.jqplot.config.defaultTickFormatString;
            }
            return $.jqplot.sprintf(format, val);
        }
        else {
            return String(val);
        }
    };
    
    $.jqplot.AxisTickRenderer.prototype.pack = function() {
    };
     
    // Class: $.jqplot.CanvasGridRenderer
    // The default jqPlot grid renderer, creating a grid on a canvas element.
    // The renderer has no additional options beyond the <Grid> class.
    $.jqplot.CanvasGridRenderer = function(){
        this.shadowRenderer = new $.jqplot.ShadowRenderer();
    };
    
    // called with context of Grid object
    $.jqplot.CanvasGridRenderer.prototype.init = function(options) {
        this._ctx;
        $.extend(true, this, options);
        // set the shadow renderer options
        var sopts = {lineJoin:'miter', lineCap:'round', fill:false, isarc:false, angle:this.shadowAngle, offset:this.shadowOffset, alpha:this.shadowAlpha, depth:this.shadowDepth, lineWidth:this.shadowWidth, closePath:false, strokeStyle:this.shadowColor};
        this.renderer.shadowRenderer.init(sopts);
    };

   // Memory Leaks patch
    $.jqplot.CanvasGridRenderer.prototype.resetCanvas = function() {
      if (this._elem) {
        if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
           window.G_vmlCanvasManager.uninitElement(this._elem.get(0));
           tiny.garbageCollect(this._elem.get(0));
            this._elem.empty();
        }
        
        this._elem.emptyForce();
        tiny.garbageCollect(this._elem, true);
      }
      
      this._ctx = null;
    };
    
    // called with context of Grid.
    $.jqplot.CanvasGridRenderer.prototype.createElement = function(plot) {
        var elem;
        // Memory Leaks patch
        if (this._elem) {
          if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
            elem = this._elem.get(0);
            window.G_vmlCanvasManager.uninitElement(elem);
            tiny.garbageCollect(elem);
            elem = null;
          }
          
          this._elem.emptyForce();
          this._elem = null;
        }
      
        elem = plot.canvasManager.getCanvas();
	
	

        var w = this._plotDimensions.width;
        var h = this._plotDimensions.height;
        elem.width = w;
        elem.height = h;
        this._elem = $(elem);
        this._elem.addClass('jqplot-grid-canvas');
        this._elem.css({ position: 'absolute', left: 0, top: 0 });
        
		elem = plot.canvasManager.initCanvas(elem);
		
        this._top = this._offsets.top;
        this._bottom = h - this._offsets.bottom;
        this._left = this._offsets.left;
        this._right = w - this._offsets.right;
        this._width = this._right - this._left;
        this._height = this._bottom - this._top;
        // avoid memory leak
        elem = null;
        return this._elem;
    };


    $.jqplot.CanvasGridRenderer.prototype.drawLine = function(ctx, bx, by, ex, ey, opts)
    {		
            ctx.save();
            opts = opts || {};
            if (opts.lineWidth == null || opts.lineWidth != 0){
                $.extend(true, ctx, opts);
                ctx.beginPath();
                ctx.moveTo(bx, by);
                ctx.lineTo(ex, ey);
                ctx.stroke();
                ctx.restore();
            }
            ctx = opts = ex = ey = bx = by = null;
    };
    
    $.jqplot.CanvasGridRenderer.prototype.draw = function() {
        this._ctx = this._elem.get(0).getContext("2d");
        var ctx = this._ctx;
        var axes = this._axes;
        // Add the grid onto the grid canvas.  This is the bottom most layer.
        ctx.save();
        ctx.clearRect(0, 0, this._plotDimensions.width, this._plotDimensions.height);
        ctx.fillStyle = this.backgroundColor || this.background;
        ctx.fillRect(this._left, this._top, this._width, this._height);
        
        ctx.save();
        ctx.lineJoin = 'miter';
        ctx.lineCap = 'butt';
        ctx.lineWidth = this.gridLineWidth;
        ctx.strokeStyle = this.gridLineColor;
        var b, e, s, m;
        var ax = ['xaxis', 'yaxis', 'x2axis', 'y2axis'];
        for (var i=4; i>0; i--) {
            var name = ax[i-1];
            var axis = axes[name];
            var ticks = axis._ticks;
            var numticks = ticks.length;
            if (axis.show) {
                if (axis.drawBaseline) {
                    var bopts = {};
                    axis.baselineWidth = 2.0;
                    axis.baselineColor= '#c7c7c7';
                    if (axis.baselineWidth !== null) {
                        bopts.lineWidth = axis.baselineWidth;
                    }
                    if (axis.baselineColor !== null) {
                        bopts.strokeStyle = axis.baselineColor;
                    }
                    switch (name) {
                        case 'xaxis':
                             $.jqplot.CanvasGridRenderer.prototype.drawLine (ctx , this._left, this._bottom, this._right, this._bottom, bopts);
                            break;
                        case 'yaxis':
                             $.jqplot.CanvasGridRenderer.prototype.drawLine (ctx, this._left, this._bottom, this._left, this._top, bopts);
                            break;
                        case 'x2axis':
                             $.jqplot.CanvasGridRenderer.prototype.drawLine (ctx, this._left, this._top, this._right, this._top, bopts);
                            break;
                        case 'y2axis':
                             $.jqplot.CanvasGridRenderer.prototype.drawLine (ctx, this._right, this._bottom, this._right, this._top, bopts);
                            break;
                    }
                }
                for (var j=numticks; j>0; j--) {
                    var t = ticks[j-1];
                    if (t.show) {
                        var pos = Math.round(axis.u2p(t.value)) + 0.5;
                        switch (name) {
                            case 'xaxis':
                                // draw the grid line if we should
                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {
                                     $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, pos, this._top, pos, this._bottom);
                                }
                                // draw the mark
                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {
                                    s = t.markSize;
                                    m = t.mark;
                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                                    switch (m) {
                                        case 'outside':
                                            b = this._bottom;
                                            e = this._bottom+s;
                                            break;
                                        case 'inside':
                                            b = this._bottom-s;
                                            e = this._bottom;
                                            break;
                                        case 'cross':
                                            b = this._bottom-s;
                                            e = this._bottom+s;
                                            break;
                                        default:
                                            b = this._bottom;
                                            e = this._bottom+s;
                                            break;
                                    }
                                    // draw the shadow
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(ctx, [[pos,b],[pos,e]], {lineCap:'butt', lineWidth:this.gridLineWidth, offset:this.gridLineWidth*0.75, depth:2, fill:false, closePath:false});
                                    }
                                    // draw the line
                                     $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, pos, b, pos, e);
                                }
                                break;
                            case 'yaxis':
                                // draw the grid line
                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {                                    
									if(this.tinyHGrid ===true)
									{
                                        // Check if the ticks is the first one or the last one. In those case only the Hroizontal Grid line need to be drawn
                                        // if the tinyHGrid is true!!
										 if(j === numticks || j === 1)
										 {
											 $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, this._right, pos, this._left, pos);
										 }
									}
									else
									{
										 $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, this._right, pos, this._left, pos);
									}
                                }
                                // draw the mark
                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {
                                    s = t.markSize;
                                    m = t.mark;
                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                                    switch (m) {
                                        case 'outside':
                                            b = this._left-s;
                                            e = this._left;
                                            break;
                                        case 'inside':
                                            b = this._left;
                                            e = this._left+s;
                                            break;
                                        case 'cross':
                                            b = this._left-s;
                                            e = this._left+s;
                                            break;
                                        default:
                                            b = this._left-s;
                                            e = this._left;
                                            break;
                                            }
                                    // draw the shadow
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(ctx, [[b, pos], [e, pos]], {lineCap:'butt', lineWidth:this.gridLineWidth*1.5, offset:this.gridLineWidth*0.75, fill:false, closePath:false});
                                    }
                                     $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, b, pos, e, pos, {strokeStyle:axis.borderColor});
                                }
                                break;
                            case 'x2axis':
                                // draw the grid line
                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {
                                     $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, pos, this._bottom, pos, this._top);
                                }
                                // draw the mark
                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {
                                    s = t.markSize;
                                    m = t.mark;
                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                                    switch (m) {
                                        case 'outside':
                                            b = this._top-s;
                                            e = this._top;
                                            break;
                                        case 'inside':
                                            b = this._top;
                                            e = this._top+s;
                                            break;
                                        case 'cross':
                                            b = this._top-s;
                                            e = this._top+s;
                                            break;
                                        default:
                                            b = this._top-s;
                                            e = this._top;
                                            break;
                                            }
                                    // draw the shadow
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(ctx, [[pos,b],[pos,e]], {lineCap:'butt', lineWidth:this.gridLineWidth, offset:this.gridLineWidth*0.75, depth:2, fill:false, closePath:false});
                                    }
                                     $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, pos, b, pos, e);
                                }
                                break;
                            case 'y2axis':
                                // draw the grid line
                                if (t.showGridline && this.drawGridlines && ((!t.isMinorTick && axis.drawMajorGridlines) || (t.isMinorTick && axis.drawMinorGridlines)) ) {
                                     $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, this._left, pos, this._right, pos);
                                }
                                // draw the mark
                                if (t.showMark && t.mark && ((!t.isMinorTick && axis.drawMajorTickMarks) || (t.isMinorTick && axis.drawMinorTickMarks)) ) {
                                    s = t.markSize;
                                    m = t.mark;
                                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                                    switch (m) {
                                        case 'outside':
                                            b = this._right;
                                            e = this._right+s;
                                            break;
                                        case 'inside':
                                            b = this._right-s;
                                            e = this._right;
                                            break;
                                        case 'cross':
                                            b = this._right-s;
                                            e = this._right+s;
                                            break;
                                        default:
                                            b = this._right;
                                            e = this._right+s;
                                            break;
                                            }
                                    // draw the shadow
                                    if (this.shadow) {
                                        this.renderer.shadowRenderer.draw(ctx, [[b, pos], [e, pos]], {lineCap:'butt', lineWidth:this.gridLineWidth*1.5, offset:this.gridLineWidth*0.75, fill:false, closePath:false});
                                    }
                                     $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, b, pos, e, pos, {strokeStyle:axis.borderColor});
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
                t = null;
            }
            axis = null;
            ticks = null;
        }
        // Now draw grid lines for additional y axes
        ax = ['y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];
        for (var i=7; i>0; i--) {
            var axis = axes[ax[i-1]];
            var ticks = axis._ticks;
            if (axis.show) {
                var tn = ticks[axis.numberTicks-1];
                var t0 = ticks[0];
                var left = axis.getLeft();
                var points = [[left, tn.getTop() + tn.getHeight()/2], [left, t0.getTop() + t0.getHeight()/2 + 1.0]];
                // draw the shadow
                if (this.shadow) {
                    this.renderer.shadowRenderer.draw(ctx, points, {lineCap:'butt', fill:false, closePath:false});
                }
                // draw the line
                 $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, points[0][0], points[0][1], points[1][0], points[1][1], {lineCap:'butt', strokeStyle:axis.borderColor, lineWidth:axis.borderWidth});
                // draw the tick marks
                for (var j=ticks.length; j>0; j--) {
                    var t = ticks[j-1];
                    s = t.markSize;
                    m = t.mark;
                    var pos = Math.round(axis.u2p(t.value)) + 0.5;
                    if (t.showMark && t.mark) {
                        switch (m) {
                            case 'outside':
                                b = left;
                                e = left+s;
                                break;
                            case 'inside':
                                b = left-s;
                                e = left;
                                break;
                            case 'cross':
                                b = left-s;
                                e = left+s;
                                break;
                            default:
                                b = left;
                                e = left+s;
                                break;
                        }
                        points = [[b,pos], [e,pos]];
                        // draw the shadow
                        if (this.shadow) {
                            this.renderer.shadowRenderer.draw(ctx, points, {lineCap:'butt', lineWidth:this.gridLineWidth*1.5, offset:this.gridLineWidth*0.75, fill:false, closePath:false});
                        }
                        // draw the line
                         $.jqplot.CanvasGridRenderer.prototype.drawLine(ctx, b, pos, e, pos, {strokeStyle:axis.borderColor});
                    }
                    t = null;
                }
                t0 = null;
            }
            axis = null;
            ticks =  null;
        }
        
        ctx.restore();
        
        if (this.shadow) {
            var points = [[this._left, this._bottom], [this._right, this._bottom], [this._right, this._top]];
            this.renderer.shadowRenderer.draw(ctx, points);
        }
        // Now draw border around grid.  Use axis border definitions. start at
        // upper left and go clockwise.
        if (this.borderWidth != 0 && this.drawBorder) {
             $.jqplot.CanvasGridRenderer.prototype.drawLine (ctx, this._left, this._top, this._right, this._top, {lineCap:'round', strokeStyle:axes.x2axis.borderColor, lineWidth:axes.x2axis.borderWidth});
             $.jqplot.CanvasGridRenderer.prototype.drawLine (ctx, this._right, this._top, this._right, this._bottom, {lineCap:'round', strokeStyle:axes.y2axis.borderColor, lineWidth:axes.y2axis.borderWidth});
             $.jqplot.CanvasGridRenderer.prototype.drawLine (ctx, this._right, this._bottom, this._left, this._bottom, {lineCap:'round', strokeStyle:axes.xaxis.borderColor, lineWidth:axes.xaxis.borderWidth});
             $.jqplot.CanvasGridRenderer.prototype.drawLine (ctx, this._left, this._bottom, this._left, this._top, {lineCap:'round', strokeStyle:axes.yaxis.borderColor, lineWidth:axes.yaxis.borderWidth});
        }
        
        ctx.restore();
        ctx =  null;
        ctx = axes = ax = b = e = s = m =  null;
    };
 
    // Class: $.jqplot.DivTitleRenderer
    // The default title renderer for jqPlot.  This class has no options beyond the <Title> class. 
    $.jqplot.DivTitleRenderer = function() {
    };
    
    $.jqplot.DivTitleRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
    };

    $.jqplot.DivTitleRenderer.prototype.destroy = function()
    {
          if (this._elem) {
            tiny.garbageCollect(this._elem, true);
            this._elem.emptyForce();
            this._elem = null;
        }
    }
    
        $.jqplot.DivTitleRenderer.prototype.draw = function(width, plot) {
        // Memory Leaks patch
        if (this._elem) {
            tiny.garbageCollect(this._elem, true);
            this._elem.emptyForce();
            this._elem = null;
        }
        var unitCount = 0;
        var showYAxis = plot.axes['yaxis'].show;
        var showY2Axis = plot.axes['y2axis'].show;
        var yAxisUnitLength = plot.axes['yaxis'].unitLength;
        var y2AxisUnitLength = plot.axes['y2axis'].unitLength;

        var unitYAxis = null;
        var unitY2Axis = null;
        if (plot.axes['yaxis'].tickOptions)
        {
            if (plot.axes['yaxis'].tickOptions.prefix && plot.axes['yaxis'].tickOptions.prefix !== '' && plot.axes['yaxis'].name.charAt(0) === 'y')
            {
                unitYAxis = plot.axes['yaxis'].tickOptions.prefix;
            }
        }
        if (plot.axes['y2axis'].tickOptions)
        {
            if (plot.axes['y2axis'].tickOptions.prefix && plot.axes['y2axis'].tickOptions.prefix !== '' && plot.axes['y2axis'].name.charAt(0) === 'y')
            {
                unitY2Axis = plot.axes['y2axis'].tickOptions.prefix;
            }
        }
        if (showYAxis || showY2Axis)
        {
            unitCount++;
        }
        
        var r = this.renderer;
        var elem = document.createElement('table');
        var trTitile = document.createElement('tr');
        var tdTitile = document.createElement('td');
        this._elem = $(elem);
        this._elem.addClass('jqplot-title');

        if (!this.text && !(showYAxis || showY2Axis)) {
            this.show = false;
            this._elem.height(0);
            this._elem.width(0);
        }
        else if (this.text) {
            var color;
            if (this.color) {
                color = this.color;
            }
            else if (this.textColor) {
                color = this.textColor;
            }

            // don't trust that a stylesheet is present, set the position.
            var styles = {position:'absolute', top:'0px', left:'0px'};
            
            if (this._plotWidth) {
                styles['width'] = this._plotWidth+'px';
            }
            if (this.fontSize) {
                styles['fontSize'] = this.fontSize;
            }
            if (typeof this.textAlign === 'string') {
                styles['textAlign'] = this.textAlign;
            }
            else {
                styles['textAlign'] = 'center';
            }
            if (color) {
                styles['color'] = color;
            }
            if (this.paddingBottom) {
                styles['paddingBottom'] = this.paddingBottom;
            }
            if (this.fontFamily) {
                styles['fontFamily'] = this.fontFamily;
            }

	    styles['margin-bottom'] = "5px";
            this._elem.css(styles);
            
            if (this.escapeHtml) {
                tdTitile.innerText = this.text;
            }
            else {
                tdTitile.innerHTML = this.text;
            }

            trTitile.appendChild(tdTitile);
            elem.appendChild(trTitile);
        }
        else if (showYAxis || showY2Axis)
        {
            var styles = {position:'absolute', top:'0px', left:'0px'};
            
            if (this._plotWidth) {
                styles['width'] = this._plotWidth+'px';
            }
            if (this.paddingBottom) {
                styles['paddingBottom'] = this.paddingBottom;
            }
            styles['margin-bottom'] = "5px";
            this._elem.css(styles);
        }

        
        var yUnit = "";
        var yUnitSpan;
        if (unitYAxis && showYAxis)
        {
            
                var length = unitYAxis.length;
                var i = 0;
                while( i < yAxisUnitLength )
                {
                    yUnit += unitYAxis.charAt(i);
                    i++;
                }
                if (length > yAxisUnitLength)
                {
                    yUnit += "<b><span style='padding-right:2px;padding-left:2px;'>.</span><span style='padding-right:2px;'>.</span>.</b>";
                }
                yUnitSpan = document.createElement('span');
                yUnitSpan.id = 'yUnitSpan';
                yUnitSpan.className = 'UNIT_CLASS';
                yUnitSpan.innerHTML = yUnit;
        }
        var y2Unit = "";
        
        if (unitY2Axis && showY2Axis)
        {
            var length = unitY2Axis.length;
            var i = 0;
            while( i < y2AxisUnitLength )
            {
                y2Unit += unitY2Axis.charAt(i);
                i++;
            }
            if (length > y2AxisUnitLength)
            {
                y2Unit += "<b><span style='padding-right:2px;padding-left:2px;'>.</span><span style='padding-right:2px;'>.</span>.</b>";
            }
            var y2UnitSpan = document.createElement('span');
            y2UnitSpan.id = 'y2UnitSpan';
            y2UnitSpan.className = 'UNIT_CLASS';
            y2UnitSpan.innerHTML = y2Unit;
        }
        
        if (unitCount > 0 && (unitY2Axis || unitYAxis))
        {
            var trUnit = document.createElement('tr');
            trUnit.style.fontSize = "12px";
            while (unitCount > 0)
            {
                if (showYAxis && unitYAxis)
                {
                    var tdUnit = document.createElement('td');
                    this.tdUnit = tdUnit;
                    tdUnit.appendChild(yUnitSpan);
                    tdUnit.style.textAlign = "left";
                    trUnit.appendChild(tdUnit);
                    tdUnit = null;
                }
                if (showY2Axis && unitY2Axis)
                {
                    var tdUnit = document.createElement('td');
                    tdUnit.appendChild(y2UnitSpan);
                    tdUnit.style.textAlign = "right";
                    trUnit.appendChild(tdUnit);
                }
                unitCount--;
            }
            this._elem[0].appendChild(trUnit);
            this.trUnit = trUnit;
            trUnit = null;
        }
        elem = null;
        this.yUnitSpan = yUnitSpan;
        this.y2UnitSpan = y2UnitSpan;
        this.trTitile = trTitile;
        this.tdTitile = tdTitile;
        yUnitSpan = y2UnitSpan = null;
        trTitile = null;
        tdTitile = null;
        return this._elem;
    };

    
    $.jqplot.DivTitleRenderer.prototype.pack = function() {
        // nothing to do here
    };
  

    var dotlen = 0.1;

    $.jqplot.LinePattern = function (ctx, pattern) {

		var defaultLinePatterns = {
			dotted: [ dotlen, $.jqplot.config.dotGapLength ],
			dashed: [ $.jqplot.config.dashLength, $.jqplot.config.gapLength ],
			solid: null
		};   	

        if (typeof pattern === 'string') {
            if (pattern[0] === '.' || pattern[0] === '-') {
                var s = pattern;
                pattern = [];
                for (var i=0, imax=s.length; i<imax; i++) {
                    if (s[i] === '.') {
                        pattern.push( dotlen );
                    }
                    else if (s[i] === '-') {
                        pattern.push( $.jqplot.config.dashLength );
                    }
                    else {
                        continue;
                    }
                    pattern.push( $.jqplot.config.gapLength );
                }
            }
            else {
                pattern = defaultLinePatterns[pattern];
            }
        }

        if (!(pattern && pattern.length)) {
            return ctx;
        }

        var patternIndex = 0;
        var patternDistance = pattern[0];
        var px = 0;
        var py = 0;
        var pathx0 = 0;
        var pathy0 = 0;

        var moveTo = function (x, y) {
            ctx.moveTo( x, y );
            px = x;
            py = y;
            pathx0 = x;
            pathy0 = y;
        };

        var lineTo = function (x, y) {
            var scale = ctx.lineWidth;
            var dx = x - px;
            var dy = y - py;
            var dist = Math.sqrt(dx*dx+dy*dy);
            if ((dist > 0) && (scale > 0)) {
                dx /= dist;
                dy /= dist;
                while (true) {
                    var dp = scale * patternDistance;
                    if (dp < dist) {
                        px += dp * dx;
                        py += dp * dy;
                        if ((patternIndex & 1) == 0) {
                            ctx.lineTo( px, py );
                        }
                        else {
                            ctx.moveTo( px, py );
                        }
                        dist -= dp;
                        patternIndex++;
                        if (patternIndex >= pattern.length) {
                            patternIndex = 0;
                        }
                        patternDistance = pattern[patternIndex];
                    }
                    else {
                        px = x;
                        py = y;
                        if ((patternIndex & 1) == 0) {
                            ctx.lineTo( px, py );
                        }
                        else {
                            ctx.moveTo( px, py );
                        }
                        patternDistance -= dist / scale;
                        break;
                    }
                }
            }
        };

        var beginPath = function () {
            ctx.beginPath();
        };

        var closePath = function () {
            lineTo( pathx0, pathy0 );
        };

        return {
            moveTo: moveTo,
            lineTo: lineTo,
            beginPath: beginPath,
            closePath: closePath
        };
    };

    // Class: $.jqplot.LineRenderer
    // The default line renderer for jqPlot, this class has no options beyond the <Series> class.
    // Draws series as a line.
    $.jqplot.LineRenderer = function(){
        this.shapeRenderer = new $.jqplot.ShapeRenderer();
        this.shadowRenderer = new $.jqplot.ShadowRenderer();
    };
    
    // called with scope of series.
    $.jqplot.LineRenderer.prototype.init = function(options, plot) {
        // Group: Properties

        options = options || {};
        this._type='line';
        this.renderer.animation = {
            show: false,
            direction: 'left',
            speed: 2500,
            _supported: true
        };
        // prop: smooth
        // True to draw a smoothed (interpolated) line through the data points
        // with automatically computed number of smoothing points.
        // Set to an integer number > 2 to specify number of smoothing points
        // to use between each data point.
        this.renderer.smooth = false;  // true or a number > 2 for smoothing.
        this.renderer.tension = null; // null to auto compute or a number typically > 6.  Fewer points requires higher tension.
        // prop: constrainSmoothing
        // True to use a more accurate smoothing algorithm that will
        // not overshoot any data points.  False to allow overshoot but
        // produce a smoother looking line.
        this.renderer.constrainSmoothing = true;
        // this is smoothed data in grid coordinates, like gridData
        this.renderer._smoothedData = [];
        // this is smoothed data in plot units (plot coordinates), like plotData.
        this.renderer._smoothedPlotData = [];
        this.renderer._hiBandGridData = [];
        this.renderer._lowBandGridData = [];
        this.renderer._hiBandSmoothedData = [];
        this.renderer._lowBandSmoothedData = [];

        // prop: bandData
        // Data used to draw error bands or confidence intervals above/below a line.
        //
        // bandData can be input in 3 forms.  jqPlot will figure out which is the
        // low band line and which is the high band line for all forms:
        // 
        // A 2 dimensional array like [[yl1, yl2, ...], [yu1, yu2, ...]] where
        // [yl1, yl2, ...] are y values of the lower line and
        // [yu1, yu2, ...] are y values of the upper line.
        // In this case there must be the same number of y data points as data points
        // in the series and the bands will inherit the x values of the series.
        //
        // A 2 dimensional array like [[[xl1, yl1], [xl2, yl2], ...], [[xh1, yh1], [xh2, yh2], ...]]
        // where [xl1, yl1] are x,y data points for the lower line and
        // [xh1, yh1] are x,y data points for the high line.
        // x values do not have to correspond to the x values of the series and can
        // be of any arbitrary length.
        //
        // Can be of form [[yl1, yu1], [yl2, yu2], [yl3, yu3], ...] where
        // there must be 3 or more arrays and there must be the same number of arrays
        // as there are data points in the series.  In this case, 
        // [yl1, yu1] specifies the lower and upper y values for the 1st
        // data point and so on.  The bands will inherit the x
        // values from the series.
        this.renderer.bandData = [];

        // Group: bands
        // Banding around line, e.g error bands or confidence intervals.
        this.renderer.bands = {
            // prop: show
            // true to show the bands.  If bandData or interval is
            // supplied, show will be set to true by default.
            show: false,
            hiData: [],
            lowData: [],
            // prop: color
            // color of lines at top and bottom of bands [default: series color].
            color: this.color,
            // prop: showLines
            // True to show lines at top and bottom of bands [default: false].
            showLines: false,
            // prop: fill
            // True to fill area between bands [default: true].
            fill: true,
            // prop: fillColor
            // css color spec for filled area.  [default: series color].
            fillColor: null,
            _min: null,
            _max: null,
            // prop: interval
            // User specified interval above and below line for bands [default: '3%''].
            // Can be a value like 3 or a string like '3%' 
            // or an upper/lower array like [1, -2] or ['2%', '-1.5%']
            interval: '3%'
        };


        var lopts = {highlightMouseOver: options.highlightMouseOver, highlightMouseDown: options.highlightMouseDown, highlightColor: options.highlightColor};
        
        delete (options.highlightMouseOver);
        delete (options.highlightMouseDown);
        delete (options.highlightColor);
        
        $.extend(true, this.renderer, options);

        this.renderer.options = options;

        // if we are given some band data, and bands aren't explicity set to false in options, turn them on.
        if (this.renderer.bandData.length > 1 && (!options.bands || options.bands.show == null)) {
            this.renderer.bands.show = true;
        }

        // if we are given an interval, and bands aren't explicity set to false in options, turn them on.
        else if (options.bands && options.bands.show == null && options.bands.interval != null) {
            this.renderer.bands.show = true;
        }

        // if plot is filled, turn off bands.
        if (this.fill) {
            this.renderer.bands.show = false;
        }

        if (this.renderer.bands.show) {
            this.renderer.initBands.call(this, this.renderer.options, plot);
        }


        // smoothing is not compatible with stacked lines, disable
        if (this._stack) {
            this.renderer.smooth = false;
        }

        // set the shape renderer options
        var opts = {lineJoin:this.lineJoin, lineCap:this.lineCap, fill:this.fill, isarc:false, strokeStyle:this.color, fillStyle:this.fillColor, lineWidth:this.lineWidth, linePattern:this.linePattern, closePath:this.fill};
        this.renderer.shapeRenderer.init(opts);

        var shadow_offset = options.shadowOffset;
        // set the shadow renderer options
        if (shadow_offset == null) {
            // scale the shadowOffset to the width of the line.
            if (this.lineWidth > 2.5) {
                shadow_offset = 1.25 * (1 + (Math.atan((this.lineWidth/2.5))/0.785398163 - 1)*0.6);
            }
            // for skinny lines, don't make such a big shadow.
            else {
                shadow_offset = 1.25 * Math.atan((this.lineWidth/2.5))/0.785398163;
            }
        }
        
        var sopts = {lineJoin:this.lineJoin, lineCap:this.lineCap, fill:this.fill, isarc:false, angle:this.shadowAngle, offset:shadow_offset, alpha:this.shadowAlpha, depth:this.shadowDepth, lineWidth:this.lineWidth, linePattern:this.linePattern, closePath:this.fill};
        this.renderer.shadowRenderer.init(sopts);
        this._areaPoints = [];
        this._boundingBox = [[],[]];
        
        if (!this.isTrendline && this.fill || this.renderer.bands.show) {
            // Group: Properties
            //        
            // prop: highlightMouseOver
            // True to highlight area on a filled plot when moused over.
            // This must be false to enable highlightMouseDown to highlight when clicking on an area on a filled plot.
            this.highlightMouseOver = true;
            // prop: highlightMouseDown
            // True to highlight when a mouse button is pressed over an area on a filled plot.
            // This will be disabled if highlightMouseOver is true.
            this.highlightMouseDown = false;
            // prop: highlightColor
            // color to use when highlighting an area on a filled plot.
            this.highlightColor = null;
            // if user has passed in highlightMouseDown option and not set highlightMouseOver, disable highlightMouseOver
            if (lopts.highlightMouseDown && lopts.highlightMouseOver == null) {
                lopts.highlightMouseOver = false;
            }
        
            $.extend(true, this, {highlightMouseOver: lopts.highlightMouseOver, highlightMouseDown: lopts.highlightMouseDown, highlightColor: lopts.highlightColor});
            
            if (!this.highlightColor) {
                var fc = (this.renderer.bands.show) ? this.renderer.bands.fillColor : this.fillColor;
                this.highlightColor = $.jqplot.computeHighlightColors(fc);
            }
            // turn off (disable) the highlighter plugin
            if (this.highlighter) {
                this.highlighter.show = false;
            }
        }
        
        if (!this.isTrendline && plot) {
            plot.plugins.lineRenderer = {};
            plot.postInitHooks.addOnce(postInit);
            plot.postDrawHooks.addOnce(postPlotDraw);
            plot.eventListenerHooks.addOnce('jqplotMouseMove', handleMove);
            plot.eventListenerHooks.addOnce('jqplotMouseDown', handleMouseDown);
            plot.eventListenerHooks.addOnce('jqplotMouseUp', handleMouseUp);
            plot.eventListenerHooks.addOnce('jqplotClick', handleClick);
            plot.eventListenerHooks.addOnce('jqplotRightClick', handleRightClick);
        }

    };

    $.jqplot.LineRenderer.prototype.initBands = function(options, plot) {
        var bd = options.bandData || [];
        var bands = this.renderer.bands;
        bands.hiData = [];
        bands.lowData = [];
        var data = this.data;
        bands._max = null;
        bands._min = null;
        // If 2 arrays, and each array greater than 2 elements, assume it is hi and low data bands of y values.
        if (bd.length == 2) {
            // Do we have an array of x,y values?
            // like [[[1,1], [2,4], [3,3]], [[1,3], [2,6], [3,5]]]
            if ($.isArray(bd[0][0])) {
                // since an arbitrary array of points, spin through all of them to determine max and min lines.

                var p;
                var bdminidx = 0, bdmaxidx = 0;
                for (var i = 0, l = bd[0].length; i<l; i++) {
                    p = bd[0][i];
                    if ((p[1] != null && p[1] > bands._max) || bands._max == null) {
                        bands._max = p[1];
                    }
                    if ((p[1] != null && p[1] < bands._min) || bands._min == null) {
                        bands._min = p[1];
                    }
                }
                for (var i = 0, l = bd[1].length; i<l; i++) {
                    p = bd[1][i];
                    if ((p[1] != null && p[1] > bands._max) || bands._max == null) {
                        bands._max = p[1];
                        bdmaxidx = 1;
                    }
                    if ((p[1] != null && p[1] < bands._min) || bands._min == null) {
                        bands._min = p[1];
                        bdminidx = 1;
                    }
                }

                if (bdmaxidx === bdminidx) {
                    bands.show = false;
                }

                bands.hiData = bd[bdmaxidx];
                bands.lowData = bd[bdminidx];
            }
            // else data is arrays of y values
            // like [[1,4,3], [3,6,5]]
            // must have same number of band data points as points in series
            else if (bd[0].length === data.length && bd[1].length === data.length) {
                var hi = (bd[0][0] > bd[1][0]) ? 0 : 1;
                var low = (hi) ? 0 : 1;
                for (var i=0, l=data.length; i < l; i++) {
                    bands.hiData.push([data[i][0], bd[hi][i]]);
                    bands.lowData.push([data[i][0], bd[low][i]]);
                }
            }

            // we don't have proper data array, don't show bands.
            else {
                bands.show = false;
            }
        }

        // if more than 2 arrays, have arrays of [ylow, yhi] values.
        // note, can't distinguish case of [[ylow, yhi], [ylow, yhi]] from [[ylow, ylow], [yhi, yhi]]
        // this is assumed to be of the latter form.
        else if (bd.length > 2 && !$.isArray(bd[0][0])) {
            var hi = (bd[0][0] > bd[0][1]) ? 0 : 1;
            var low = (hi) ? 0 : 1;
            for (var i=0, l=bd.length; i<l; i++) {
                bands.hiData.push([data[i][0], bd[i][hi]]);
                bands.lowData.push([data[i][0], bd[i][low]]);
            }
        }

        // don't have proper data, auto calculate
        else {
            var intrv = bands.interval;
            var a = null;
            var b = null;
            var afunc = null;
            var bfunc = null;

            if ($.isArray(intrv)) {
                a = intrv[0];
                b = intrv[1];
            }
            else {
                a = intrv;
            }

            if (isNaN(a)) {
                // we have a string
                if (a.charAt(a.length - 1) === '%') {
                    afunc = 'multiply';
                    a = parseFloat(a)/100 + 1;
                }
            }

            else {
                a = parseFloat(a);
                afunc = 'add';
            }

            if (b !== null && isNaN(b)) {
                // we have a string
                if (b.charAt(b.length - 1) === '%') {
                    bfunc = 'multiply';
                    b = parseFloat(b)/100 + 1;
                }
            }

            else if (b !== null) {
                b = parseFloat(b);
                bfunc = 'add';
            }

            if (a !== null) {
                if (b === null) {
                    b = -a;
                    bfunc = afunc;
                    if (bfunc === 'multiply') {
                        b += 2;
                    }
                }

                // make sure a always applies to hi band.
                if (a < b) {
                    var temp = a;
                    a = b;
                    b = temp;
                    temp = afunc;
                    afunc = bfunc;
                    bfunc = temp;
                }

                for (var i=0, l = data.length; i < l; i++) {
                    switch (afunc) {
                        case 'add':
                            bands.hiData.push([data[i][0], data[i][1] + a]);
                            break;
                        case 'multiply':
                            bands.hiData.push([data[i][0], data[i][1] * a]);
                            break;
                    }
                    switch (bfunc) {
                        case 'add':
                            bands.lowData.push([data[i][0], data[i][1] + b]);
                            break;
                        case 'multiply':
                            bands.lowData.push([data[i][0], data[i][1] * b]);
                            break;
                    }
                }
            }

            else {
                bands.show = false;
            }
        }

        var hd = bands.hiData;
        var ld = bands.lowData;
        for (var i = 0, l = hd.length; i<l; i++) {
            if ((hd[i][1] != null && hd[i][1] > bands._max) || bands._max == null) {
                bands._max = hd[i][1];
            }
        }
        for (var i = 0, l = ld.length; i<l; i++) {
            if ((ld[i][1] != null && ld[i][1] < bands._min) || bands._min == null) {
                bands._min = ld[i][1];
            }
        }


        if (bands.fillColor === null) {
            var c = $.jqplot.getColorComponents(bands.color);
            // now adjust alpha to differentiate fill
            c[3] = c[3] * 0.5;
            bands.fillColor = 'rgba(' + c[0] +', '+ c[1] +', '+ c[2] +', '+ c[3] + ')';
        }
    };

    function getSteps (d, f) {
        return (3.4182054+f) * Math.pow(d, -0.3534992);
    }

    function computeSteps (d1, d2) {
        var s = Math.sqrt(Math.pow((d2[0]- d1[0]), 2) + Math.pow ((d2[1] - d1[1]), 2));
        return 5.7648 * Math.log(s) + 7.4456;
    }

    function tanh (x) {
        var a = (Math.exp(2*x) - 1) / (Math.exp(2*x) + 1);
        return a;
    }

    //////////
    // computeConstrainedSmoothedData
    // An implementation of the constrained cubic spline interpolation
    //
    // The implementation below borrows heavily from the sample Visual Basic
    // implementation by CJC Kruger found in http://www.korf.co.uk/spline.xls

    /////////

    // called with scope of series
    function computeConstrainedSmoothedData (gd, canvasWidth) {
        var smooth = this.renderer.smooth;
        var dim = canvasWidth || this.canvas.getWidth();
        var xp = this._xaxis.series_p2u;
        var yp = this._yaxis.series_p2u; 
        var steps =null;
        var _steps = null;
        var dist = gd.length/dim;
        var _smoothedData = [];
        var _smoothedPlotData = [];

        if (!isNaN(parseFloat(smooth))) {
            steps = parseFloat(smooth);
        }
        else {
            steps = getSteps(dist, 0.5);
        }

        var yy = [];
        var xx = [];

        for (var i=0, l = gd.length; i<l; i++) {
            yy.push(gd[i][1]);
            xx.push(gd[i][0]);
        }

        function dxx(x1, x0) {
            if (x1 - x0 == 0) {
                return Math.pow(10,10);
            }
            else {
                return x1 - x0;
            }
        }

        var A, B, C, D;
        // loop through each line segment.  Have # points - 1 line segments.  Nmber segments starting at 1.
        var nmax = gd.length - 1;
        for (var num = 1, gdl = gd.length; num<gdl; num++) {
            var gxx = [];
            var ggxx = [];
            // point at each end of segment.
            for (var j = 0; j < 2; j++) {
                var i = num - 1 + j; // point number, 0 to # points.

                if (i == 0 || i == nmax) {
                    gxx[j] = Math.pow(10, 10);
                }
                else if (yy[i+1] - yy[i] == 0 || yy[i] - yy[i-1] == 0) {
                    gxx[j] = 0;
                }
                else if (((xx[i+1] - xx[i]) / (yy[i+1] - yy[i]) + (xx[i] - xx[i-1]) / (yy[i] - yy[i-1])) == 0 ) {
                    gxx[j] = 0;
                }
                else if ( (yy[i+1] - yy[i]) * (yy[i] - yy[i-1]) < 0 ) {
                    gxx[j] = 0;
                }

                else {
                    gxx[j] = 2 / (dxx(xx[i + 1], xx[i]) / (yy[i + 1] - yy[i]) + dxx(xx[i], xx[i - 1]) / (yy[i] - yy[i - 1]));
                }
            }

            // Reset first derivative (slope) at first and last point
            if (num == 1) {
                // First point has 0 2nd derivative
                gxx[0] = 3 / 2 * (yy[1] - yy[0]) / dxx(xx[1], xx[0]) - gxx[1] / 2;
            }
            else if (num == nmax) {
                // Last point has 0 2nd derivative
                gxx[1] = 3 / 2 * (yy[nmax] - yy[nmax - 1]) / dxx(xx[nmax], xx[nmax - 1]) - gxx[0] / 2;
            }   

            // Calc second derivative at points
            ggxx[0] = -2 * (gxx[1] + 2 * gxx[0]) / dxx(xx[num], xx[num - 1]) + 6 * (yy[num] - yy[num - 1]) / Math.pow(dxx(xx[num], xx[num - 1]), 2);
            ggxx[1] = 2 * (2 * gxx[1] + gxx[0]) / dxx(xx[num], xx[num - 1]) - 6 * (yy[num] - yy[num - 1]) / Math.pow(dxx(xx[num], xx[num - 1]), 2);

            // Calc constants for cubic interpolation
            D = 1 / 6 * (ggxx[1] - ggxx[0]) / dxx(xx[num], xx[num - 1]);
            C = 1 / 2 * (xx[num] * ggxx[0] - xx[num - 1] * ggxx[1]) / dxx(xx[num], xx[num - 1]);
            B = (yy[num] - yy[num - 1] - C * (Math.pow(xx[num], 2) - Math.pow(xx[num - 1], 2)) - D * (Math.pow(xx[num], 3) - Math.pow(xx[num - 1], 3))) / dxx(xx[num], xx[num - 1]);
            A = yy[num - 1] - B * xx[num - 1] - C * Math.pow(xx[num - 1], 2) - D * Math.pow(xx[num - 1], 3);

            var increment = (xx[num] - xx[num - 1]) / steps;
            var temp, tempx;

            for (var j = 0, l = steps; j < l; j++) {
                temp = [];
                tempx = xx[num - 1] + j * increment;
                temp.push(tempx);
                temp.push(A + B * tempx + C * Math.pow(tempx, 2) + D * Math.pow(tempx, 3));
                _smoothedData.push(temp);
                _smoothedPlotData.push([xp(temp[0]), yp(temp[1])]);
            }
        }

        _smoothedData.push(gd[i]);
        _smoothedPlotData.push([xp(gd[i][0]), yp(gd[i][1])]);

        return [_smoothedData, _smoothedPlotData];
    }

    ///////
    // computeHermiteSmoothedData
    // A hermite spline smoothing of the plot data.
    // This implementation is derived from the one posted
    // by krypin on the jqplot-users mailing list:
    //
    // http://groups.google.com/group/jqplot-users/browse_thread/thread/748be6a445723cea?pli=1
    //
    // with a blog post:
    //
    // http://blog.statscollector.com/a-plugin-renderer-for-jqplot-to-draw-a-hermite-spline/
    //
    // and download of the original plugin:
    //
    // http://blog.statscollector.com/wp-content/uploads/2010/02/jqplot.hermiteSplineRenderer.js
    //////////

    // called with scope of series
    function computeHermiteSmoothedData (gd) {
        var smooth = this.renderer.smooth;
        var tension = this.renderer.tension;
        var dim = this.canvas.getWidth();
        var xp = this._xaxis.series_p2u;
        var yp = this._yaxis.series_p2u; 
        var steps =null;
        var _steps = null;
        var a = null;
        var a1 = null;
        var a2 = null;
        var slope = null;
        var slope2 = null;
        var temp = null;
        var t, s, h1, h2, h3, h4;
        var TiX, TiY, Ti1X, Ti1Y;
        var pX, pY, p;
        var sd = [];
        var spd = [];
        var dist = gd.length/dim;
        var min, max, stretch, scale, shift;
        var _smoothedData = [];
        var _smoothedPlotData = [];
        if (!isNaN(parseFloat(smooth))) {
            steps = parseFloat(smooth);
        }
        else {
            steps = getSteps(dist, 0.5);
        }
        if (!isNaN(parseFloat(tension))) {
            tension = parseFloat(tension);
        }

        for (var i=0, l = gd.length-1; i < l; i++) {

            if (tension === null) {
                slope = Math.abs((gd[i+1][1] - gd[i][1]) / (gd[i+1][0] - gd[i][0]));

                min = 0.3;
                max = 0.6;
                stretch = (max - min)/2.0;
                scale = 2.5;
                shift = -1.4;

                temp = slope/scale + shift;

                a1 = stretch * tanh(temp) - stretch * tanh(shift) + min;

                // if have both left and right line segments, will use  minimum tension. 
                if (i > 0) {
                    slope2 = Math.abs((gd[i][1] - gd[i-1][1]) / (gd[i][0] - gd[i-1][0]));
                }
                temp = slope2/scale + shift;

                a2 = stretch * tanh(temp) - stretch * tanh(shift) + min;

                a = (a1 + a2)/2.0;

            }
            else {
                a = tension;
            }
            for (t=0; t < steps; t++) {
                s = t / steps;
                h1 = (1 + 2*s)*Math.pow((1-s),2);
                h2 = s*Math.pow((1-s),2);
                h3 = Math.pow(s,2)*(3-2*s);
                h4 = Math.pow(s,2)*(s-1);     
                
                if (gd[i-1]) {  
                    TiX = a * (gd[i+1][0] - gd[i-1][0]); 
                    TiY = a * (gd[i+1][1] - gd[i-1][1]);
                } else {
                    TiX = a * (gd[i+1][0] - gd[i][0]); 
                    TiY = a * (gd[i+1][1] - gd[i][1]);                                  
                }
                if (gd[i+2]) {  
                    Ti1X = a * (gd[i+2][0] - gd[i][0]); 
                    Ti1Y = a * (gd[i+2][1] - gd[i][1]);
                } else {
                    Ti1X = a * (gd[i+1][0] - gd[i][0]); 
                    Ti1Y = a * (gd[i+1][1] - gd[i][1]);                                 
                }
                
                pX = h1*gd[i][0] + h3*gd[i+1][0] + h2*TiX + h4*Ti1X;
                pY = h1*gd[i][1] + h3*gd[i+1][1] + h2*TiY + h4*Ti1Y;
                p = [pX, pY];

                _smoothedData.push(p);
                _smoothedPlotData.push([xp(pX), yp(pY)]);
            }
        }
        _smoothedData.push(gd[l]);
        _smoothedPlotData.push([xp(gd[l][0]), yp(gd[l][1])]);

        return [_smoothedData, _smoothedPlotData];
    }
    
    // setGridData
    // converts the user data values to grid coordinates and stores them
    // in the gridData array.
    // Called with scope of a series.
    $.jqplot.LineRenderer.prototype.setGridData = function(plot, canWidth) {
        // recalculate the grid data
        var xp = this._xaxis.series_u2p;
        var yp = this._yaxis.series_u2p;
        var data = this._plotData;
        var pdata = this._prevPlotData;
        this.gridData = [];
        this._prevGridData = [];
        this.renderer._smoothedData = [];
        this.renderer._smoothedPlotData = [];
        this.renderer._hiBandGridData = [];
        this.renderer._lowBandGridData = [];
        this.renderer._hiBandSmoothedData = [];
        this.renderer._lowBandSmoothedData = [];
        var bands = this.renderer.bands;
        var hasNull = false;
        
        var grdDt = this.gridData;
        var pgrdDt = this._prevGridData;
        var xaxis = this._xaxis;
        var yaxis = this._yaxis;
        for (var i=0, l=this.data.length; i < l; i++) {
            // if not a line series or if no nulls in data, push the converted point onto the array.
            if (data[i])
            {
                if (data[i][0] != null && data[i][1] != null) {
                    grdDt.push([xp.call(xaxis, data[i][0]), yp.call(yaxis, data[i][1])]);
                }
                // else if there is a null, preserve it.
                else if (data[i][0] == null) {
                    hasNull = true;
                    grdDt.push([null, yp.call(yaxis, data[i][1])]);
                }
                else if (data[i][1] == null) {
                    hasNull = true;
                    grdDt.push([xp.call(xaxis, data[i][0]), null]);
                }
            }
            // if not a line series or if no nulls in data, push the converted point onto the array.
            if (pdata[i] != null && pdata[i][0] != null && pdata[i][1] != null) {
                pgrdDt.push([xp.call(xaxis, pdata[i][0]), yp.call(yaxis, pdata[i][1])]);
            }
            // else if there is a null, preserve it.
            else if (pdata[i] != null && pdata[i][0] == null) {
                pgrdDt.push([null, yp.call(yaxis, pdata[i][1])]);
            }  
            else if (pdata[i] != null && pdata[i][0] != null && pdata[i][1] == null) {
                pgrdDt.push([xp.call(xaxis, pdata[i][0]), null]);
            }
        }

        // don't do smoothing or bands on broken lines.
        if (hasNull) {
            this.renderer.smooth = false;
            if (this._type === 'line') {
                bands.show = false;
            }
        }

        if (this._type === 'line' && bands.show) {
            for (var i=0, l=bands.hiData.length; i<l; i++) {
                this.renderer._hiBandGridData.push([xp.call(this._xaxis, bands.hiData[i][0]), yp.call(this._yaxis, bands.hiData[i][1])]);
            }
            for (var i=0, l=bands.lowData.length; i<l; i++) {
                this.renderer._lowBandGridData.push([xp.call(this._xaxis, bands.lowData[i][0]), yp.call(this._yaxis, bands.lowData[i][1])]);
            }
        }

        // calculate smoothed data if enough points and no nulls
        if (this._type === 'line' && this.renderer.smooth && this.gridData.length > 2) {
            var ret;
            if (this.renderer.constrainSmoothing) {
                ret = computeConstrainedSmoothedData.call(this, this.gridData, canWidth);
                this.renderer._smoothedData = ret[0];
                this.renderer._smoothedPlotData = ret[1];

                if (bands.show) {
                    ret = computeConstrainedSmoothedData.call(this, this.renderer._hiBandGridData, canWidth);
                    this.renderer._hiBandSmoothedData = ret[0];
                    ret = computeConstrainedSmoothedData.call(this, this.renderer._lowBandGridData, canWidth);
                    this.renderer._lowBandSmoothedData = ret[0];
                }

                ret = null;
            }
            else {
                ret = computeHermiteSmoothedData.call(this, this.gridData);
                this.renderer._smoothedData = ret[0];
                this.renderer._smoothedPlotData = ret[1];

                if (bands.show) {
                    ret = computeHermiteSmoothedData.call(this, this.renderer._hiBandGridData);
                    this.renderer._hiBandSmoothedData = ret[0];
                    ret = computeHermiteSmoothedData.call(this, this.renderer._lowBandGridData);
                    this.renderer._lowBandSmoothedData = ret[0];
                }

                ret = null;
            }
        }
    };
    
    // makeGridData
    // converts any arbitrary data values to grid coordinates and
    // returns them.  This method exists so that plugins can use a series'
    // linerenderer to generate grid data points without overwriting the
    // grid data associated with that series.
    // Called with scope of a series.
    $.jqplot.LineRenderer.prototype.makeGridData = function(data, plot, canWidth) {
        // recalculate the grid data
        var xp = this._xaxis.series_u2p;
        var yp = this._yaxis.series_u2p;
        var gd = [];
        var pgd = [];
        this.renderer._smoothedData = [];
        this.renderer._smoothedPlotData = [];
        this.renderer._hiBandGridData = [];
        this.renderer._lowBandGridData = [];
        this.renderer._hiBandSmoothedData = [];
        this.renderer._lowBandSmoothedData = [];
        var bands = this.renderer.bands;
        var hasNull = false;
        for (var i=0; i<data.length; i++) {
            // if not a line series or if no nulls in data, push the converted point onto the array.
            if (data[i][0] != null && data[i][1] != null) {
                gd.push([xp.call(this._xaxis, data[i][0]), yp.call(this._yaxis, data[i][1])]);
            }
            // else if there is a null, preserve it.
            else if (data[i][0] == null) {
                hasNull = true;
                gd.push([null, yp.call(this._yaxis, data[i][1])]);
            }
            else if (data[i][1] == null) {
                hasNull = true;
                gd.push([xp.call(this._xaxis, data[i][0]), null]);
            }
        }

        // don't do smoothing or bands on broken lines.
        if (hasNull) {
            this.renderer.smooth = false;
            if (this._type === 'line') {
                bands.show = false;
            }
        }

        if (this._type === 'line' && bands.show) {
            for (var i=0, l=bands.hiData.length; i<l; i++) {
                this.renderer._hiBandGridData.push([xp.call(this._xaxis, bands.hiData[i][0]), yp.call(this._yaxis, bands.hiData[i][1])]);
            }
            for (var i=0, l=bands.lowData.length; i<l; i++) {
                this.renderer._lowBandGridData.push([xp.call(this._xaxis, bands.lowData[i][0]), yp.call(this._yaxis, bands.lowData[i][1])]);
            }
        }

        if (this._type === 'line' && this.renderer.smooth && gd.length > 2) {
            var ret;
            if (this.renderer.constrainSmoothing) {
                ret = computeConstrainedSmoothedData.call(this, gd, canWidth);
                this.renderer._smoothedData = ret[0];
                this.renderer._smoothedPlotData = ret[1];

                if (bands.show) {
                    ret = computeConstrainedSmoothedData.call(this, this.renderer._hiBandGridData, canWidth);
                    this.renderer._hiBandSmoothedData = ret[0];
                    ret = computeConstrainedSmoothedData.call(this, this.renderer._lowBandGridData, canWidth);
                    this.renderer._lowBandSmoothedData = ret[0];
                }

                ret = null;
            }
            else {
                ret = computeHermiteSmoothedData.call(this, gd);
                this.renderer._smoothedData = ret[0];
                this.renderer._smoothedPlotData = ret[1];

                if (bands.show) {
                    ret = computeHermiteSmoothedData.call(this, this.renderer._hiBandGridData);
                    this.renderer._hiBandSmoothedData = ret[0];
                    ret = computeHermiteSmoothedData.call(this, this.renderer._lowBandGridData);
                    this.renderer._lowBandSmoothedData = ret[0];
                }

                ret = null;
            }
        }
        return gd;
    };
    

    // called within scope of series.
    $.jqplot.LineRenderer.prototype.draw = function(ctx, gd, options, plot) {
        var i;
        // get a copy of the options, so we don't modify the original object.
        var opts = $.extend(true, {}, options);
        var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;
        var showLine = (opts.showLine != undefined) ? opts.showLine : this.showLine;
        var fill = (opts.fill != undefined) ? opts.fill : this.fill;
        var fillAndStroke = (opts.fillAndStroke != undefined) ? opts.fillAndStroke : this.fillAndStroke;
        var xmin, ymin, xmax, ymax;
        ctx.save();
        if (gd.length) {
            if (showLine) {
			     if (this.markerRenderer.show) {
							if (this._type === 'line' && this.markerRenderer.style==='circle')
							{
								if(!opts.markerOptions)
								{
									opts.markerOptions ={};
								}
								opts.markerOptions.tinyCircleStyle='white';
							}
			    }
                // if we fill, we'll have to add points to close the curve.
				if (fill) {
					if (fillAndStroke) {
					//Line width for area
					opts.lineWidth = 2.0;
					}
                    if (this.fillToZero) { 
                        // have to break line up into shapes at axis crossings
                        var negativeColor = this.negativeColor;
                        if (! this.useNegativeColors) {
                            negativeColor = opts.fillStyle;
                        }
                        var isnegative = false;
                        var posfs = opts.fillStyle;
                    
                        // if stoking line as well as filling, get a copy of line data.
                        if (fillAndStroke) {
                            var fasgd = gd.slice(0);
                        }
                        // if not stacked, fill down to axis
                        if (this.index == 0 || !this._stack) {
                        
                            var tempgd = [];
                            var pd = (this.renderer.smooth) ? this.renderer._smoothedPlotData : this._plotData;
                            this._areaPoints = [];
                            var pyzero = this._yaxis.series_u2p(this.fillToValue);
                            var pxzero = this._xaxis.series_u2p(this.fillToValue);

                            opts.closePath = true;
                            
                            if (this.fillAxis == 'y') {
                                tempgd.push([gd[0][0], pyzero]);
                                this._areaPoints.push([gd[0][0], pyzero]);
                                
                                for (var i=0; i<gd.length-1; i++) {
                                    tempgd.push(gd[i]);
                                    this._areaPoints.push(gd[i]);
                                    // do we have an axis crossing?
                                    if (pd[i][1] * pd[i+1][1] < 0) {
                                        if (pd[i][1] < 0) {
                                            isnegative = true;
                                            opts.fillStyle = negativeColor;
                                        }
                                        else {
                                            isnegative = false;
                                            opts.fillStyle = posfs;
                                        }
                                        
                                        var xintercept = gd[i][0] + (gd[i+1][0] - gd[i][0]) * (pyzero-gd[i][1])/(gd[i+1][1] - gd[i][1]);
                                        tempgd.push([xintercept, pyzero]);
                                        this._areaPoints.push([xintercept, pyzero]);
                                        // now draw this shape and shadow.
                                        if (shadow) {
                                            this.renderer.shadowRenderer.draw(ctx, tempgd, opts);
                                        }
                                        this.renderer.shapeRenderer.draw(ctx, tempgd, opts);
                                        // now empty temp array and continue
                                        tempgd = [[xintercept, pyzero]];
                                    }   
                                }
                                if (pd[gd.length-1][1] < 0) {
                                    isnegative = true;
                                    opts.fillStyle = negativeColor;
                                }
                                else {
                                    isnegative = false;
                                    opts.fillStyle = posfs;
                                }
                                tempgd.push(gd[gd.length-1]);
                                this._areaPoints.push(gd[gd.length-1]);
                                tempgd.push([gd[gd.length-1][0], pyzero]); 
                                this._areaPoints.push([gd[gd.length-1][0], pyzero]); 
                            }
                            // now draw the last area.
                            if (shadow) {
                                this.renderer.shadowRenderer.draw(ctx, tempgd, opts);
                            }
                            this.renderer.shapeRenderer.draw(ctx, tempgd, opts);
                            
                            
                        }
                        // if stacked, fill to line below 
                        else {
                            var prev = this._prevGridData;
                            for (var i=prev.length; i>0; i--) {
                                gd.push(prev[i-1]);
                            }
                            if (shadow) {
                                this.renderer.shadowRenderer.draw(ctx, gd, opts);
                            }
                            this._areaPoints = gd;
                            this.renderer.shapeRenderer.draw(ctx, gd, opts);
                        }
                    }
                    /////////////////////////
                    // Not filled to zero
                    ////////////////////////
                    else {                    
                        // if stoking line as well as filling, get a copy of line data.
                        if (fillAndStroke) {
                            var fasgd = gd.slice(0);
                        }
                        // if not stacked, fill down to axis
                        if (this.index == 0 || !this._stack) {
                            var gridymin = ctx.canvas.height;
                            // IE doesn't return new length on unshift
                            gd.unshift([gd[0][0], gridymin]);
                            var len = gd.length;
                            gd.push([gd[len - 1][0], gridymin]);                   
                        }
                        // if stacked, fill to line below 
                        else {
                            var prev = this._prevGridData;
                            for (var i=prev.length; i>0; i--) {
                                gd.push(prev[i-1]);
                            }
                        }
                        this._areaPoints = gd;
                        
                        if (shadow) {
                            this.renderer.shadowRenderer.draw(ctx, gd, opts);
                        }
            
                        this.renderer.shapeRenderer.draw(ctx, gd, opts);                        
                    }
                    if (fillAndStroke) {
                        var fasopts = $.extend(true, {}, opts, {fill:false, closePath:false});
                        this.renderer.shapeRenderer.draw(ctx, fasgd, fasopts);
                        // now draw the markers
                        if (this.markerRenderer.show) {
                            if (this.renderer.smooth) {
                                fasgd = this.gridData;
                            }
                            for (i=0; i<fasgd.length; i++) {
							   
                                this.markerRenderer.draw(fasgd[i][0], fasgd[i][1], ctx, opts.markerOptions);
                            }
                        }
                    }
                }
                else {

                    if (this.renderer.bands.show) {
                        var bdat;
                        var bopts = $.extend(true, {}, opts);
                        if (this.renderer.bands.showLines) {
                            bdat = (this.renderer.smooth) ? this.renderer._hiBandSmoothedData : this.renderer._hiBandGridData;
                            this.renderer.shapeRenderer.draw(ctx, bdat, opts);
                            bdat = (this.renderer.smooth) ? this.renderer._lowBandSmoothedData : this.renderer._lowBandGridData;
                            this.renderer.shapeRenderer.draw(ctx, bdat, bopts);
                        }

                        if (this.renderer.bands.fill) {
                            if (this.renderer.smooth) {
                                bdat = this.renderer._hiBandSmoothedData.concat(this.renderer._lowBandSmoothedData.reverse());
                            }
                            else {
                                bdat = this.renderer._hiBandGridData.concat(this.renderer._lowBandGridData.reverse());
                            }
                            this._areaPoints = bdat;
                            bopts.closePath = true;
                            bopts.fill = true;
                            bopts.fillStyle = this.renderer.bands.fillColor;
                            this.renderer.shapeRenderer.draw(ctx, bdat, bopts);
                        }
                    }

                    if (shadow) {
                        this.renderer.shadowRenderer.draw(ctx, gd, opts);
                    }
    
                    this.renderer.shapeRenderer.draw(ctx, gd, opts);
                }
            }
            // calculate the bounding box
            var xmin = xmax = ymin = ymax = null;
            for (i=0; i<this._areaPoints.length; i++) {
                var p = this._areaPoints[i];
                if (xmin > p[0] || xmin == null) {
                    xmin = p[0];
                }
                if (ymax < p[1] || ymax == null) {
                    ymax = p[1];
                }
                if (xmax < p[0] || xmax == null) {
                    xmax = p[0];
                }
                if (ymin > p[1] || ymin == null) {
                    ymin = p[1];
                }
            }

            if (this.type === 'line' && this.renderer.bands.show) {
                ymax = this._yaxis.series_u2p(this.renderer.bands._min);
                ymin = this._yaxis.series_u2p(this.renderer.bands._max);
            }

            this._boundingBox = [[xmin, ymax], [xmax, ymin]];
        
            // now draw the markers
            if (this.markerRenderer.show && !fill) {
			
                if (this.renderer.smooth) {
                    gd = this.gridData;
                }
                
                if (!opts.markerOptions)
				{
					opts.markerOptions ={};
				}
                opts.markerOptions.isBigData = plot.options.isBigData;
                opts.markerOptions.isHideDataPt = plot.options.hidePoints; 
		if (gd.length == 1)
		{
			opts.markerOptions.isHideDataPt = false; 
		}
                for (i=0; i<gd.length; i++) {
                    if (gd[i][0] != null && gd[i][1] != null) {
                        this.markerRenderer.draw(gd[i][0], gd[i][1], ctx, opts.markerOptions);
                    }
                }
            }
        }
        
        ctx.restore();
    };  
    
    $.jqplot.LineRenderer.prototype.drawShadow = function(ctx, gd, options) {
        // This is a no-op, shadows drawn with lines.
    };
    
    // called with scope of plot.
    // make sure to not leave anything highlighted.
    function postInit(target, data, options) {
        for (var i=0; i<this.series.length; i++) {
            if (this.series[i].renderer.constructor == $.jqplot.LineRenderer) {
                // don't allow mouseover and mousedown at same time.
                if (this.series[i].highlightMouseOver) {
                    this.series[i].highlightMouseDown = false;
                }
            }
        }
    }  
    
    // called within context of plot
    // create a canvas which we can draw on.
    // insert it before the eventCanvas, so eventCanvas will still capture events.
    function postPlotDraw() {
        // Memory Leaks patch    
        if (this.plugins.lineRenderer && this.plugins.lineRenderer.highlightCanvas) {
          this.plugins.lineRenderer.highlightCanvas.resetCanvas();
          this.plugins.lineRenderer.highlightCanvas = null;
        }
        
        this.plugins.lineRenderer.highlightedSeriesIndex = null;
        this.plugins.lineRenderer.highlightCanvas = new $.jqplot.GenericCanvas();
        
        this.eventCanvas._elem.before(this.plugins.lineRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-lineRenderer-highlight-canvas', this._plotDimensions, this));
        this.plugins.lineRenderer.highlightCanvas.setContext();
        this.eventCanvas._elem.bind('mouseleave', {plot:this}, function (ev) {
            if(ev.data.plot.plugins.highlighter &&  ev.data.plot.plugins.highlighter.highlightCanvas)
            {
                var highLightCan = ev.data.plot.plugins.highlighter.highlightCanvas;
                highLightCan._ctx.clearRect(0,0, highLightCan._ctx.canvas.width, highLightCan._ctx.canvas.height);
            }
            unhighlight(ev.data.plot); });
    } 
    
    function highlight (plot, sidx, pidx, points) {
        var s = plot.series[sidx];
        var canvas = plot.plugins.lineRenderer.highlightCanvas;
        canvas._ctx.clearRect(0,0,canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        s._highlightedPoint = pidx;
        plot.plugins.lineRenderer.highlightedSeriesIndex = sidx;
        var opts = {fillStyle: s.highlightColor};
        if (s.type === 'line' && s.renderer.bands.show) {
            opts.fill = true;
            opts.closePath = true;
        }
        s.renderer.shapeRenderer.draw(canvas._ctx, points, opts);
        canvas = null;
        s = plot = sidx = pidx = points = null;
    }
    
    function unhighlight (plot) {
        var allnull = true;
        for (var i=0; i<plot.series.length; i++) {
            allnull = allnull && plot.series[i]._highlightedPoint == null;
        }
        if (allnull)
        {
            return;
        }
        var canvas = plot.plugins.lineRenderer.highlightCanvas;
        canvas._ctx.clearRect(0,0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        for (var i=0; i<plot.series.length; i++) {
            plot.series[i]._highlightedPoint = null;
        }
        plot.plugins.lineRenderer.highlightedSeriesIndex = null;
        plot.target.trigger('jqplotDataUnhighlight');
        canvas = null;
        plot = null;
    }
    
    
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var evt1 = jQuery.Event('jqplotDataMouseOver');
            evt1.pageX = ev.pageX;
            evt1.pageY = ev.pageY;
            plot.target.trigger(evt1, ins);
            if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.lineRenderer.highlightedSeriesIndex)) {
                var evt = jQuery.Event('jqplotDataHighlight');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                plot.target.trigger(evt, ins);
                highlight (plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
        neighbor = ev = gridpos = datapos = neighbor = plot = null ;
    }
    
    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            if (plot.series[ins[0]].highlightMouseDown && !(ins[0] == plot.plugins.lineRenderer.highlightedSeriesIndex)) {
                var evt = jQuery.Event('jqplotDataHighlight');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                plot.target.trigger(evt, ins);
                highlight (plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
    }
    
    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {
        var idx = plot.plugins.lineRenderer.highlightedSeriesIndex;
        if (idx != null && plot.series[idx].highlightMouseDown) {
            unhighlight(plot);
        }
    }
    
    function handleClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var evt = jQuery.Event('jqplotDataClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            plot.target.trigger(evt, ins);
        }
    }
    
    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var idx = plot.plugins.lineRenderer.highlightedSeriesIndex;
            if (idx != null && plot.series[idx].highlightMouseDown) {
                unhighlight(plot);
            }
            var evt = jQuery.Event('jqplotDataRightClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            plot.target.trigger(evt, ins);
        }
    }
    
    
    // class: $.jqplot.LinearAxisRenderer
    // The default jqPlot axis renderer, creating a numeric axis.
    $.jqplot.LinearAxisRenderer = function() {
    };
    
    // called with scope of axis object.
    $.jqplot.LinearAxisRenderer.prototype.init = function(options){
        // prop: breakPoints
        // EXPERIMENTAL!! Use at your own risk!
        // Works only with linear axes and the default tick renderer.
        // Array of [start, stop] points to create a broken axis.
        // Broken axes have a "jump" in them, which is an immediate 
        // transition from a smaller value to a larger value.
        // Currently, axis ticks MUST be manually assigned if using breakPoints
        // by using the axis ticks array option.
        this.breakPoints = null;
        // prop: breakTickLabel
        // Label to use at the axis break if breakPoints are specified.
        this.breakTickLabel = "&asymp;";
        // prop: drawBaseline
        // True to draw the axis baseline.
        this.drawBaseline = true;
        // prop: baselineWidth
        // width of the baseline in pixels.
        this.baselineWidth = null;
        // prop: baselineColor
        // CSS color spec for the baseline.
        this.baselineColor = null;
        // prop: forceTickAt0
        // This will ensure that there is always a tick mark at 0.
        // If data range is strictly positive or negative,
        // this will force 0 to be inside the axis bounds unless
        // the appropriate axis pad (pad, padMin or padMax) is set
        // to 0, then this will force an axis min or max value at 0.
        // This has know effect when any of the following options
        // are set:  autoscale, min, max, numberTicks or tickInterval.
        this.forceTickAt0 = false;
        // prop: forceTickAt100
        // This will ensure that there is always a tick mark at 100.
        // If data range is strictly above or below 100,
        // this will force 100 to be inside the axis bounds unless
        // the appropriate axis pad (pad, padMin or padMax) is set
        // to 0, then this will force an axis min or max value at 100.
        // This has know effect when any of the following options
        // are set:  autoscale, min, max, numberTicks or tickInterval.
        this.forceTickAt100 = false;
        // prop: tickInset
        // Controls the amount to inset the first and last ticks from 
        // the edges of the grid, in multiples of the tick interval.
        // 0 is no inset, 0.5 is one half a tick interval, 1 is a full
        // tick interval, etc.
        this.tickInset = 0;
        // prop: minorTicks
        // Number of ticks to add between "major" ticks.
        // Major ticks are ticks supplied by user or auto computed.
        // Minor ticks cannot be created by user.
        this.minorTicks = 0;
        // prop: alignTicks
        // true to align tick marks across opposed axes
        // such as from the y2axis to yaxis.
        this.alignTicks = false;
        this._autoFormatString = '';
        this._overrideFormatString = false;
        this._scalefact = 1.0;
        $.extend(true, this, options);
        if (this.breakPoints) {
            if (!$.isArray(this.breakPoints)) {
                this.breakPoints = null;
            }
            else if (this.breakPoints.length < 2 || this.breakPoints[1] <= this.breakPoints[0]) {
                this.breakPoints = null;
            }
        }
        if (this.numberTicks != null && this.numberTicks < 2) {
            this.numberTicks = 2;
        }
        this.resetDataBounds();
    };
    
    // called with scope of axis
    $.jqplot.LinearAxisRenderer.prototype.draw = function(ctx, plot) {
        if (this.show) {
            // populate the axis label and value properties.
            // createTicks is a method on the renderer, but
            // call it within the scope of the axis.
            this.renderer.createTicks.call(this, plot);
            // fill a div with axes labels in the right direction.
            // Need to pregenerate each axis to get it's bounds and
            // position it and the labels correctly on the plot.
            var dim=0;
            var temp;
            // Added for theming.
            if (this._elem) {
                // Memory Leaks patch
                this._elem.emptyForce();
                tiny.garbageCollect(this._elem, true);
                this._elem = null;
            }
            
            this._elem = $(document.createElement('div'));
            this._elem.addClass('jqplot-axis jqplot-'+this.name);
            this._elem.css('position', 'absolute');

            
            if (this.name == 'xaxis' || this.name == 'x2axis') {
                this._elem.width(this._plotDimensions.width);
            }
            else {
                this._elem.height(this._plotDimensions.height);
            }
            
            // create a _label object.
            this.labelOptions.axis = this.name;
            this._label = new this.labelRenderer(this.labelOptions);
            if (this._label.show) {
                var elem = this._label.draw(ctx, plot);
                elem.appendTo(this._elem);
                elem = null;
            }
    
            var t = this._ticks;
            var tick,tickIndex = 0,totalTicks = 0;
            for (var i=0; i<t.length; i++) {
                tick = t[i];
                if (tick.show && tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {
                    totalTicks++;
                }
            }
			  var hidSpan = document.createElement('span');
			  $(hidSpan).css({visibility:'hidden','white-space':'nowrap','font-size':'10px'});
			  $(document.body).append(hidSpan);
            for (var i=0; i<t.length; i++) {
                tick = t[i];
                if (tick.show && tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {
                    this._elem.append(tick.draw(ctx, plot,tickIndex++,totalTicks,hidSpan));
                }
            } 
			tiny.garbageCollect(hidSpan);
			hidSpan = null;
            tick = null;
            t = null;
        }
        ctx = plot = null;
        return this._elem;
    };

    $.jqplot.LinearAxisRenderer.prototype.createOnlyTicks = function(plot) {
        if (this.show)
        {
            // populate the axis label and value properties.
            // createTicks is a method on the renderer, but
            // call it within the scope of the axis.
            this.renderer.createTicks.call(this, plot);
        }
    };

    // called with scope of an axis
    $.jqplot.LinearAxisRenderer.prototype.reset = function() {
        this.min = this._options.min;
        this.max = this._options.max;
        this.tickInterval = this._options.tickInterval;
        this.numberTicks = this._options.numberTicks;
        this._autoFormatString = '';
        if (this._overrideFormatString && this.tickOptions && this.tickOptions.formatString) {
            this.tickOptions.formatString = '';
        }

    };
    
    // called with scope of axis
    $.jqplot.LinearAxisRenderer.prototype.set = function() { 
        var dim = 0;
        var temp;
        var w = 0;
        var h = 0;
        var lshow = (this._label == null) ? false : this._label.show;
        if (this.show) {
            var t = this._ticks;
            var tick;
            for (var i=0; i<t.length; i++) {
                tick = t[i];
                if (!tick._breakTick && tick.show && tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        temp = tick._elem.outerHeight(true);
                    }
                    else {
                        temp = tick._elem.outerWidth(true);
                    }
                    if (temp > dim) {
                        dim = temp;
                    }
                }
            }
            tick = null;
            t = null;
            
            if (lshow) {
                w = this._label._elem.outerWidth(true);
                h = this._label._elem.outerHeight(true); 
            }
            if (this.name == 'xaxis') {
                dim = dim + h;
                this._elem.css({'height':dim+'px', left:'0px', bottom:'0px'});
            }
            else if (this.name == 'x2axis') {
                dim = dim + h;
                this._elem.css({'height':dim+'px', left:'0px', top:'0px'});
            }
            else if (this.name == 'yaxis') {
                var unitw = 0;            
                if (this._unitelm)
                {
                    if (!lshow) 
                    {
                        unitw = 12;//after rotation max width for unit element will be this.
                    }
                }
                dim = dim + w + unitw;
                this._elem.css({'width':dim+'px', left:'0px', top:'0px'});
                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {
                    this._label._elem.css('width', w+'px');
                }
            }
            else {
                dim = dim + w;
                this._elem.css({'width':dim+'px', right:'0px', top:'0px'});
                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {
                    this._label._elem.css('width', w+'px');
                }
            }
        }  
    };    
    
    var roundValue = function(num, fixed) 
    {
        fixed = fixed || 0;
        fixed = Math.pow(10, fixed);
        return Math.floor(num * fixed) / fixed;
    };
    
    // called with scope of axis
    $.jqplot.LinearAxisRenderer.prototype.createTicks = function(plot) {
        // we're are operating on an axis here
        var ticks = this._ticks;
        var userTicks = this.ticks;
        var name = this.name;
        // databounds were set on axis initialization.
        var db = this._dataBounds;
        var dim = (this.name.charAt(0) === 'x') ? this._plotDimensions.width : this._plotDimensions.height;
        var interval;
        var min, max;
        var pos1, pos2;
        var tt, i;
        // get a copy of user's settings for min/max.
        var userMin = this.min;
        var userMax = this.max;
        var userNT = this.numberTicks;
        var userTI = this.tickInterval;
        
        
        if (this.name.charAt(0) === 'y')
        {
            if (this.tickRenderer  === $.jqplot.CanvasAxisTickRenderer)
            {
                //To set font for canvas tick render
                var fontSize = "10px";
                if (this.tickOptions.fontData && (''+this.tickOptions.fontData.size).indexOf('px') !== -1)
                {
                    fontSize = this.tickOptions.fontData.size;
                }
                else
                {
                    var chartHeight = plot.target.height();
                    if (chartHeight <= 300)
                    {
                        fontSize = "7px";
                    }
                    if (chartHeight <= 200)
                    {
                        fontSize = "5px";
                    }
                }
				if(navigator.userAgent.indexOf("Firefox"))
				{
					
                    this.tickOptions.fontFamily = "'Arial','Tahoma','Verdana','SimSun','Microsoft Yahei'";
				}
                if(!this.tickOptions.fontSize) {this.tickOptions.fontSize= fontSize;}
            }
        }

        var threshold = 30;
        this._scalefact =  (Math.max(dim, threshold+1) - threshold)/300.0;
        
        // if we already have ticks, use them.
        // ticks must be in order of increasing value.
        
        if (userTicks.length) {
            // ticks could be 1D or 2D array of [val, val, ,,,] or [[val, label], [val, label], ...] or mixed
            for (i=0; i<userTicks.length; i++){
                var ut = userTicks[i];
                var t = new this.tickRenderer(this.tickOptions);
                if ($.isArray(ut)) {
                    t.value = ut[0];
                    if (this.breakPoints) {
                        if (ut[0] == this.breakPoints[0]) {
                            t.label = this.breakTickLabel;
                            t._breakTick = true;
                            t.showGridline = false;
                            t.showMark = false;
                        }
                        else if (ut[0] > this.breakPoints[0] && ut[0] <= this.breakPoints[1]) {
                            t.show = false;
                            t.showGridline = false;
                            t.label = ut[1];
                        }
                        else {
                            t.label = ut[1];
                        }
                    }
                    else {
                        t.label = ut[1];
                    }
                    t.setTick(ut[0], this.name);
                    this._ticks.push(t);
                }

                else if ($.isPlainObject(ut)) {
                    $.extend(true, t, ut);
                    t.axis = this.name;
                    this._ticks.push(t);
                }
                
                else {
                    t.value = ut;
                    if (this.breakPoints) {
                        if (ut == this.breakPoints[0]) {
                            t.label = this.breakTickLabel;
                            t._breakTick = true;
                            t.showGridline = false;
                            t.showMark = false;
                        }
                        else if (ut > this.breakPoints[0] && ut <= this.breakPoints[1]) {
                            t.show = false;
                            t.showGridline = false;
                        }
                    }
                    t.setTick(ut, this.name);
                    this._ticks.push(t);
                }
            }
            this.numberTicks = userTicks.length;
            this.min = this._ticks[0].value;
            this.max = this._ticks[this.numberTicks-1].value;
            this.tickInterval = (this.max - this.min) / (this.numberTicks - 1);
        }
        
        // we don't have any ticks yet, let's make some!
        else {
            if (name == 'xaxis' || name == 'x2axis') {
                dim = this._plotDimensions.width;
            }
            else {
                dim = this._plotDimensions.height;
            }

            var _numberTicks = this.numberTicks;

            // if aligning this axis, use number of ticks from previous axis.
            // Do I need to reset somehow if alignTicks is changed and then graph is replotted??
            if (this.alignTicks) {
                if (this.name === 'x2axis' && plot.axes.xaxis.show) {
                    _numberTicks = plot.axes.xaxis.numberTicks;
                }
                else if (this.name.charAt(0) === 'y' && this.name !== 'yaxis' && this.name !== 'yMidAxis' && plot.axes.yaxis.show) {
                    _numberTicks = plot.axes.yaxis.numberTicks;
                }
            }
        
            min = ((this.min != null) ? this.min : db.min);
            max = ((this.max != null) ? this.max : db.max);
            if (plot.options.islinechart === true && name.charAt(0) === 'y')
            {
                if (plot.options.series.length === 1)
                {
                    var thresoldvalue = plot.options.series[0].thresold;
                    var throAlways = plot.options.series[0].showThresholdAlways;
                    /**
                        1.Check for threshold value, if threshold value is greater than max value, then assign max to threshold value.
                        2.Check for threshold value, if threshold value is less than min value, then assign min to threshold value.
                    */
                    if (throAlways === true)
                    {
                        if (thresoldvalue>db.max)
                        {
                            min = ((this.min != null) ? this.min : db.min);
                            max = thresoldvalue;
                        }
                        if (thresoldvalue<db.min)
                        {
                            min = thresoldvalue-1;
                            max = ((this.max != null) ? this.max : db.max);
                        }
                    }
                    else
                    {
                        
                    }
                }
                
            }
            //When data is updated as empty, then the last tick not show in horizontal bar chart
            if (max === null)
            {
                max = 0.5;
            }
            if (min === null)
            {
                min = 0.0;
            }
            //When min and max is same, only through data, then barchart is ending in max value and point label not showing
            if (min === max) {                
                max = max+1;
            }
            var range = max - min;
            var rmin, rmax;
            var temp;

            if (this.tickOptions == null || !this.tickOptions.formatString) {
                this._overrideFormatString = true;
            }

            // Doing complete autoscaling
            if (this.min == null && this.max == null && this.tickInterval == null && !this.autoscale) {
                // Check if user must have tick at 0 or 100 and ensure they are in range.
                // The autoscaling algorithm will always place ticks at 0 and 100 if they are in range.
                if (this.forceTickAt0) {
                    if (min > 0) {
                        min = 0;
                    }
                    if (max < 0) {
                        max = 0;
                    }
                }

                if (this.forceTickAt100) {
                    if (min > 100) {
                        min = 100;
                    }
                    if (max < 100) {
                        max = 100;
                    }
                }

                var ret = $.jqplot.LinearTickGenerator(min, max, this._scalefact, _numberTicks); 
                // calculate a padded max and min, points should be less than these
                // so that they aren't too close to the edges of the plot.
                // User can adjust how much padding is allowed with pad, padMin and PadMax options. 
                
                //This line commented because no padding is required and as per ucd
                //The point always begin from minimum data value and end at maximum data value
                //When auto=true or auto=false and xfield not provided
                //And when min and max not provided also
                //This gives problem for barchart
                
                var tumin = min + range*(this.padMin - 1);
                var tumax = max - range*(this.padMax - 1);

                /**
                    This check plot.options.islinechart is added in below line, to avoid additional ticks in yaxis or y2axis above the max value.
                    And this check only applicable for line chart, because bar chart does not look good with this solution.
                */
                if (plot.options.islinechart !== true && (min <tumin || max > tumax)) {
                    tumin = min - range*(this.padMin - 1);
                    tumax = max + range*(this.padMax - 1);
                    ret = $.jqplot.LinearTickGenerator(tumin, tumax, this._scalefact, _numberTicks);
                }

                this.min = ret[0];
                this.max = ret[1];
                // if numberTicks specified, it should return the same.
                this.numberTicks = ret[2];
                this._autoFormatString = ret[3];
                this.tickInterval = ret[4];
                
            }

            // User has specified some axis scale related option, can use auto algorithm
            else {
                
                // if min and max are same, space them out a bit
                if (min == max) {
                    var adj = 0.05;
                    if (min > 0) {
                        adj = Math.max(Math.log(min)/Math.LN10, 0.05);
                    }
                    min -= adj;
                    max += adj;
                }
                
                // autoscale.  Can't autoscale if min or max is supplied.
                // Will use numberTicks and tickInterval if supplied.  Ticks
                // across multiple axes may not line up depending on how
                // bars are to be plotted.
                if (this.autoscale && this.min == null && this.max == null) {
                    var rrange, ti, margin;
                    var forceMinZero = false;
                    var forceZeroLine = false;
                    var intervals = {min:null, max:null, average:null, stddev:null};
                    // if any series are bars, or if any are fill to zero, and if this
                    // is the axis to fill toward, check to see if we can start axis at zero.
                    for (var i=0; i<this._series.length; i++) {
                        var s = this._series[i];
                        var faname = (s.fillAxis == 'x') ? s._xaxis.name : s._yaxis.name;
                        // check to see if this is the fill axis
                        if (this.name == faname) {
                            var vals = s._plotValues[s.fillAxis];
                            var vmin = vals[0];
                            var vmax = vals[0];
                            for (var j=1; j<vals.length; j++) {
                                if (vals[j] < vmin) {
                                    vmin = vals[j];
                                }
                                else if (vals[j] > vmax) {
                                    vmax = vals[j];
                                }
                            }
                            var dp = (vmax - vmin) / vmax;
                            // is this sries a bar?
                            if (s.renderer.constructor == $.jqplot.BarRenderer) {
                                // if no negative values and could also check range.
                                if (vmin >= 0 && (s.fillToZero || dp > 0.1)) {
                                    forceMinZero = true;
                                }
                                else {
                                    forceMinZero = false;
                                    if (s.fill && s.fillToZero && vmin < 0 && vmax > 0) {
                                        forceZeroLine = true;
                                    }
                                    else {
                                        forceZeroLine = false;
                                    }
                                }
                            }
                            
                            // if not a bar and filling, use appropriate method.
                            else if (s.fill) {
                                if (vmin >= 0 && (s.fillToZero || dp > 0.1)) {
                                    forceMinZero = true;
                                }
                                else if (vmin < 0 && vmax > 0 && s.fillToZero) {
                                    forceMinZero = false;
                                    forceZeroLine = true;
                                }
                                else {
                                    forceMinZero = false;
                                    forceZeroLine = false;
                                }
                            }
                            
                            // if not a bar and not filling, only change existing state
                            // if it doesn't make sense
                            else if (vmin < 0) {
                                forceMinZero = false;
                            }
                        }
                    }
                    
                    // check if we need make axis min at 0.
                    if (forceMinZero) {
                        // compute number of ticks
                        this.numberTicks = 2 + Math.ceil((dim-(this.tickSpacing-1))/this.tickSpacing);
                        this.min = 0;
                        userMin = 0;
                        // what order is this range?
                        // what tick interval does that give us?
                        ti = max/(this.numberTicks-1);
                        temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti)/Math.LN10)));
                        if (ti/temp == parseInt(ti/temp, 10)) {
                            ti += temp;
                        }
                        this.tickInterval = Math.ceil(ti/temp) * temp;
                        this.max = this.tickInterval * (this.numberTicks - 1);
                    }
                    
                    // check if we need to make sure there is a tick at 0.
                    else if (forceZeroLine) {
                        // compute number of ticks
                        this.numberTicks = 2 + Math.ceil((dim-(this.tickSpacing-1))/this.tickSpacing);
                        var ntmin = Math.ceil(Math.abs(min)/range*(this.numberTicks-1));
                        var ntmax = this.numberTicks - 1  - ntmin;
                        ti = Math.max(Math.abs(min/ntmin), Math.abs(max/ntmax));
                        temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti)/Math.LN10)));
                        this.tickInterval = Math.ceil(ti/temp) * temp;
                        this.max = this.tickInterval * ntmax;
                        this.min = -this.tickInterval * ntmin;
                    }
                    
                    // if nothing else, do autoscaling which will try to line up ticks across axes.
                    else {  
                        if (this.numberTicks == null){
                            if (this.tickInterval) {
                                this.numberTicks = 3 + Math.ceil(range / this.tickInterval);
                            }
                            else {
                                this.numberTicks = 2 + Math.ceil((dim-(this.tickSpacing-1))/this.tickSpacing);
                            }
                        }
                
                        if (this.tickInterval == null) {
                            // get a tick interval
                            ti = range/(this.numberTicks - 1);

                            if (ti < 1) {
                                temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti)/Math.LN10)));
                            }
                            else {
                                temp = 1;
                            }
                            this.tickInterval = Math.ceil(ti*temp*this.pad)/temp;
                        }
                        else {
                            temp = 1 / this.tickInterval;
                        }
                        
                        rrange = this.tickInterval * (this.numberTicks - 1);
                        margin = (rrange - range)/2;
           
                        if (this.min == null) {
                            this.min = Math.floor(temp*(min-margin))/temp;
                        }
                        if (this.max == null) {
                            this.max = this.min + rrange;
                        }
                    }

                    // Compute a somewhat decent format string if it is needed.
                    // get precision of interval and determine a format string.
                    var sf = $.jqplot.getSignificantFigures(this.tickInterval);

                    var fstr;

                    // if we have only a whole number, use integer formatting
                    if (sf.digitsLeft >= sf.significantDigits) {
                        fstr = '%d';
                    }

                    else {
                        var temp = Math.max(0, 5 - sf.digitsLeft);
                        temp = Math.min(temp, sf.digitsRight);
                        fstr = '%.'+ temp + 'f';
                    }

                    this._autoFormatString = fstr;
                }
                
                // Use the default algorithm which pads each axis to make the chart
                // centered nicely on the grid.
                else {

                    if (this.min !== null && this.max === null)
                    {
			if (plot.options.islinechart)
			{
				var ret = $.jqplot.LinearTickGenerator(min, max, this._scalefact, _numberTicks); 
				this.min = ret[0];
				this.max = ret[1];
				// if numberTicks specified, it should return the same.
				this.numberTicks = ret[2];
				this._autoFormatString = ret[3];
				this.tickInterval = ret[4];
			}
			else
			{
		
				//This block added to calculate when one of min is provided and max not provided, barchart not calculated ticks properly
				if (this.numberTicks == null){
				    if (this.tickInterval) {
					this.numberTicks = 3 + Math.ceil(range / this.tickInterval);
				    }
				    else {
					this.numberTicks = 2 + Math.ceil((dim-(this.tickSpacing-1))/this.tickSpacing);
				    }
				}
			
				if (this.tickInterval == null) {
				    // get a tick interval
				    ti = range/(this.numberTicks - 1);

				    if (ti < 1) {
					temp = Math.pow(10, Math.abs(Math.floor(Math.log(ti)/Math.LN10)));
				    }
				    else {
					temp = 1;
				    }
				    this.tickInterval = Math.ceil(ti*temp*this.pad)/temp;
				}
				else {
				    temp = 1 / this.tickInterval;
				}
				
				var rrange = this.tickInterval * (this.numberTicks - 1);
				var margin = (rrange - range)/2;
		   
				if (this.min == null) {
				    this.min = Math.floor(temp*(min-margin))/temp;
				}
				if (this.max == null) {
				    this.max = this.min + rrange;
				}
			}
                    }
                    else
                    {
                        rmin = (this.min != null) ? this.min : min - range*(this.padMin - 1);
                        rmax = (this.max != null) ? this.max : max + range*(this.padMax - 1);
                        range = rmax - rmin;
            
                        if (this.numberTicks == null){
                            // if tickInterval is specified by user, we will ignore computed maximum.
                            // max will be equal or greater to fit even # of ticks.
                            if (this.tickInterval != null) {
                                this.numberTicks = Math.ceil((rmax - rmin)/this.tickInterval)+1;
                            }
                            else if (dim > 100) {
                                this.numberTicks = parseInt(3+(dim-100)/75, 10);
                            }
                            else {
                                this.numberTicks = 2;
                            }
                        }
                        if (this.min !== null || this.max !== null) {
                            this.tickInterval = null;
                        }
                        if (this.tickInterval == null) {
                            this.tickInterval = range / (this.numberTicks-1);
                        }
                        
                        if (this.max == null) {
                            rmax = rmin + this.tickInterval*(this.numberTicks - 1);
                        }        
                        if (this.min == null) {
                            rmin = rmax - this.tickInterval*(this.numberTicks - 1);
                        }

                        // get precision of interval and determine a format string.
                        var sf = $.jqplot.getSignificantFigures(this.tickInterval);

                        var fstr;

                        // if we have only a whole number, use integer formatting
                        if (sf.digitsLeft >= sf.significantDigits) {
                            fstr = '%d';
                        }

                        else {
                            var temp = Math.max(0, 5 - sf.digitsLeft);
                            temp = Math.min(temp, sf.digitsRight);
                            fstr = '%.'+ temp + 'f';
                        }


                        this._autoFormatString = fstr;

                        this.min = rmin;
                        this.max = rmax;
                    }
                }
                
                if (this.renderer.constructor == $.jqplot.LinearAxisRenderer && this._autoFormatString == '') {
                    // fix for misleading tick display with small range and low precision.
                    range = this.max - this.min;
                    // figure out precision
                    var temptick = new this.tickRenderer(this.tickOptions);
                    // use the tick formatString or, the default.
                    var fs = temptick.formatString || $.jqplot.config.defaultTickFormatString; 
                    var fs = fs.match($.jqplot.sprintf.regex)[0];
                    var precision = 0;
                    if (fs) {
                        if (fs.search(/[fFeEgGpP]/) > -1) {
                            var m = fs.match(/\%\.(\d{0,})?[eEfFgGpP]/);
                            if (m) {
                                precision = parseInt(m[1], 10);
                            }
                            else {
                                precision = 6;
                            }
                        }
                        else if (fs.search(/[di]/) > -1) {
                            precision = 0;
                        }
                        // fact will be <= 1;
                        var fact = Math.pow(10, -precision);
                        if (this.tickInterval < fact) {
                            // need to correct underrange
                            if (userNT == null && userTI == null) {
                                this.tickInterval = fact;
                                if (userMax == null && userMin == null) {
                                    this.min = Math.floor(this._dataBounds.min/fact) * fact;
                                    if (this.min == this._dataBounds.min) {
                                        this.min = this._dataBounds.min - this.tickInterval;
                                    }
                                    this.max = Math.ceil(this._dataBounds.max/fact) * fact;
                                    if (this.max == this._dataBounds.max) {
                                        this.max = this._dataBounds.max + this.tickInterval;
                                    }
                                    var n = (this.max - this.min)/this.tickInterval;
                                    n = n.toFixed(11);
                                    n = Math.ceil(n);
                                    this.numberTicks = n + 1;
                                }
                                else if (userMax == null) {
                                    // add one tick for top of range.
                                    var n = (this._dataBounds.max - this.min) / this.tickInterval;
                                    n = n.toFixed(11);
                                    this.numberTicks = Math.ceil(n) + 2;
                                    this.max = this.min + this.tickInterval * (this.numberTicks-1);
                                }
                                else if (userMin == null) {
                                    // add one tick for bottom of range.
                                    var n = (this.max - this._dataBounds.min) / this.tickInterval;
                                    n = n.toFixed(11);
                                    this.numberTicks = Math.ceil(n) + 2;
                                    this.min = this.max - this.tickInterval * (this.numberTicks-1);
                                }
                                else {
                                    // calculate a number of ticks so max is within axis scale
                                    this.numberTicks = Math.ceil((userMax - userMin)/this.tickInterval) + 1;
                                    // if user's min and max don't fit evenly in ticks, adjust.
                                    // This takes care of cases such as user min set to 0, max set to 3.5 but tick
                                    // format string set to %d (integer ticks)
                                    this.min =  Math.floor(userMin*Math.pow(10, precision))/Math.pow(10, precision);
                                    this.max =  Math.ceil(userMax*Math.pow(10, precision))/Math.pow(10, precision);
                                    this.numberTicks = Math.ceil((this.max - this.min)/this.tickInterval) + 1;
                                }
                            }
                        }
                    }
                }
                
            }
            
            if (this._overrideFormatString && this._autoFormatString != '') {
                this.tickOptions = this.tickOptions || {};
                this.tickOptions.formatString = this._autoFormatString;
            }

            var t, to,prevtt = null,roundDecimals = 1,MAX_FIXED_DIGITS = 15;
            if (!this.tickOptions.userFormatString)
            {
                var tickss = [];
                for (var i=0; i<this.numberTicks; i++)
                {
		    tt = roundValue(this.tickInterval * i,MAX_FIXED_DIGITS);
		    tt = roundValue(tt + this.min,2);
                    var actualtt = tt;
                    if (prevtt !== null)
                    {
                        var ai = 1,alreadyFoundTick = false;
                        for (var aj=0;aj<tickss.length;aj++)
                        {
                            if (tt === tickss[aj])
                            {
                                alreadyFoundTick = true;
                                break;
                            }
                        }
                        {
                            tt = roundValue(actualtt,roundDecimals);
                            while (prevtt !== tt)
                            {
                                //write new tick
                                tt = roundValue(actualtt,(roundDecimals+ai));
                                ai++;
                                if (ai>15)
                                {
                                    break;
                                }
                                prevtt = tt;
                            }
                        }
                        ai = 1;
                        var prevTickExists = false;                        
                        for (var aj=0;aj<tickss.length;aj++)
                        {
                            if (prevtt === tickss[aj])
                            {
                                prevTickExists = true;
                                break;
                            }
                        }
                        if (prevTickExists)
                        {
                            while (prevtt === tt)
                            {
                                //write new tick
                                tt = roundValue(actualtt,(roundDecimals+ai));
                                ai++;
                                if (ai>15)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    prevtt = tt;
                    tickss.push(prevtt);
                }
                for (var i=0; i<this.numberTicks; i++)
                {
                    tt = this.min + i * this.tickInterval;
                    t = new this.tickRenderer(this.tickOptions);
                    t.setTick(tickss[i], this.name);
                    t.changedTickValue = tickss[i];
                    this._ticks.push(t);

                    if (i < this.numberTicks - 1) {
                        for (var j=0; j<this.minorTicks; j++) {
                            tt += this.tickInterval/(this.minorTicks+1);
                            to = $.extend(true, {}, this.tickOptions, {name:this.name, value:tt, label:'', isMinorTick:true});
                            t = new this.tickRenderer(to);
                            this._ticks.push(t);
                        }
                    }
                    t = null;
                }
            }
            else
            {
                for (var i=0; i<this.numberTicks; i++){
                    tt = this.min + i * this.tickInterval;
                    t = new this.tickRenderer(this.tickOptions);
                    t.setTick(tt, this.name);
                    this._ticks.push(t);

                    if (i < this.numberTicks - 1) {
                        for (var j=0; j<this.minorTicks; j++) {
                            tt += this.tickInterval/(this.minorTicks+1);
                            to = $.extend(true, {}, this.tickOptions, {name:this.name, value:tt, label:'', isMinorTick:true});
                            t = new this.tickRenderer(to);
                            this._ticks.push(t);
                        }
                    }
                    t = null;
                }
            } 
        } 
        if (this.tickInset) {
            this.min = this.min - this.tickInset * this.tickInterval;
            this.max = this.max + this.tickInset * this.tickInterval;
        }
        plot = ticks = userTicks = null;
        name = db = dim = interval = min = max = pos1 = pos2 =tt = userMin = userMax = userNT = userTI = null;
    };
    
    // Used to reset just the values of the ticks and then repack, which will
    // recalculate the positioning functions.  It is assuemd that the 
    // number of ticks is the same and the values of the new array are at the
    // proper interval.
    // This method needs to be called with the scope of an axis object, like:
 
    $.jqplot.LinearAxisRenderer.prototype.resetTickValues = function(opts) {
        if ($.isArray(opts) && opts.length == this._ticks.length) {
            var t;
            for (var i=0; i<opts.length; i++) {
                t = this._ticks[i];
                t.value = opts[i];
                t.label = t.formatter(t.formatString, opts[i]);
                t.label = t.prefix + t.label;
                t._elem.html(t.label);
            }
            t = null;
            this.min = $.jqplot.arrayMin(opts);
            this.max = $.jqplot.arrayMax(opts);
            this.pack();
        }
    };
    
    // called with scope of axis
    $.jqplot.LinearAxisRenderer.prototype.pack = function(pos, offsets, plot) {
        // Add defaults for repacking from resetTickValues function.
        pos = pos || {};
        offsets = offsets || this._offsets;
        
        var ticks = this._ticks;
        var max = this.max;
        var min = this.min;
        var offmax = offsets.max;
        var offmin = offsets.min;
        var lshow = (this._label == null) ? false : this._label.show;
        
        for (var p in pos) {
            this._elem.css(p, pos[p]);
        }
        
        this._offsets = offsets;
        // pixellength will be + for x axes and - for y axes becasue pixels always measured from top left.
        var pixellength = offmax - offmin;
        var unitlength = max - min;
        
        // point to unit and unit to point conversions references to Plot DOM element top left corner.
        if (this.breakPoints) {
            unitlength = unitlength - this.breakPoints[1] + this.breakPoints[0];
            
            this.p2u = function(p){
                return (p - offmin) * unitlength / pixellength + min;
            };
        
            this.u2p = function(u){
                if (u > this.breakPoints[0] && u < this.breakPoints[1]){
                    u = this.breakPoints[0];
                }
                if (u <= this.breakPoints[0]) {
                    return (u - min) * pixellength / unitlength + offmin;
                }
                else {
                    return (u - this.breakPoints[1] + this.breakPoints[0] - min) * pixellength / unitlength + offmin;
                }
            };
                
            if (this.name.charAt(0) == 'x'){
                this.series_u2p = function(u){
                    if (u > this.breakPoints[0] && u < this.breakPoints[1]){
                        u = this.breakPoints[0];
                    }
                    if (u <= this.breakPoints[0]) {
                        return (u - min) * pixellength / unitlength;
                    }
                    else {
                        return (u - this.breakPoints[1] + this.breakPoints[0] - min) * pixellength / unitlength;
                    }
                };
                this.series_p2u = function(p){
                    return p * unitlength / pixellength + min;
                };
            }
        
            else {
                this.series_u2p = function(u){
                    if (u > this.breakPoints[0] && u < this.breakPoints[1]){
                        u = this.breakPoints[0];
                    }
                    if (u >= this.breakPoints[1]) {
                        return (u - max) * pixellength / unitlength;
                    }
                    else {
                        return (u + this.breakPoints[1] - this.breakPoints[0] - max) * pixellength / unitlength;
                    }
                };
                this.series_p2u = function(p){
                    return p * unitlength / pixellength + max;
                };
            }
        }
        else {
            this.p2u = function(p){
                return (p - offmin) * unitlength / pixellength + min;
            };
        
            this.u2p = function(u){
                return (u - min) * pixellength / unitlength + offmin;
            };
                
            if (this.name == 'xaxis' || this.name == 'x2axis'){
                this.series_u2p = function(u){
                    return (u - min) * pixellength / unitlength;
                };
                this.series_p2u = function(p){
                    return p * unitlength / pixellength + min;
                };
            }
        
            else {
                this.series_u2p = function(u){
                    return (u - max) * pixellength / unitlength;
                };
                this.series_p2u = function(p){
                    return p * unitlength / pixellength + max;
                };
            }
        }
        
        if (this.show) {
            if (this.name == 'xaxis' || this.name == 'x2axis') {
                var defWidth = this.isBigData ? ticks[ticks.length - 1].getWidth() / 2 : 0;
                for (var i=0; i<ticks.length; i++) {
                    var t = ticks[i];
                    if (t.show && t.showLabel) {
                        var shim;
                        
                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                            // will need to adjust auto positioning based on which axis this is.
                            var temp = (this.name == 'xaxis') ? 1 : -1;
                            switch (t.labelPosition) {
                                case 'auto':
                                    // position at end
                                    if (temp * t.angle < 0) {
                                        shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    }
                                    // position at start
                                    else {
                                        shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                                    }
                                    break;
                                case 'end':
                                    shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    break;
                                case 'start':
                                    shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                                    break;
                                case 'middle':
                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    break;
                                default:
                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    break;
                            }
                        }
                        else {
                            shim = this.isBigData ? -defWidth : -t.getWidth() / 2;
                        }
                        var val = this.u2p(t.value) + shim + 'px';
                        t._elem.css('left', val);
                        t.pack();
                    }
                }
                if (lshow) {
                    var w = this._label._elem.outerWidth(true);
                    if (this.name == 'xaxis') {
                        this._label._elem.css({'left' : offmin + pixellength/2 - w/2 + 'px', 'bottom':'0px'});
                    }
                    else {
                        this._label._elem.css({'top' : '0px', 'left' : offmin + pixellength/2 - w/2 + 'px'});
                    }
                    this._label.pack();
                }
            }
            else {
                var defHeight = this.isBigData ? ticks[ticks.length - 1].getHeight() / 2 : -5;
                var val,widvalue = 0;
                for (var i=0; i<ticks.length; i++) {
                    var t = ticks[i];
                    if (t.show && t.showLabel) {                        
                        var shim;
                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                            // will need to adjust auto positioning based on which axis this is.
                            var temp = (this.name == 'yaxis') ? 1 : -1;
                            switch (t.labelPosition) {
                                case 'auto':
                                    // position at end
                                case 'end':
                                    if (temp * t.angle < 0) {
                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;
                                    }
                                    else {
                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                                    }
                                    break;
                                case 'start':
                                    if (t.angle > 0) {
                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;
                                    }
                                    else {
                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                                    }
                                    break;
                                case 'middle':
                                    shim = -t.getHeight()/2;
                                    break;
                                default:
                                    shim = -t.getHeight()/2;
                                    break;
                            }
                        }
                        else {
                            shim = this.isBigData ? -defHeight : -t.getHeight()/2;
                        }
                        var topvalue = this.u2p(t.value) + shim;
                        val = topvalue + 'px';
                        t._elem.css('top', val);                        
                        t.pack();
                        if (widvalue < t._elem.width())
                        {
                            widvalue = t._elem.width();
                        }
                        var hgtvalue = t._elem.height();
                         
                    }
                }
                //Unit element top and left fix
                if (this.name === 'y2axis')
                {
                    if (typeof plot !== 'undefined')
                    {
                        var tempt = $(plot.targetId).find("#y2UnitSpan");
                        if (tempt)
                        {
                        
							if(this.unitDisplay===false)
							{
								tempt.css({"display":"none"});
							}
							else
							{
								tempt.css({"display":"inline"});
							}
							var unitData = this.unitData;
							if (unitData)
							{
								for (var propKey in unitData)
								{
									if (propKey && unitData[propKey])
									{
										if (propKey === 'color')
										{
											tempt.css({"color":unitData[propKey]});
										}
									}
								}
							}
						}
                    }
                }
                else if (this.name === 'yaxis')
                {
                    if (typeof plot !== 'undefined')
                    {
                        var tempt = $(plot.targetId).find("#yUnitSpan");
                        if (tempt)
                        {
                            if(this.unitDisplay===false)
                            {
                                tempt.css({"display":"none"});
                            }
                            else
                            {
                                tempt.css({"display":"inline"});
                            }
                            var unitData = this.unitData;
                            if (unitData)
                            {
                                for (var propKey in unitData)
                                {
                                    if (propKey && unitData[propKey])
                                    {
                                        if (propKey === 'color')
                                        {
                                            tempt.css({"color":unitData[propKey]});
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (lshow) {
                    var h = this._label._elem.outerHeight(true);
                    if (this.name == 'yaxis') {
                        this._label._elem.css({'left' : '0px', 'top' : offmax - pixellength/2 - h/2 + 'px'});
                    }
                    else {
                        this._label._elem.css({'top': offmax - pixellength/2 - h/2 + 'px' ,'right': '0px'});
                    }   
                    this._label.pack();
                }
            }
        }
        pos = offsets = null;
        ticks = null;
    };


    
    /**
    * This means that you can choose the license that best suits your project 
    * and use it accordingly. 
    */

    // A good format string depends on the interval. If the interval is greater 
    // than 1 then there is no need to show any decimal digits. If it is < 1.0, then
    // use the magnitude of the interval to determine the number of digits to show.
    function bestFormatString (interval)
    {
        var fstr;
        interval = Math.abs(interval);
        if (interval >= 10) {
            fstr = '%d';
        }

        else if (interval > 1) {
            if (interval === parseInt(interval, 10)) {
                fstr = '%d';
            }
            else {
                fstr = '%.1f';
            }
        }

        else {
            var expv = -Math.floor(Math.log(interval)/Math.LN10);
            fstr = '%.' + expv + 'f';
        }
        
        return fstr; 
    }

    var _factors = [0.1, 0.2, 0.3, 0.4, 0.5, 0.8, 1, 2, 3, 4, 5];

    var _getLowerFactor = function(f) {
        var i = _factors.indexOf(f);
        if (i > 0) {
            return _factors[i-1];
        }
        else {
            return _factors[_factors.length - 1] / 100;
        }
    };

    var _getHigherFactor = function(f) {
        var i = _factors.indexOf(f);
        if (i < _factors.length-1) {
            return _factors[i+1];
        }
        else {
            return _factors[0] * 100;
        }
    };

    // Given a fixed minimum and maximum and a target number ot ticks
    // figure out the best interval and 
    // return min, max, number ticks, format string and tick interval
    function bestConstrainedInterval(min, max, nttarget) {
        // run through possible number to ticks and see which interval is best
        var low = Math.floor(nttarget/2);
        var hi = Math.ceil(nttarget*1.5);
        var badness = Number.MAX_VALUE;
        var r = (max - min);
        var temp;
        var sd;
        var bestNT;
        var fsd;
        var fs;
        var gsf = $.jqplot.getSignificantFigures;
        var currentNT;
        var bestPrec;

        for (var i=0, l=hi-low+1; i<l; i++) {
            currentNT = low + i;
            temp = r/(currentNT-1);
            sd = gsf(temp);

            temp = Math.abs(nttarget - currentNT) + sd.digitsRight;
            if (temp < badness) {
                badness = temp;
                bestNT = currentNT;
                bestPrec = sd.digitsRight;
            }
            else if (temp === badness) {
                // let nicer ticks trump number ot ticks
                if (sd.digitsRight < bestPrec) {
                    bestNT = currentNT;
                    bestPrec = sd.digitsRight;
                }
            }

        }

        fsd = Math.max(bestPrec, Math.max(gsf(min).digitsRight, gsf(max).digitsRight));
        if (fsd === 0) {
            fs = '%d';
        }
        else {
            fs = '%.' + fsd + 'f';
        }
        temp = r / (bestNT - 1);
        // min, max, number ticks, format string, tick interval
        return [min, max, bestNT, fs, temp];
    }

    // This will return an interval of form 2 * 10^n, 5 * 10^n or 10 * 10^n
    // it is based soley on the range and number of ticks.  So if user specifies
    // number of ticks, use this.
    function bestInterval(range, numberTicks) {
        numberTicks = numberTicks || 7;
        var minimum = range / (numberTicks - 1);
        var magnitude = Math.pow(10, Math.floor(Math.log(minimum) / Math.LN10));
        var residual = minimum / magnitude;
        var interval;
        // "nicest" ranges are 1, 2, 5 or powers of these.
        // for magnitudes below 1, only allow these. 
        if (magnitude < 1) {
            if (residual > 5) {
                interval = 10 * magnitude;
            }
            else if (residual > 2) {
                interval = 5 * magnitude;
            }
            else if (residual > 1) {
                interval = 2 * magnitude;
            }
            else {
                interval = magnitude;
            }
        }
        // for large ranges (whole integers), allow intervals like 3, 4 or powers of these.
        // this helps a lot with poor choices for number of ticks. 
        else {
            if (residual > 5) {
                interval = 10 * magnitude;
            }
            else if (residual > 4) {
                interval = 5 * magnitude;
            }
            else if (residual > 3) {
                interval = 4 * magnitude;
            }
            else if (residual > 2) {
                interval = 3 * magnitude;
            }
            else if (residual > 1) {
                interval = 2 * magnitude;
            }
            else {
                interval = magnitude;
            }
        }

        return interval;
    }

    // This will return an interval of form 2 * 10^n, 5 * 10^n or 10 * 10^n
    // it is based soley on the range of data, number of ticks must be computed later.
    function bestLinearInterval(range, scalefact) {
        scalefact = scalefact || 1;
        var expv = Math.floor(Math.log(range)/Math.LN10);
        var magnitude = Math.pow(10, expv);
        
        var f = range / magnitude;
        var fact;
        // for large plots, scalefact will decrease f and increase number of ticks.
        // for small plots, scalefact will increase f and decrease number of ticks.
        f = f/scalefact;

        // for large plots, smaller interval, more ticks.
        if (f<=0.38) {
            fact = 0.1;
        }
        else if (f<=1.6) {
            fact = 0.2;
        }
        else if (f<=4.0) {
            fact = 0.5;
        }
        else if (f<=8.0) {
            fact = 1.0;
        }
        // for very small plots, larger interval, less ticks in number ticks
        else if (f<=16.0) {
            fact = 2;
        }
        else {
            fact = 5;
        } 

        return fact*magnitude; 
    }

    function bestLinearComponents(range, scalefact) {
        var expv = Math.floor(Math.log(range)/Math.LN10);
        var magnitude = Math.pow(10, expv);
        
        var f = range / magnitude;
        var interval;
        var fact;
        // for large plots, scalefact will decrease f and increase number of ticks.
        // for small plots, scalefact will increase f and decrease number of ticks.
        f = f/scalefact;

        // for large plots, smaller interval, more ticks.
        if (f<=0.38) {
            fact = 0.1;
        }
        else if (f<=1.6) {
            fact = 0.2;
        }
        else if (f<=4.0) {
            fact = 0.5;
        }
        else if (f<=8.0) {
            fact = 1.0;
        }
        // for very small plots, larger interval, less ticks in number ticks
        else if (f<=16.0) {
            fact = 2;
        }
        else {
            fact = 5;
        } 

        interval = fact * magnitude;

        return [interval, fact, magnitude];
    }

    // Given the min and max for a dataset, return suitable endpoints
    // for the graphing, a good number for the number of ticks, and a
    // format string so that extraneous digits are not displayed.
    // returned is an array containing [min, max, nTicks, format]
    $.jqplot.LinearTickGenerator = function(axis_min, axis_max, scalefact, numberTicks) {
        // if endpoints are equal try to include zero otherwise include one
        if (axis_min === axis_max) {
            axis_max = (axis_max) ? 0 : 1;
        }

        scalefact = scalefact || 1.0;

        // make sure range is positive
        if (axis_max < axis_min) {
            var a = axis_max;
            axis_max = axis_min;
            axis_min = a;
        }

        var r = [];
        var ss = bestLinearInterval(axis_max - axis_min, scalefact);
        
        if (numberTicks == null) {

            // Figure out the axis min, max and number of ticks
            // the min and max will be some multiple of the tick interval,
            // 1*10^n, 2*10^n or 5*10^n.  This gaurantees that, if the
            // axis min is negative, 0 will be a tick.
            r[0] = Math.floor(axis_min / ss) * ss;  // min
            r[1] = Math.ceil(axis_max / ss) * ss;   // max
            r[2] = Math.round((r[1]-r[0])/ss+1.0);  // number of ticks
            r[3] = bestFormatString(ss);            // format string
            r[4] = ss;                              // tick Interval
        }

        else {
            var tempr = [];

            // Figure out the axis min, max and number of ticks
            // the min and max will be some multiple of the tick interval,
            // 1*10^n, 2*10^n or 5*10^n.  This gaurantees that, if the
            // axis min is negative, 0 will be a tick.
            tempr[0] = Math.floor(axis_min / ss) * ss;  // min
            tempr[1] = Math.ceil(axis_max / ss) * ss;   // max
            tempr[2] = Math.round((tempr[1]-tempr[0])/ss+1.0);    // number of ticks
            tempr[3] = bestFormatString(ss);            // format string
            tempr[4] = ss;                              // tick Interval

            // first, see if we happen to get the right number of ticks
            if (tempr[2] === numberTicks) {
                r = tempr;
            }

            else {

                var newti = bestInterval(tempr[1] - tempr[0], numberTicks);

                r[0] = tempr[0];
                r[2] = numberTicks;
                r[4] = newti;
                r[3] = bestFormatString(newti);
                r[1] = r[0] + (r[2] - 1) * r[4];        
            }
        }

        return r;
    };

    $.jqplot.LinearTickGenerator.bestLinearInterval = bestLinearInterval;
    $.jqplot.LinearTickGenerator.bestInterval = bestInterval;
    $.jqplot.LinearTickGenerator.bestLinearComponents = bestLinearComponents;
    $.jqplot.LinearTickGenerator.bestConstrainedInterval = bestConstrainedInterval;


    // class: $.jqplot.MarkerRenderer
    // The default jqPlot marker renderer, rendering the points on the line.
    $.jqplot.MarkerRenderer = function(options){
        // Group: Properties
        
        // prop: show
        // wether or not to show the marker.
        this.show = true;
        // prop: style
        // One of diamond, circle, square, x, plus, dash, filledDiamond, filledCircle, filledSquare
        this.style = 'filledCircle';
        // prop: lineWidth
        // size of the line for non-filled markers.
        this.lineWidth = 1;
        // prop: size
        // Size of the marker (diameter or circle, length of edge of square, etc.)
        this.size = 9.0;
        // prop: color
        // color of marker.  Will be set to color of series by default on init.
        this.color = '#666666';
        // prop: shadow
        // wether or not to draw a shadow on the line
        this.shadow = true;
        // prop: shadowAngle
        // Shadow angle in degrees
        this.shadowAngle = 45;
        // prop: shadowOffset
        // Shadow offset from line in pixels
        this.shadowOffset = 1;
        // prop: shadowDepth
        // Number of times shadow is stroked, each stroke offset shadowOffset from the last.
        this.shadowDepth = 3;
        // prop: shadowAlpha
        // Alpha channel transparency of shadow.  0 = transparent.
        this.shadowAlpha = '0.07';
        // prop: shadowRenderer
        // Renderer that will draws the shadows on the marker.
        this.shadowRenderer = new $.jqplot.ShadowRenderer();
        // prop: shapeRenderer
        // Renderer that will draw the marker.
        this.shapeRenderer = new $.jqplot.ShapeRenderer();
        
        $.extend(true, this, options);
    };
    
    $.jqplot.MarkerRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
        var sdopt = {angle:this.shadowAngle, offset:this.shadowOffset, alpha:this.shadowAlpha, lineWidth:this.lineWidth, depth:this.shadowDepth, closePath:true};
        if (this.style.indexOf('filled') != -1) {
            sdopt.fill = true;
        }
        if (this.style.indexOf('ircle') != -1) {
            sdopt.isarc = true;
            sdopt.closePath = false;
        }
        this.shadowRenderer.init(sdopt);
        
        var shopt = {fill:false, isarc:false, strokeStyle:this.color, fillStyle:this.color, lineWidth:this.lineWidth, closePath:true};
        if (this.style.indexOf('filled') != -1) {
            shopt.fill = true;
        }
        if (this.style.indexOf('ircle') != -1) {
            shopt.isarc = true;
            shopt.closePath = false;
        }
        this.shapeRenderer.init(shopt);
    };
    
    $.jqplot.MarkerRenderer.prototype.drawDiamond = function(x, y, ctx, fill, options) {
        var stretch = 1.2;
        var dx = this.size/2/stretch;
        var dy = this.size/2*stretch;
        var points = [[x-dx, y], [x, y+dy], [x+dx, y], [x, y-dy]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);
    };
    
    $.jqplot.MarkerRenderer.prototype.drawPlus = function(x, y, ctx, fill, options) {
        var stretch = 1.0;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var points1 = [[x, y-dy], [x, y+dy]];
        var points2 = [[x+dx, y], [x-dx, y]];
        var opts = $.extend(true, {}, this.options, {closePath:false});
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points1, {closePath:false});
            this.shadowRenderer.draw(ctx, points2, {closePath:false});
        }
        this.shapeRenderer.draw(ctx, points1, opts);
        this.shapeRenderer.draw(ctx, points2, opts);
    };
    
    $.jqplot.MarkerRenderer.prototype.drawX = function(x, y, ctx, fill, options) {
        var stretch = 1.0;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var opts = $.extend(true, {}, this.options, {closePath:false});
        var points1 = [[x-dx, y-dy], [x+dx, y+dy]];
        var points2 = [[x-dx, y+dy], [x+dx, y-dy]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points1, {closePath:false});
            this.shadowRenderer.draw(ctx, points2, {closePath:false});
        }
        this.shapeRenderer.draw(ctx, points1, opts);
        this.shapeRenderer.draw(ctx, points2, opts);
    };
    
    $.jqplot.MarkerRenderer.prototype.drawDash = function(x, y, ctx, fill, options) {
        var stretch = 1.0;
        var dx = this.size/2*stretch;
        var dy = this.size/2*stretch;
        var points = [[x-dx, y], [x+dx, y]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);
    };
    
    $.jqplot.MarkerRenderer.prototype.drawLine = function(p1, p2, ctx, fill, options) {
        var points = [p1, p2];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);
    };
    
    $.jqplot.MarkerRenderer.prototype.drawSquare = function(x, y, ctx, fill, options) {
        var stretch = 1.0;
        var dx = this.size/2/stretch;
        var dy = this.size/2*stretch;
        var points = [[x-dx, y-dy], [x-dx, y+dy], [x+dx, y+dy], [x+dx, y-dy]];
        if (this.shadow) {
            this.shadowRenderer.draw(ctx, points);
        }
        this.shapeRenderer.draw(ctx, points, options);
    };
    
    $.jqplot.MarkerRenderer.prototype.drawCircle = function(x, y, ctx, fill, options, amplify) {
        var radius = this.size/2;
        if(!amplify && options.isHideDataPt)
        {
           return;
        }
        //Math.PI is changed to 3.1416 because line chart circle not showing in IE8 for some points
        var end = 2*Math.PI;
        var points = [x, y, radius, 0, end, true];
        this.shapeRenderer.draw(ctx, points, options);
    };
    
    $.jqplot.MarkerRenderer.prototype.draw = function(x, y, ctx, options, amplify) {
        options = options || {};
        // hack here b/c shape renderer uses canvas based color style options
        // and marker uses css style names.
        if (options.show == null || options.show != false) {
            if (options.color && !options.fillStyle) {
                options.fillStyle = options.color;
            }
            if (options.color && !options.strokeStyle) {
                options.strokeStyle = options.color;
            }
            switch (this.style) {
                case 'diamond':
                    this.drawDiamond(x,y,ctx, false, options);
                    break;
                case 'filledDiamond':
                    this.drawDiamond(x,y,ctx, true, options);
                    break;
                case 'circle':
                    this.drawCircle(x,y,ctx, false, options, amplify);
                    break;
                case 'filledCircle':
                    this.drawCircle(x,y,ctx, true, options);
                    break;
                case 'square':
                    this.drawSquare(x,y,ctx, false, options);
                    break;
                case 'filledSquare':
                    this.drawSquare(x,y,ctx, true, options);
                    break;
                case 'x':
                    this.drawX(x,y,ctx, true, options);
                    break;
                case 'plus':
                    this.drawPlus(x,y,ctx, true, options);
                    break;
                case 'dash':
                    this.drawDash(x,y,ctx, true, options);
                    break;
                case 'line':
                    this.drawLine(x, y, ctx, false, options);
                    break;
                default:
                    this.drawDiamond(x,y,ctx, false, options);
                    break;
            }
        }
    };
    
    // class: $.jqplot.shadowRenderer
    // The default jqPlot shadow renderer, rendering shadows behind shapes.
    $.jqplot.ShadowRenderer = function(options){ 
        // Group: Properties
       
        // prop: angle
        // Angle of the shadow in degrees.  Measured counter-clockwise from the x axis.
        this.angle = 45;
        // prop: offset
        // Pixel offset at the given shadow angle of each shadow stroke from the last stroke.
        this.offset = 1;
        // prop: alpha
        // alpha transparency of shadow stroke.
        this.alpha = 0.07;
        // prop: lineWidth
        // width of the shadow line stroke.
        this.lineWidth = 1.5;
        // prop: lineJoin
        // How line segments of the shadow are joined.
        this.lineJoin = 'miter';
        // prop: lineCap
        // how ends of the shadow line are rendered.
        this.lineCap = 'round';
        // prop; closePath
        // whether line path segment is closed upon itself.
        this.closePath = false;
        // prop: fill
        // whether to fill the shape.
        this.fill = false;
        // prop: depth
        // how many times the shadow is stroked.  Each stroke will be offset by offset at angle degrees.
        this.depth = 3;
        this.strokeStyle = 'rgba(0,0,0,0.1)';
        // prop: isarc
        // wether the shadow is an arc or not.
        this.isarc = false;
        
        $.extend(true, this, options);
    };
    
    $.jqplot.ShadowRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
    };
    
    // function: draw
    // draws an transparent black (i.e. gray) shadow.
    //
    // ctx - canvas drawing context
    // points - array of points or [x, y, radius, start angle (rad), end angle (rad)]
    $.jqplot.ShadowRenderer.prototype.draw = function(ctx, points, options) {
        ctx.save();
        var opts = (options != null) ? options : {};
        var fill = (opts.fill != null) ? opts.fill : this.fill;
        var fillRect = (opts.fillRect != null) ? opts.fillRect : this.fillRect;
        var closePath = (opts.closePath != null) ? opts.closePath : this.closePath;
        var offset = (opts.offset != null) ? opts.offset : this.offset;
        var alpha = (opts.alpha != null) ? opts.alpha : this.alpha;
        var depth = (opts.depth != null) ? opts.depth : this.depth;
        var isarc = (opts.isarc != null) ? opts.isarc : this.isarc;
        var linePattern = (opts.linePattern != null) ? opts.linePattern : this.linePattern;
        ctx.lineWidth = (opts.lineWidth != null) ? opts.lineWidth : this.lineWidth;
        ctx.lineJoin = (opts.lineJoin != null) ? opts.lineJoin : this.lineJoin;
        ctx.lineCap = (opts.lineCap != null) ? opts.lineCap : this.lineCap;
        ctx.strokeStyle = opts.strokeStyle || this.strokeStyle || 'rgba(0,0,0,'+alpha+')';
        ctx.fillStyle ='#c5c5c5';
        for (var j=0; j<depth; j++) {
            var ctxPattern = $.jqplot.LinePattern(ctx, linePattern);
            ctx.translate(Math.cos(this.angle*Math.PI/180)*offset, Math.sin(this.angle*Math.PI/180)*offset);
            ctxPattern.beginPath();
            if (isarc) {
                ctx.arc(points[0], points[1], points[2], points[3], points[4], true);                
            }
            else if (fillRect) {
                if (fillRect) {
                    ctx.fillRect(points[0], points[1], points[2], points[3]);
                }
            }
            else if (points && points.length){
                var move = true;
                for (var i=0; i<points.length; i++) {
                    // skip to the first non-null point and move to it.
                    if (points[i][0] != null && points[i][1] != null) {
                        if (move) {
                            ctxPattern.moveTo(points[i][0], points[i][1]);
                            move = false;
                        }
                        else {
                            ctxPattern.lineTo(points[i][0], points[i][1]);
                        }
                    }
                    else {
                        move = true;
                    }
                }
                
            }
            if (closePath) {
                ctxPattern.closePath();
            }
            if (fill) {
                ctx.fill();
            }
            else {
                ctx.stroke();
            }
        }
        ctx.restore();
    };
    
    // class: $.jqplot.shapeRenderer
    // The default jqPlot shape renderer.  Given a set of points will
    // plot them and either stroke a line (fill = false) or fill them (fill = true).
    // If a filled shape is desired, closePath = true must also be set to close
    // the shape.
    $.jqplot.ShapeRenderer = function(options){
        
        this.lineWidth = 1;
        // prop: linePattern
        // line pattern 'dashed', 'dotted', 'solid', some combination
        // of '-' and '.' characters such as '.-.' or a numerical array like 
        // [draw, skip, draw, skip, ...] such as [1, 10] to draw a dotted line, 
        // [1, 10, 20, 10] to draw a dot-dash line, and so on.
        this.linePattern = 'solid';
        // prop: lineJoin
        // How line segments of the shadow are joined.
        this.lineJoin = 'miter';
        // prop: lineCap
        // how ends of the shadow line are rendered.
        this.lineCap = 'round';
        // prop; closePath
        // whether line path segment is closed upon itself.
        this.closePath = false;
        // prop: fill
        // whether to fill the shape.
        this.fill = false;
        // prop: isarc
        // wether the shadow is an arc or not.
        this.isarc = false;
        // prop: fillRect
        // true to draw shape as a filled rectangle.
        this.fillRect = false;
        // prop: strokeRect
        // true to draw shape as a stroked rectangle.
        this.strokeRect = false;
        // prop: clearRect
        // true to cear a rectangle.
        this.clearRect = false;
        // prop: strokeStyle
        // css color spec for the stoke style
        this.strokeStyle = '#999999';
        // prop: fillStyle
        // css color spec for the fill style.
        this.fillStyle = '#999999'; 
        
        $.extend(true, this, options);
    };
    
    $.jqplot.ShapeRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
    };
    
    // function: draw
    // draws the shape.
    //
    // ctx - canvas drawing context
    // points - array of points for shapes or 
    // [x, y, width, height] for rectangles or
    // [x, y, radius, start angle (rad), end angle (rad)] for circles and arcs.
    $.jqplot.ShapeRenderer.prototype.draw = function(ctx, points, options) {
        ctx.save();
        var opts = (options != null) ? options : {};
        var fill = (opts.fill != null) ? opts.fill : this.fill;
        var closePath = (opts.closePath != null) ? opts.closePath : this.closePath;
        var fillRect = (opts.fillRect != null) ? opts.fillRect : this.fillRect;
        var strokeRect = (opts.strokeRect != null) ? opts.strokeRect : this.strokeRect;
        var clearRect = (opts.clearRect != null) ? opts.clearRect : this.clearRect;
        var isarc = (opts.isarc != null) ? opts.isarc : this.isarc;
        var linePattern = (opts.linePattern != null) ? opts.linePattern : this.linePattern;
        var ctxPattern = $.jqplot.LinePattern(ctx, linePattern);
        ctx.lineWidth = opts.lineWidth || this.lineWidth;
        ctx.lineJoin = opts.lineJoin || this.lineJoin;
        ctx.lineCap = opts.lineCap || this.lineCap;
        ctx.strokeStyle = (opts.strokeStyle || opts.color) || this.strokeStyle;
        ctx.fillStyle = opts.fillStyle || this.fillStyle;
        ctx.beginPath();
        if (isarc) {
            var isIE8Line = options.isBigData && $.jqplot.use_excanvas;
            ctx.arc(points[0], points[1], points[2], points[3], points[4], false, isIE8Line, ctx.strokeStyle);   
            if(isIE8Line)
            {
                // IE8 line chart only draw div for marker
                return;
            }
            if (closePath) {
                ctx.closePath();
            }
            if (fill) {
                ctx.fill();
            }
            else {
			if( opts.tinyCircleStyle)
			{
				ctx.fillStyle = opts.tinyCircleStyle;
				ctx.fill();
			}
                ctx.stroke();
            }
            ctx.restore();
            return;
        }
        else if (clearRect) {
            ctx.clearRect(points[0], points[1], points[2], points[3]);
            ctx.restore();
            return;
        }
        else if (fillRect || strokeRect) {
            if (fillRect) {
                ctx.fillRect(points[0], points[1], points[2], points[3]);
            }
            if (strokeRect) {
                ctx.strokeRect(points[0], points[1], points[2], points[3]);
                ctx.restore();
                return;
            }
        }
        else if (points && points.length){
            var move = true;
            for (var i=0; i<points.length; i++) {
                // skip to the first non-null point and move to it.
                if (points[i][0] != null && points[i][1] != null) {
                    if (move) {
                        ctxPattern.moveTo(points[i][0], points[i][1]);
                        move = false;
                    }
                    else {
                        ctxPattern.lineTo(points[i][0], points[i][1]);
                    }
                }
                else {
                    move = true;
                }
            }
            if (closePath) {
                ctxPattern.closePath();
            }
            if (fill) {
                ctx.fill();
            }
            else {
                ctx.stroke();
            }
        }
        ctx.restore();
    };
    
    // class $.jqplot.TableLegendRenderer
    // The default legend renderer for jqPlot.
    $.jqplot.TableLegendRenderer = function(){
        
    };
    
    $.jqplot.TableLegendRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
    };

  $.jqplot.TableLegendRenderer.prototype.destroy = function()
  {
    if(this._elem)
    {
        tiny.garbageCollect(this._elem, true);
        this._elem = null;
    }
  }
        
    $.jqplot.TableLegendRenderer.prototype.addrow = function (label, color, pad, reverse) {
        var rs = (pad) ? this.rowSpacing+'px' : '0px';
        var tr;
        var td;
        var elem;
        var div0;
        var div1;
        elem = document.createElement('tr');
        tr = $(elem);
        tr.addClass('jqplot-table-legend');
        elem = null;

        if (reverse){
            tr.prependTo(this._elem);
        }

        else{
            tr.appendTo(this._elem);
        }

        if (this.showSwatches) {
            td = $(document.createElement('td'));
            td.addClass('jqplot-table-legend jqplot-table-legend-swatch');
            td.css({textAlign: 'center', paddingTop: rs});

            div0 = $(document.createElement('div'));
            div0.addClass('jqplot-table-legend-swatch-outline');
            div1 = $(document.createElement('div'));
            div1.addClass('jqplot-table-legend-swatch');
            div1.css({backgroundColor: color, borderColor: color});

            tr.append(td.append(div0.append(div1)));

        }
        if (this.showLabels) {
            td = $(document.createElement('td'));
            td.addClass('jqplot-table-legend jqplot-table-legend-label');
            td.css('paddingTop', rs);
            tr.append(td);

            if (this.escapeHtml) {
                td.text(label);
            }
            else {
                td.html(label);
            }
        }
        td = null;
        div0 = null;
        div1 = null;
        tr = null;
        elem = null;
    };
    
    // called with scope of legend
    $.jqplot.TableLegendRenderer.prototype.draw = function() {
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null;
        }

        if (this.show) {
            var series = this._series;
            // make a table.  one line label per row.
            var elem = document.createElement('table');
            this._elem = $(elem);
            this._elem.addClass('jqplot-table-legend');

            var ss = {position:'absolute'};
            if (this.background) {
                ss['background'] = this.background;
            }
            if (this.border) {
                ss['border'] = this.border;
            }
            if (this.fontSize) {
                ss['fontSize'] = this.fontSize;
            }
            if (this.fontFamily) {
                ss['fontFamily'] = this.fontFamily;
            }
            if (this.textColor) {
                ss['textColor'] = this.textColor;
            }
            if (this.marginTop != null) {
                ss['marginTop'] = this.marginTop;
            }
            if (this.marginBottom != null) {
                ss['marginBottom'] = this.marginBottom;
            }
            if (this.marginLeft != null) {
                ss['marginLeft'] = this.marginLeft;
            }
            if (this.marginRight != null) {
                ss['marginRight'] = this.marginRight;
            }
            
        
            var pad = false, 
                reverse = false,
				s;
            for (var i = 0; i< series.length; i++) {
                s = series[i];
                if (s._stack || s.renderer.constructor == $.jqplot.BezierCurveRenderer){
                    reverse = true;
                }
                if (s.show && s.showLabel) {
                    var lt = this.labels[i] || s.label.toString();
                    if (lt) {
                        var color = s.color;
                        if (reverse && i < series.length - 1){
                            pad = true;
                        }
                        else if (reverse && i == series.length - 1){
                            pad = false;
                        }
                        this.renderer.addrow.call(this, lt, color, pad, reverse);
                        pad = true;
                    }
                    // let plugins add more rows to legend.  Used by trend line plugin.
                    for (var j=0; j<$.jqplot.addLegendRowHooks.length; j++) {
                        var item = $.jqplot.addLegendRowHooks[j].call(this, s);
                        if (item) {
                            this.renderer.addrow.call(this, item.label, item.color, pad);
                            pad = true;
                        } 
                    }
                    lt = null;
                }
            }
        }
        return this._elem;
    };
    
    $.jqplot.TableLegendRenderer.prototype.pack = function(offsets) {
        if (this.show) {       
            if (this.placement == 'insideGrid') {
                switch (this.location) {
                    case 'nw':
                        var a = offsets.left;
                        var b = offsets.top;
                        this._elem.css('left', a);
                        this._elem.css('top', b);
                        break;
                    case 'n':
                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;
                        var b = offsets.top;
                        this._elem.css('left', a);
                        this._elem.css('top', b);
                        break;
                    case 'ne':
                        var a = offsets.right;
                        var b = offsets.top;
                        this._elem.css({right:a, top:b});
                        break;
                    case 'e':
                        var a = offsets.right;
                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;
                        this._elem.css({right:a, top:b});
                        break;
                    case 'se':
                        var a = offsets.right;
                        var b = offsets.bottom;
                        this._elem.css({right:a, bottom:b});
                        break;
                    case 's':
                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;
                        var b = offsets.bottom;
                        this._elem.css({left:a, bottom:b});
                        break;
                    case 'sw':
                        var a = offsets.left;
                        var b = offsets.bottom;
                        this._elem.css({left:a, bottom:b});
                        break;
                    case 'w':
                        var a = offsets.left;
                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;
                        this._elem.css({left:a, top:b});
                        break;
                    default:  // same as 'se'
                        var a = offsets.right;
                        var b = offsets.bottom;
                        this._elem.css({right:a, bottom:b});
                        break;
                }
                
            }
            else if (this.placement == 'outside'){
                switch (this.location) {
                    case 'nw':
                        var a = this._plotDimensions.width - offsets.left;
                        var b = offsets.top;
                        this._elem.css('right', a);
                        this._elem.css('top', b);
                        break;
                    case 'n':
                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;
                        var b = this._plotDimensions.height - offsets.top;
                        this._elem.css('left', a);
                        this._elem.css('bottom', b);
                        break;
                    case 'ne':
                        var a = this._plotDimensions.width - offsets.right;
                        var b = offsets.top;
                        this._elem.css({left:a, top:b});
                        break;
                    case 'e':
                        var a = this._plotDimensions.width - offsets.right;
                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;
                        this._elem.css({left:a, top:b});
                        break;
                    case 'se':
                        var a = this._plotDimensions.width - offsets.right;
                        var b = offsets.bottom;
                        this._elem.css({left:a, bottom:b});
                        break;
                    case 's':
                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;
                        var b = this._plotDimensions.height - offsets.bottom;
                        this._elem.css({left:a, top:b});
                        break;
                    case 'sw':
                        var a = this._plotDimensions.width - offsets.left;
                        var b = offsets.bottom;
                        this._elem.css({right:a, bottom:b});
                        break;
                    case 'w':
                        var a = this._plotDimensions.width - offsets.left;
                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;
                        this._elem.css({right:a, top:b});
                        break;
                    default:  // same as 'se'
                        var a = offsets.right;
                        var b = offsets.bottom;
                        this._elem.css({right:a, bottom:b});
                        break;
                }
            }
            else {
                switch (this.location) {
                    case 'nw':
                        this._elem.css({left:0, top:offsets.top});
                        break;
                    case 'n':
                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;
                        this._elem.css({left: a, top:offsets.top});
                        break;
                    case 'ne':
                        this._elem.css({right:0, top:offsets.top});
                        break;
                    case 'e':
                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;
                        this._elem.css({right:offsets.right, top:b});
                        break;
                    case 'se':
                        this._elem.css({right:offsets.right, bottom:offsets.bottom});
                        break;
                    case 's':
                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;
                        // As per latest UCD the legend has to be in the south indented to left.
                        this._elem.css({left: 0, bottom:offsets.bottom});
                        break;
                    case 'c':
                        var a = (offsets.left + (this._plotDimensions.width - offsets.right))/2 - this.getWidth()/2;
                        this._elem.css({left: a, bottom:offsets.bottom});
                        break;
                    case 'sw':
                        this._elem.css({left:offsets.left, bottom:offsets.bottom});
                        break;
                    case 'w':
                        var b = (offsets.top + (this._plotDimensions.height - offsets.bottom))/2 - this.getHeight()/2;
                        this._elem.css({left:offsets.left, top:b});
                        break;
                    default:  // same as 'se'
                        this._elem.css({right:offsets.right, bottom:offsets.bottom});
                        break;
                }
            }
        } 
    };

    /**
     * Class: $.jqplot.ThemeEngine
     * Theme Engine provides a programatic way to change some of the  more
     * common jqplot styling options such as fonts, colors and grid options.
     * A theme engine instance is created with each plot.  The theme engine
     * manages a collection of themes which can be modified, added to, or 
     * applied to the plot.
     * 
     * The themeEngine class is not instantiated directly.
     * When a plot is initialized, the current plot options are scanned
     * an a default theme named "Default" is created.  This theme is
     * used as the basis for other themes added to the theme engine and
     * is always available.
     * 
     * 
     */
    $.jqplot.ThemeEngine = function(){
        // Group: Properties
        //
        // prop: themes
        // hash of themes managed by the theme engine.  
        // Indexed by theme name.
        this.themes = {};
        // prop: activeTheme
        // Pointer to currently active theme
        this.activeTheme=null;
        
    };
    
    // called with scope of plot
    $.jqplot.ThemeEngine.prototype.init = function() {
        // get the Default theme from the current plot settings.
        var th = new $.jqplot.Theme({_name:'Default'});
        var n, i, nn;
        
        for (n in th.target) {
            if (n == "textColor") {
                th.target[n] = this.target.css('color');
            }
            else {
                th.target[n] = this.target.css(n);
            }
        }
        
        if (this.title.show && this.title._elem) {
            for (n in th.title) {
                if (n == "textColor") {
                    th.title[n] = this.title._elem.css('color');
                }
                else {
                    th.title[n] = this.title._elem.css(n);
                }
            }
        }
        
        for (n in th.grid) {
            th.grid[n] = this.grid[n];
        }
        if (th.grid.backgroundColor == null && this.grid.background != null) {
            th.grid.backgroundColor = this.grid.background;
        }
        if (this.legend.show && this.legend._elem) {
            for (n in th.legend) {
                if (n == 'textColor') {
                    th.legend[n] = this.legend._elem.css('color');
                }
                else {
                    th.legend[n] = this.legend._elem.css(n);
                }
            }
        }
        var s;
        
        for (i=0; i<this.series.length; i++) {
            s = this.series[i];
            if (s.renderer.constructor == $.jqplot.LineRenderer) {
                th.series.push(new LineSeriesProperties());
            }
            else if (s.renderer.constructor == $.jqplot.BarRenderer) {
                th.series.push(new BarSeriesProperties());
            }
            else if (s.renderer.constructor == $.jqplot.PieRenderer) {
                th.series.push(new PieSeriesProperties());
            }
            else if (s.renderer.constructor == $.jqplot.DonutRenderer) {
                th.series.push(new DonutSeriesProperties());
            }
            else if (s.renderer.constructor == $.jqplot.FunnelRenderer) {
                th.series.push(new FunnelSeriesProperties());
            }
            else if (s.renderer.constructor == $.jqplot.MeterGaugeRenderer) {
                th.series.push(new MeterSeriesProperties());
            }
            else {
                th.series.push({});
            }
            for (n in th.series[i]) {
                th.series[i][n] = s[n];
            }
        }
        var a, ax;
        for (n in this.axes) {
            ax = this.axes[n];
            a = th.axes[n] = new AxisProperties();
            a.borderColor = ax.borderColor;
            a.borderWidth = ax.borderWidth;
            if (ax._ticks && ax._ticks[0]) {
                for (nn in a.ticks) {
                    if (ax._ticks[0].hasOwnProperty(nn)) {
                        a.ticks[nn] = ax._ticks[0][nn];
                    }
                    else if (ax._ticks[0]._elem){
                        a.ticks[nn] = ax._ticks[0]._elem.css(nn);
                    }
                }
            }
            if (ax._label && ax._label.show) {
                for (nn in a.label) {
                    if (ax._label[nn]) {
                        a.label[nn] = ax._label[nn];
                    }
                    else if (ax._label._elem){
                        if (nn == 'textColor') {
                            a.label[nn] = ax._label._elem.css('color');
                        }
                        else {
                            a.label[nn] = ax._label._elem.css(nn);
                        }
                    }
                }
            }
        }
        this.themeEngine._add(th);
        this.themeEngine.activeTheme  = this.themeEngine.themes[th._name];
    };
    /**
     * Group: methods
     * 
     * method: get
     * 
     * Get and return the named theme or the active theme if no name given.
     * 
     * parameter:
     * 
     * name - name of theme to get.
     * 
     * returns:
     * 
     * Theme instance of given name.
     */   
    $.jqplot.ThemeEngine.prototype.get = function(name) {
        if (!name) {
            // return the active theme
            return this.activeTheme;
        }
        else {
            return this.themes[name];
        }
    };
    
    function numericalOrder(a,b) { return a-b; }
    
    /**
     * method: getThemeNames
     * 
     * Return the list of theme names in this manager in alpha-numerical order.
     * 
     * parameter:
     * 
     * None
     * 
     * returns:
     * 
     * A the list of theme names in this manager in alpha-numerical order.
     */       
    $.jqplot.ThemeEngine.prototype.getThemeNames = function() {
        var tn = [];
        for (var n in this.themes) {
            tn.push(n);
        }
        return tn.sort(numericalOrder);
    };

    /**
     * method: getThemes
     * 
     * Return a list of themes in alpha-numerical order by name.
     * 
     * parameter:
     * 
     * None
     * 
     * returns:
     * 
     * A list of themes in alpha-numerical order by name.
     */ 
    $.jqplot.ThemeEngine.prototype.getThemes = function() {
        var tn = [];
        var themes = [];
        for (var n in this.themes) {
            tn.push(n);
        }
        tn.sort(numericalOrder);
        for (var i=0; i<tn.length; i++) {
            themes.push(this.themes[tn[i]]);
        }
        return themes;
    };
    
    $.jqplot.ThemeEngine.prototype.activate = function(plot, name) {
        // sometimes need to redraw whole plot.
        var redrawPlot = false;
        if (!name && this.activeTheme && this.activeTheme._name) {
            name = this.activeTheme._name;
        }
        if (!this.themes.hasOwnProperty(name)) {
            throw new Error("No theme of that name");
        }
        else {
            var th = this.themes[name];
            this.activeTheme = th;
            var val, checkBorderColor = false, checkBorderWidth = false;
            var arr = ['xaxis', 'x2axis', 'yaxis', 'y2axis'];
            
            for (i=0; i<arr.length; i++) {
                var ax = arr[i];
                if (th.axesStyles.borderColor != null) {
                    plot.axes[ax].borderColor = th.axesStyles.borderColor;
                }
                if (th.axesStyles.borderWidth != null) {
                    plot.axes[ax].borderWidth = th.axesStyles.borderWidth;
                }
            }
            
            for (var axname in plot.axes) {
                var axis = plot.axes[axname];
                if (axis.show) {
                    var thaxis = th.axes[axname] || {};
                    var thaxstyle = th.axesStyles;
                    var thax = $.jqplot.extend(true, {}, thaxis, thaxstyle);
                    val = (th.axesStyles.borderColor != null) ? th.axesStyles.borderColor : thax.borderColor;
                    if (thax.borderColor != null) {
                        axis.borderColor = thax.borderColor;
                        redrawPlot = true;
                    }
                    val = (th.axesStyles.borderWidth != null) ? th.axesStyles.borderWidth : thax.borderWidth;
                    if (thax.borderWidth != null) {
                        axis.borderWidth = thax.borderWidth;
                        redrawPlot = true;
                    }
                    if (axis._ticks && axis._ticks[0]) {
                        for (var nn in thax.ticks) {
                            val = thax.ticks[nn];
                            if (val != null) {
                                axis.tickOptions[nn] = val;
                                axis._ticks = [];
                                redrawPlot = true;
                            }
                        }
                    }
                    if (axis._label && axis._label.show) {
                        for (var nn in thax.label) {
                            val = thax.label[nn];
                            if (val != null) {
                                axis.labelOptions[nn] = val;
                                redrawPlot = true;
                            }
                        }
                    }
                    
                }
            }            
            
            for (var n in th.grid) {
                if (th.grid[n] != null) {
                    plot.grid[n] = th.grid[n];
                }
            }
            if (!redrawPlot) {
                plot.grid.draw();
            }
            
            if (plot.legend.show) { 
                for (n in th.legend) {
                    if (th.legend[n] != null) {
                        plot.legend[n] = th.legend[n];
                    }
                }
            }
            if (plot.title.show) {
                for (n in th.title) {
                    if (th.title[n] != null) {
                        plot.title[n] = th.title[n];
                    }
                }
            }
            
            var i;
            for (i=0; i<th.series.length; i++) {
                var opts = {};
                var redrawSeries = false;
                for (n in th.series[i]) {
                    val = (th.seriesStyles[n] != null) ? th.seriesStyles[n] : th.series[i][n];
                    if (val != null) {
                        opts[n] = val;
                        if (n == 'color') {
                            plot.series[i].renderer.shapeRenderer.fillStyle = val;
                            plot.series[i].renderer.shapeRenderer.strokeStyle = val;
                            plot.series[i][n] = val;
                        }
                        else if ((n == 'lineWidth') || (n == 'linePattern')) {
                            plot.series[i].renderer.shapeRenderer[n] = val;
                            plot.series[i][n] = val;
                        }
                        else if (n == 'markerOptions') {
                            merge (plot.series[i].markerOptions, val);
                            merge (plot.series[i].markerRenderer, val);
                        }
                        else {
                            plot.series[i][n] = val;
                        }
                        redrawPlot = true;
                    }
                }
            }
            
            if (redrawPlot) {
                plot.target.empty();
                plot.draw();
            }
            
            for (n in th.target) {
                if (th.target[n] != null) {
                    plot.target.css(n, th.target[n]);
                }
            }
        }
        
    };
    
    $.jqplot.ThemeEngine.prototype._add = function(theme, name) {
        if (name) {
            theme._name = name;
        }
        if (!theme._name) {
            theme._name = Date.parse(new Date());
        }
        if (!this.themes.hasOwnProperty(theme._name)) {
            this.themes[theme._name] = theme;
        }
        else {
            throw new Error("jqplot.ThemeEngine Error: Theme already in use");
        }
    };
    
    // method remove
    // Delete the named theme, return true on success, false on failure.
    

    /**
     * method: remove
     * 
     * Remove the given theme from the themeEngine.
     * 
     * parameters:
     * 
     * name - name of the theme to remove.
     * 
     * returns:
     * 
     * true on success, false on failure.
     */
    $.jqplot.ThemeEngine.prototype.remove = function(name) {
        if (name == 'Default') {
            return false;
        }
        return delete this.themes[name];
    };

    /**
     * method: newTheme
     * 
     * Create a new theme based on the default theme, adding it the themeEngine.
     * 
     * parameters:
     * 
     * name - name of the new theme.
     * obj - optional object of styles to be applied to this new theme.
     * 
     * returns:
     * 
     * new Theme object.
     */
    $.jqplot.ThemeEngine.prototype.newTheme = function(name, obj) {
        if (typeof(name) == 'object') {
            obj = obj || name;
            name = null;
        }
        if (obj && obj._name) {
            name = obj._name;
        }
        else {
            name = name || Date.parse(new Date());
        }
        var th = this.copy(this.themes['Default']._name, name);
        $.jqplot.extend(th, obj);
        return th;
    };
    
    
    function clone(obj){
        if(obj == null || typeof(obj) != 'object'){
            return obj;
        }
    
        var temp = new obj.constructor();
        for(var key in obj){
            temp[key] = clone(obj[key]);
        }   
        return temp;
    }
    
    $.jqplot.clone = clone;
    
    function merge(obj1, obj2) {
        if (obj2 ==  null || typeof(obj2) != 'object') {
            return;
        }
        for (var key in obj2) {
            if (key == 'highlightColors') {
                obj1[key] = clone(obj2[key]);
            }
            if (obj2[key] != null && typeof(obj2[key]) == 'object') {
                if (!obj1.hasOwnProperty(key)) {
                    obj1[key] = {};
                }
                merge(obj1[key], obj2[key]);
            }
            else {
                obj1[key] = obj2[key];
            }
        }
    }
    
    $.jqplot.merge = merge;
    
        // Use the jQuery 1.3.2 extend function since behaviour in jQuery 1.4 seems problematic
    $.jqplot.extend = function() {
        // copy reference to target object
        var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options;

        // Handle a deep copy situation
        if ( typeof target === "boolean" ) {
            deep = target;
            target = arguments[1] || {};
            // skip the boolean and the target
            i = 2;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if ( typeof target !== "object" && !toString.call(target) === "[object Function]" ) {
            target = {};
        }

        for ( ; i < length; i++ ){
            // Only deal with non-null/undefined values
            if ( (options = arguments[ i ]) != null ) {
                // Extend the base object
                for ( var name in options ) {
                    var src = target[ name ], copy = options[ name ];

                    if ( target === copy ) {
                        continue;
                    }

                    // Recurse if we're merging object values
                    if ( deep && copy && typeof copy === "object" && !copy.nodeType ) {
                        target[ name ] = $.jqplot.extend( deep, 
                            // Never move original objects, clone them
                            src || ( copy.length != null ? [ ] : { } )
                        , copy );
                    }
                    // Don't bring in undefined values
                    else if ( copy !== undefined ) {
                        target[ name ] = copy;
                    }
                }
            }
        }
        // Return the modified object
        return target;
    };

    /**
     * method: rename
     * 
     * Rename a theme.
     * 
     * parameters:
     * 
     * oldName - current name of the theme.
     * newName - desired name of the theme.
     * 
     * returns:
     * 
     * new Theme object.
     */
    $.jqplot.ThemeEngine.prototype.rename = function (oldName, newName) {
        if (oldName == 'Default' || newName == 'Default') {
            throw new Error ("jqplot.ThemeEngine Error: Cannot rename from/to Default");
        }
        if (this.themes.hasOwnProperty(newName)) {
            throw new Error ("jqplot.ThemeEngine Error: New name already in use.");
        }
        else if (this.themes.hasOwnProperty(oldName)) {
            var th = this.copy (oldName, newName);
            this.remove(oldName);
            return th;
        }
        throw new Error("jqplot.ThemeEngine Error: Old name or new name invalid");
    };

    /**
     * method: copy
     * 
     * Create a copy of an existing theme in the themeEngine, adding it the themeEngine.
     * 
     * parameters:
     * 
     * sourceName - name of the existing theme.
     * targetName - name of the copy.
     * obj - optional object of style parameter to apply to the new theme.
     * 
     * returns:
     * 
     * new Theme object.
     */
    $.jqplot.ThemeEngine.prototype.copy = function (sourceName, targetName, obj) {
        if (targetName == 'Default') {
            throw new Error ("jqplot.ThemeEngine Error: Cannot copy over Default theme");
        }
        if (!this.themes.hasOwnProperty(sourceName)) {
            var s = "jqplot.ThemeEngine Error: Source name invalid";
            throw new Error(s);
        }
        if (this.themes.hasOwnProperty(targetName)) {
            var s = "jqplot.ThemeEngine Error: Target name invalid";
            throw new Error(s);
        }
        else {
            var th = clone(this.themes[sourceName]);
            th._name = targetName;
            $.jqplot.extend(true, th, obj);
            this._add(th);
            return th;
        }
    };
    
    
    $.jqplot.Theme = function(name, obj) {
        if (typeof(name) == 'object') {
            obj = obj || name;
            name = null;
        }
        name = name || Date.parse(new Date());
        this._name = name;
        this.target = {
            backgroundColor: null
        };
        this.legend = {
            textColor: null,
            fontFamily: null,
            fontSize: null,
            border: null,
            background: null
        };
        this.title = {
            textColor: null,
            fontFamily: null,
            fontSize: null,
            textAlign: null
        };
        this.seriesStyles = {};
        this.series = [];
        this.grid = {
            drawGridlines: null,
            gridLineColor: null,
            gridLineWidth: null,
            backgroundColor: null,
            borderColor: null,
            borderWidth: null,
            shadow: null
        };
        this.axesStyles = {label:{}, ticks:{}};
        this.axes = {};
        if (typeof(obj) == 'string') {
            this._name = obj;
        }
        else if(typeof(obj) == 'object') {
            $.jqplot.extend(true, this, obj);
        }
    };
    
    var AxisProperties = function() {
        this.borderColor = null;
        this.borderWidth = null;
        this.ticks = new AxisTicks();
        this.label = new AxisLabel();
    };
    
    var AxisTicks = function() {
        this.show = null;
        this.showGridline = null;
        this.showLabel = null;
        this.showMark = null;
        this.size = null;
        this.textColor = null;
        this.whiteSpace = null;
        this.fontSize = null;
        this.fontFamily = null;
    };
    
    var AxisLabel = function() {
        this.textColor = null;
        this.whiteSpace = null;
        this.fontSize = null;
        this.fontFamily = null;
        this.fontWeight = null;
    };
    
    var LineSeriesProperties = function() {
        this.color=null;
        this.lineWidth=null;
        this.linePattern=null;
        this.shadow=null;
        this.fillColor=null;
        this.showMarker=null;
        this.markerOptions = new MarkerOptions();
    };
    
    var MarkerOptions = function() {
        this.show = null;
        this.style = null;
        this.lineWidth = null;
        this.size = null;
        this.color = null;
        this.shadow = null;
    };
    
    var BarSeriesProperties = function() {
        this.color=null;
        this.seriesColors=null;
        this.lineWidth=null;
        this.shadow=null;
        this.barPadding=null;
        this.barMargin=null;
        this.barWidth=null;
        this.highlightColors=null;
    };
    
    var PieSeriesProperties = function() {
        this.seriesColors=null;
        this.padding=null;
        this.sliceMargin=null;
        this.fill=null;
        this.shadow=null;
        this.startAngle=null;
        this.lineWidth=null;
        this.highlightColors=null;
    };
    
    var DonutSeriesProperties = function() {
        this.seriesColors=null;
        this.padding=null;
        this.sliceMargin=null;
        this.fill=null;
        this.shadow=null;
        this.startAngle=null;
        this.lineWidth=null;
        this.innerDiameter=null;
        this.thickness=null;
        this.ringMargin=null;
        this.highlightColors=null;
    };
    
    var FunnelSeriesProperties = function() {
        this.color=null;
        this.lineWidth=null;
        this.shadow=null;
        this.padding=null;
        this.sectionMargin=null;
        this.seriesColors=null;
        this.highlightColors=null;
    };
    
    var MeterSeriesProperties = function() {
        this.padding=null;
        this.backgroundColor=null;
        this.ringColor=null;
        this.tickColor=null;
        this.ringWidth=null;
        this.intervalColors=null;
        this.intervalInnerRadius=null;
        this.intervalOuterRadius=null;
        this.hubRadius=null;
        this.needleThickness=null;
        this.needlePad=null;
    };
        



    $.fn.jqplotChildText = function() {
        return $(this).contents().filter(function() {
            return this.nodeType == 3;  // Node.TEXT_NODE not defined in I7
        }).text();
    };

    // Returns font style as abbreviation for "font" property.
    $.fn.jqplotGetComputedFontStyle = function() {
        var css = window.getComputedStyle ?  window.getComputedStyle(this[0]) : this[0].currentStyle;
        var attrs = css['font-style'] ? ['font-style', 'font-weight', 'font-size', 'font-family'] : ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily'];
        var style = [];

        for (var i=0 ; i < attrs.length; ++i) {
            var attr = String(css[attrs[i]]);

            if (attr && attr != 'normal') {
                style.push(attr);
            }
        }
        return style.join(' ');
    };

    /**
     * Namespace: $.fn
     * jQuery namespace to attach functions to jQuery elements.
     *  
     */

    $.fn.jqplotToImageCanvas = function(options) {

        options = options || {};
        var x_offset = (options.x_offset == null) ? 0 : options.x_offset;
        var y_offset = (options.y_offset == null) ? 0 : options.y_offset;
        var backgroundColor = (options.backgroundColor == null) ? 'rgb(255,255,255)' : options.backgroundColor;

        if ($(this).width() == 0 || $(this).height() == 0) {
            return null;
        }

        // excanvas and hence IE < 9 do not support toDataURL and cannot export images.
        if (!$.jqplot.support_canvas) {
            return null;
        }
        
        var newCanvas = document.createElement("canvas");
        var h = $(this).outerHeight(true);
        var w = $(this).outerWidth(true);
        var offs = $(this).offset();
        var plotleft = offs.left;
        var plottop = offs.top;
        var transx = 0, transy = 0;

        // have to check if any elements are hanging outside of plot area before rendering,
        // since changing width of canvas will erase canvas.

        var clses = ['jqplot-table-legend', 'jqplot-xaxis-tick', 'jqplot-x2axis-tick', 'jqplot-yaxis-tick', 'jqplot-y2axis-tick', 'jqplot-y3axis-tick', 
        'jqplot-y4axis-tick', 'jqplot-y5axis-tick', 'jqplot-y6axis-tick', 'jqplot-y7axis-tick', 'jqplot-y8axis-tick', 'jqplot-y9axis-tick',
        'jqplot-xaxis-label', 'jqplot-x2axis-label', 'jqplot-yaxis-label', 'jqplot-y2axis-label', 'jqplot-y3axis-label', 'jqplot-y4axis-label', 
        'jqplot-y5axis-label', 'jqplot-y6axis-label', 'jqplot-y7axis-label', 'jqplot-y8axis-label', 'jqplot-y9axis-label' ];

        var temptop, templeft, tempbottom, tempright;

        for (var i in clses) {
            $(this).find('.'+clses[i]).each(function() {
                temptop = $(this).offset().top - plottop;
                templeft = $(this).offset().left - plotleft;
                tempright = templeft + $(this).outerWidth(true) + transx;
                tempbottom = temptop + $(this).outerHeight(true) + transy;
                if (templeft < -transx) {
                    w = w - transx - templeft;
                    transx = -templeft;
                }
                if (temptop < -transy) {
                    h = h - transy - temptop;
                    transy = - temptop;
                }
                if (tempright > w) {
                    w = tempright;
                }
                if (tempbottom > h) {
                    h =  tempbottom;
                }
            });
        }

        newCanvas.width = w + Number(x_offset);
        newCanvas.height = h + Number(y_offset);

        var newContext = newCanvas.getContext("2d"); 

        newContext.save();
        newContext.fillStyle = backgroundColor;
        newContext.fillRect(0,0, newCanvas.width, newCanvas.height);
        newContext.restore();

        newContext.translate(transx, transy);
        newContext.textAlign = 'left';
        newContext.textBaseline = 'top';

        function getLineheight(el) {
            var lineheight = parseInt($(el).css('line-height'), 10);

            if (isNaN(lineheight)) {
                lineheight = parseInt($(el).css('font-size'), 10) * 1.2;
            }
            return lineheight;
        }

        function writeWrappedText (el, context, text, left, top, canvasWidth) {
            var lineheight = getLineheight(el);
            var tagwidth = $(el).innerWidth();
            var tagheight = $(el).innerHeight();
            var words = text.split(/\s+/);
            var wl = words.length;
            var w = '';
            var breaks = [];
            var temptop = top;
            var templeft = left;

            for (var i=0; i<wl; i++) {
                w += words[i];
                if (context.measureText(w).width > tagwidth) {
                    breaks.push(i);
                    w = '';
                }   
            }
            if (breaks.length === 0) {
                // center text if necessary
                if ($(el).css('textAlign') === 'center') {
                    templeft = left + (canvasWidth - context.measureText(w).width)/2  - transx;
                }
                context.fillText(text, templeft, top);
            }
            else {
                w = words.slice(0, breaks[0]).join(' ');
                // center text if necessary
                if ($(el).css('textAlign') === 'center') {
                    templeft = left + (canvasWidth - context.measureText(w).width)/2  - transx;
                }
                context.fillText(w, templeft, temptop);
                temptop += lineheight;
                for (var i=1, l=breaks.length; i<l; i++) {
                    w = words.slice(breaks[i-1], breaks[i]).join(' ');
                    // center text if necessary
                    if ($(el).css('textAlign') === 'center') {
                        templeft = left + (canvasWidth - context.measureText(w).width)/2  - transx;
                    }
                    context.fillText(w, templeft, temptop);
                    temptop += lineheight;
                }
                w = words.slice(breaks[i-1], words.length).join(' ');
                // center text if necessary
                if ($(el).css('textAlign') === 'center') {
                    templeft = left + (canvasWidth - context.measureText(w).width)/2  - transx;
                }
                context.fillText(w, templeft, temptop);
            }

        }

        function _jqpToImage(el, x_offset, y_offset) {
            var tagname = el.tagName.toLowerCase();
            var p = $(el).position();
            var css = window.getComputedStyle ?  window.getComputedStyle(el) : el.currentStyle; // for IE < 9
            var left = x_offset + p.left + parseInt(css.marginLeft, 10) + parseInt(css.borderLeftWidth, 10) + parseInt(css.paddingLeft, 10);
            var top = y_offset + p.top + parseInt(css.marginTop, 10) + parseInt(css.borderTopWidth, 10)+ parseInt(css.paddingTop, 10);
            var w = newCanvas.width;

            if ((tagname == 'div' || tagname == 'span') && !$(el).hasClass('jqplot-highlighter-tooltip')) {
                $(el).children().each(function() {
                    _jqpToImage(this, left, top);
                });
                var text = $(el).jqplotChildText();

                if (text) {
                    newContext.font = $(el).jqplotGetComputedFontStyle();
                    newContext.fillStyle = $(el).css('color');

                    writeWrappedText(el, newContext, text, left, top, w);
                }
            }

            // handle the standard table legend

            else if (tagname === 'table' && $(el).hasClass('jqplot-table-legend')) {
                newContext.strokeStyle = $(el).css('border-top-color');
                newContext.fillStyle = $(el).css('background-color');
                newContext.fillRect(left, top, $(el).innerWidth(), $(el).innerHeight());
                if (parseInt($(el).css('border-top-width'), 10) > 0) {
                    newContext.strokeRect(left, top, $(el).innerWidth(), $(el).innerHeight());
                }

                // find all the swatches
                $(el).find('div.jqplot-table-legend-swatch-outline').each(function() {
                    // get the first div and stroke it
                    var elem = $(this);
                    newContext.strokeStyle = elem.css('border-top-color');
                    var l = left + elem.position().left;
                    var t = top + elem.position().top;
                    newContext.strokeRect(l, t, elem.innerWidth(), elem.innerHeight());

                    // now fill the swatch
                    
                    l += parseInt(elem.css('padding-left'), 10);
                    t += parseInt(elem.css('padding-top'), 10);
                    var h = elem.innerHeight() - 2 * parseInt(elem.css('padding-top'), 10);
                    var w = elem.innerWidth() - 2 * parseInt(elem.css('padding-left'), 10);

                    var swatch = elem.children('div.jqplot-table-legend-swatch');
                    newContext.fillStyle = swatch.css('background-color');
                    newContext.fillRect(l, t, w, h);
                });

                // now add text

                $(el).find('td.jqplot-table-legend-label').each(function(){
                    var elem = $(this);
                    var l = left + elem.position().left;
                    var t = top + elem.position().top + parseInt(elem.css('padding-top'), 10);
                    newContext.font = elem.jqplotGetComputedFontStyle();
                    newContext.fillStyle = elem.css('color');
                    newContext.fillText(elem.text(), l, t);
                });

                var elem = null;
            }

            else if (tagname == 'canvas') {
                newContext.drawImage(el, left, top);
            }
        }
        $(this).children().each(function() {
            _jqpToImage(this, x_offset, y_offset);
        });
        return newCanvas;
    };

    $.fn.jqplotToImageStr = function(options) {
        var imgCanvas = $(this).jqplotToImageCanvas(options);
        if (imgCanvas) {
            return imgCanvas.toDataURL("image/png");
        }
        else {
            return null;
        }
    };

    // create an <img> element and return it.
    // Should work on canvas supporting browsers.
    $.fn.jqplotToImageElem = function(options) {
        var elem = document.createElement("img");
        var str = $(this).jqplotToImageStr(options);
        elem.src = str;
        return elem;
    };

    // create an <img> element and return it.
    // Should work on canvas supporting browsers.
    $.fn.jqplotToImageElemStr = function(options) {
        var str = '<img src='+$(this).jqplotToImageStr(options)+' />';
        return str;
    };

    // Not gauranteed to work, even on canvas supporting browsers due to 
    // limitations with location.href and browser support.
    $.fn.jqplotSaveImage = function() {
        var imgData = $(this).jqplotToImageStr({});
        if (imgData) {
            window.location.href = imgData.replace("image/png", "image/octet-stream");
        }

    };

    // Not gauranteed to work, even on canvas supporting browsers due to
    // limitations with window.open and arbitrary data.
    $.fn.jqplotViewImage = function() {
        var imgStr = $(this).jqplotToImageElemStr({});
        var imgData = $(this).jqplotToImageStr({});
        if (imgStr) {
            var w = window.open('');
            w.document.open("image/png");
            w.document.write(imgStr);
            w.document.close();
            w = null;
        }
    };
    


    /** 
     * @description
     * <p>Object with extended date parsing and formatting capabilities.
     * This library borrows many concepts and ideas from the Date Instance 
     * Methods by Ken Snyder along with some parts of Ken's actual code.</p>
     *
     * <p>jsDate takes a different approach by not extending the built-in 
     * Date Object, improving date parsing, allowing for multiple formatting 
     * syntaxes and multiple and more easily expandable localization.</p>
     * 
     * 
     * @class
     * @name jsDate
     * @param  {String | Number | Array | Date&nbsp;Object | Options&nbsp;Object} arguments Optional arguments, either a parsable date/time string,
     * a JavaScript timestamp, an array of numbers of form [year, month, day, hours, minutes, seconds, milliseconds],
     * a Date object, or an options object of form {syntax: "perl", date:some Date} where all options are optional.
     */
     
    var jsDate = function () {
    
        this.syntax = jsDate.config.syntax;
        this._type = "jsDate";
        this.proxy = new Date();
        this.options = {};
        this.locale = jsDate.regional.getLocale();
        this.formatString = '';
        this.defaultCentury = jsDate.config.defaultCentury;

        switch ( arguments.length ) {
            case 0:
                break;
            case 1:
                // other objects either won't have a _type property or,
                // if they do, it shouldn't be set to "jsDate", so
                // assume it is an options argument.
                if (get_type(arguments[0]) == "[object Object]" && arguments[0]._type != "jsDate") {
                    var opts = this.options = arguments[0];
                    this.syntax = opts.syntax || this.syntax;
                    this.defaultCentury = opts.defaultCentury || this.defaultCentury;
                    this.proxy = jsDate.createDate(opts.date);
                }
                else {
                    this.proxy = jsDate.createDate(arguments[0]);
                }
                break;
            default:
                var a = [];
                for ( var i=0; i<arguments.length; i++ ) {
                    a.push(arguments[i]);
                }
                this.proxy = new Date();
                this.proxy.setFullYear.apply( this.proxy, a.slice(0,3) );
                if ( a.slice(3).length ) {
                    this.proxy.setHours.apply( this.proxy, a.slice(3) );
                }
                break;
        }
    };
    
    /**
     * @namespace Configuration options that will be used as defaults for all instances on the page.
     * @property {String} defaultLocale The default locale to use [en].
     * @property {String} syntax The default syntax to use [perl].
     * @property {Number} defaultCentury The default centry for 2 digit dates.
     */
    jsDate.config = {
        defaultLocale: 'en',
        syntax: 'perl',
        defaultCentury: 1900
    };
        
    /**
     * Add an arbitrary amount to the currently stored date
     * 
     * @param {Number} number      
     * @param {String} unit
     * @returns {jsDate}       
     */
     
    jsDate.prototype.add = function(number, unit) {
        var factor = multipliers[unit] || multipliers.day;
        if (typeof factor == 'number') {
            this.proxy.setTime(this.proxy.getTime() + (factor * number));
        } else {
            factor.add(this, number);
        }
        return this;
    };
        
    /**
     * Create a new jqplot.date object with the same date
     * 
     * @returns {jsDate}
     */  
     
    jsDate.prototype.clone = function() {
            return new jsDate(this.proxy.getTime());
    };

    /**
     * Get the UTC TimeZone Offset of this date in milliseconds.
     *
     * @returns {Number}
     */

    jsDate.prototype.getUtcOffset = function() {
        return this.proxy.getTimezoneOffset() * 60000;
    };

    /**
     * Find the difference between this jsDate and another date.
     * 
     * @param {String| Number| Array| jsDate&nbsp;Object| Date&nbsp;Object} dateObj
     * @param {String} unit
     * @param {Boolean} allowDecimal
     * @returns {Number} Number of units difference between dates.
     */
     
    jsDate.prototype.diff = function(dateObj, unit, allowDecimal) {
        // ensure we have a Date object
        dateObj = new jsDate(dateObj);
        if (dateObj === null) {
            return null;
        }
        // get the multiplying factor integer or factor function
        var factor = multipliers[unit] || multipliers.day;
        if (typeof factor == 'number') {
            // multiply
            var unitDiff = (this.proxy.getTime() - dateObj.proxy.getTime()) / factor;
        } else {
            // run function
            var unitDiff = factor.diff(this.proxy, dateObj.proxy);
        }
        // if decimals are not allowed, round toward zero
        return (allowDecimal ? unitDiff : Math[unitDiff > 0 ? 'floor' : 'ceil'](unitDiff));          
    };
    
    /**
     * Get the abbreviated name of the current week day
     * 
     * @returns {String}
     */   
     
    jsDate.prototype.getAbbrDayName = function() {
        return jsDate.regional[this.locale]["dayNamesShort"][this.proxy.getDay()];
    };
    
    /**
     * Get the abbreviated name of the current month
     * 
     * @returns {String}
     */
     
    jsDate.prototype.getAbbrMonthName = function() {
        return jsDate.regional[this.locale]["monthNamesShort"][this.proxy.getMonth()];
    };
    
    /**
     * Get UPPER CASE AM or PM for the current time
     * 
     * @returns {String}
     */
     
    jsDate.prototype.getAMPM = function() {
        return this.proxy.getHours() >= 12 ? 'PM' : 'AM';
    };
    
    /**
     * Get lower case am or pm for the current time
     * 
     * @returns {String}
     */
     
    jsDate.prototype.getAmPm = function() {
        return this.proxy.getHours() >= 12 ? 'pm' : 'am';
    };
    
    /**
     * Get the century (19 for 20th Century)
     *
     * @returns {Integer} Century (19 for 20th century).
     */
    jsDate.prototype.getCentury = function() { 
        return parseInt(this.proxy.getFullYear()/100, 10);
    };
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getDate = function() {
        return this.proxy.getDate();
    };
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getDay = function() {
        return this.proxy.getDay();
    };
    
    /**
     * Get the Day of week 1 (Monday) thru 7 (Sunday)
     * 
     * @returns {Integer} Day of week 1 (Monday) thru 7 (Sunday)
     */
    jsDate.prototype.getDayOfWeek = function() { 
        var dow = this.proxy.getDay(); 
        return dow===0?7:dow; 
    };
    
    /**
     * Get the day of the year
     * 
     * @returns {Integer} 1 - 366, day of the year
     */
    jsDate.prototype.getDayOfYear = function() {
        var d = this.proxy;
        var ms = d - new Date('' + d.getFullYear() + '/1/1 GMT');
        ms += d.getTimezoneOffset()*60000;
        d = null;
        return parseInt(ms/60000/60/24, 10)+1;
    };
    
    /**
     * Get the name of the current week day
     * 
     * @returns {String}
     */  
     
    jsDate.prototype.getDayName = function() {
        return jsDate.regional[this.locale]["dayNames"][this.proxy.getDay()];
    };
    
    /**
     * Get the week number of the given year, starting with the first Sunday as the first week
     * @returns {Integer} Week number (13 for the 13th full week of the year).
     */
    jsDate.prototype.getFullWeekOfYear = function() {
        var d = this.proxy;
        var doy = this.getDayOfYear();
        var rdow = 6-d.getDay();
        var woy = parseInt((doy+rdow)/7, 10);
        return woy;
    };
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getFullYear = function() {
        return this.proxy.getFullYear();
    };
    
    /**
     * Get the GMT offset in hours and minutes (e.g. +06:30)
     * 
     * @returns {String}
     */
     
    jsDate.prototype.getGmtOffset = function() {
        // divide the minutes offset by 60
        var hours = this.proxy.getTimezoneOffset() / 60;
        // decide if we are ahead of or behind GMT
        var prefix = hours < 0 ? '+' : '-';
        // remove the negative sign if any
        hours = Math.abs(hours);
        // add the +/- to the padded number of hours to : to the padded minutes
        return prefix + addZeros(Math.floor(hours), 2) + ':' + addZeros((hours % 1) * 60, 2);
    };
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getHours = function() {
        return this.proxy.getHours();
    };
    
    /**
     * Get the current hour on a 12-hour scheme
     * 
     * @returns {Integer}
     */
     
    jsDate.prototype.getHours12  = function() {
        var hours = this.proxy.getHours();
        return hours > 12 ? hours - 12 : (hours == 0 ? 12 : hours);
    };
    
    
    jsDate.prototype.getIsoWeek = function() {
        var d = this.proxy;
        var woy = d.getWeekOfYear();
        var dow1_1 = (new Date('' + d.getFullYear() + '/1/1')).getDay();
        // First week is 01 and not 00 as in the case of %U and %W,
        // so we add 1 to the final result except if day 1 of the year
        // is a Monday (then %W returns 01).
        // We also need to subtract 1 if the day 1 of the year is 
        // Friday-Sunday, so the resulting equation becomes:
        var idow = woy + (dow1_1 > 4 || dow1_1 <= 1 ? 0 : 1);
        if(idow == 53 && (new Date('' + d.getFullYear() + '/12/31')).getDay() < 4)
        {
            idow = 1;
        }
        else if(idow === 0)
        {
            d = new jsDate(new Date('' + (d.getFullYear()-1) + '/12/31'));
            idow = d.getIsoWeek();
        }
        d = null;
        return idow;
    };
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getMilliseconds = function() {
        return this.proxy.getMilliseconds();
    };
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getMinutes = function() {
        return this.proxy.getMinutes();
    };
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getMonth = function() {
        return this.proxy.getMonth();
    };
    
    /**
     * Get the name of the current month
     * 
     * @returns {String}
     */
     
    jsDate.prototype.getMonthName = function() {
        return jsDate.regional[this.locale]["monthNames"][this.proxy.getMonth()];
    };
    
    /**
     * Get the number of the current month, 1-12
     * 
     * @returns {Integer}
     */
     
    jsDate.prototype.getMonthNumber = function() {
        return this.proxy.getMonth() + 1;
    };
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getSeconds = function() {
        return this.proxy.getSeconds();
    };
    
    /**
     * Return a proper two-digit year integer
     * 
     * @returns {Integer}
     */
     
    jsDate.prototype.getShortYear = function() {
        return this.proxy.getYear() % 100;
    };
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getTime = function() {
        return this.proxy.getTime();
    };
    
    /**
     * Get the timezone abbreviation
     *
     * @returns {String} Abbreviation for the timezone
     */
    jsDate.prototype.getTimezoneAbbr = function() {
        return this.proxy.toString().replace(/^.*\(([^)]+)\)$/, '$1'); 
    };
    
    /**
     * Get the browser-reported name for the current timezone (e.g. MDT, Mountain Daylight Time)
     * 
     * @returns {String}
     */
    jsDate.prototype.getTimezoneName = function() {
        var match = /(?:\((.+)\)$| ([A-Z]{3}) )/.exec(this.toString());
        return match[1] || match[2] || 'GMT' + this.getGmtOffset();
    }; 
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getTimezoneOffset = function() {
        return this.proxy.getTimezoneOffset();
    };
    
    
    /**
     * Get the week number of the given year, starting with the first Monday as the first week
     * @returns {Integer} Week number (13 for the 13th week of the year).
     */
    jsDate.prototype.getWeekOfYear = function() {
        var doy = this.getDayOfYear();
        var rdow = 7 - this.getDayOfWeek();
        var woy = parseInt((doy+rdow)/7, 10);
        return woy;
    };
    
    /**
     * Get the current date as a Unix timestamp
     * 
     * @returns {Integer}
     */
     
    jsDate.prototype.getUnix = function() {
        return Math.round(this.proxy.getTime() / 1000, 0);
    }; 
    
    /**
     * Implements Date functionality
     */
    jsDate.prototype.getYear = function() {
        return this.proxy.getYear();
    };
    
    /**
     * Return a date one day ahead (or any other unit)
     * 
     * @param {String} unit Optional, year | month | day | week | hour | minute | second | millisecond
     * @returns {jsDate}
     */
     
    jsDate.prototype.next = function(unit) {
        unit = unit || 'day';
        return this.clone().add(1, unit);
    };
    
    /**
     * Set the jsDate instance to a new date.
     *
     * @param  {String | Number | Array | Date Object | jsDate Object | Options Object} arguments Optional arguments, 
     * either a parsable date/time string,
     * a JavaScript timestamp, an array of numbers of form [year, month, day, hours, minutes, seconds, milliseconds],
     * a Date object, jsDate Object or an options object of form {syntax: "perl", date:some Date} where all options are optional.
     */
    jsDate.prototype.set = function() {
        switch ( arguments.length ) {
            case 0:
                this.proxy = new Date();
                break;
            case 1:
                // other objects either won't have a _type property or,
                // if they do, it shouldn't be set to "jsDate", so
                // assume it is an options argument.
                if (get_type(arguments[0]) == "[object Object]" && arguments[0]._type != "jsDate") {
                    var opts = this.options = arguments[0];
                    this.syntax = opts.syntax || this.syntax;
                    this.defaultCentury = opts.defaultCentury || this.defaultCentury;
                    this.proxy = jsDate.createDate(opts.date);
                }
                else {
                    this.proxy = jsDate.createDate(arguments[0]);
                }
                break;
            default:
                var a = [];
                for ( var i=0; i<arguments.length; i++ ) {
                    a.push(arguments[i]);
                }
                // this should be the current date/time
                this.proxy = new Date();
                this.proxy.setFullYear.apply( this.proxy, a.slice(0,3) );
                if ( a.slice(3).length ) {
                    this.proxy.setHours.apply( this.proxy, a.slice(3) );
                }
                break;
        }
        return this;
    };
    
    /**
     * Sets the day of the month for a specified date according to local time.
     * @param {Integer} dayValue An integer from 1 to 31, representing the day of the month. 
     */
    jsDate.prototype.setDate = function(n) {
        this.proxy.setDate(n);
        return this;
    };
    
    /**
     * Sets the full year for a specified date according to local time.
     * @param {Integer} yearValue The numeric value of the year, for example, 1995.  
     * @param {Integer} monthValue Optional, between 0 and 11 representing the months January through December.  
     * @param {Integer} dayValue Optional, between 1 and 31 representing the day of the month. If you specify the dayValue parameter, you must also specify the monthValue. 
     */
    jsDate.prototype.setFullYear = function() {
        this.proxy.setFullYear.apply(this.proxy, arguments);
        return this;
    };
    
    /**
     * Sets the hours for a specified date according to local time.
     * 
     * @param {Integer} hoursValue An integer between 0 and 23, representing the hour.  
     * @param {Integer} minutesValue Optional, An integer between 0 and 59, representing the minutes.  
     * @param {Integer} secondsValue Optional, An integer between 0 and 59, representing the seconds. 
     * If you specify the secondsValue parameter, you must also specify the minutesValue.  
     * @param {Integer} msValue Optional, A number between 0 and 999, representing the milliseconds. 
     * If you specify the msValue parameter, you must also specify the minutesValue and secondsValue. 
     */
    jsDate.prototype.setHours = function() {
        this.proxy.setHours.apply(this.proxy, arguments);
        return this;
    };
    
    /**
     * Implements Date functionality
     */ 
    jsDate.prototype.setMilliseconds = function(n) {
        this.proxy.setMilliseconds(n);
        return this;
    };
    
    /**
     * Implements Date functionality
     */ 
    jsDate.prototype.setMinutes = function() {
        this.proxy.setMinutes.apply(this.proxy, arguments);
        return this;
    };
    
    /**
     * Implements Date functionality
     */ 
    jsDate.prototype.setMonth = function() {
        this.proxy.setMonth.apply(this.proxy, arguments);
        return this;
    };
    
    /**
     * Implements Date functionality
     */ 
    jsDate.prototype.setSeconds = function() {
        this.proxy.setSeconds.apply(this.proxy, arguments);
        return this;
    };
    
    /**
     * Implements Date functionality
     */ 
    jsDate.prototype.setTime = function(n) {
        this.proxy.setTime(n);
        return this;
    };
    
    /**
     * Implements Date functionality
     */ 
    jsDate.prototype.setYear = function() {
        this.proxy.setYear.apply(this.proxy, arguments);
        return this;
    };
    
    /**
     * Provide a formatted string representation of this date.
     * 
     * @param {String} formatString A format string.  
     * See: {@link jsDate.formats}.
     * @returns {String} Date String.
     */
            
    jsDate.prototype.strftime = function(formatString) {
        formatString = formatString || this.formatString || jsDate.regional[this.locale]['formatString'];
        return jsDate.strftime(this, formatString, this.syntax);
    };
        
    /**
     * Return a String representation of this jsDate object.
     * @returns {String} Date string.
     */
    
    jsDate.prototype.toString = function() {
        return this.proxy.toString();
    };
        
    /**
     * Convert the current date to an 8-digit integer (%Y%m%d)
     * 
     * @returns {Integer}
     */
     
    jsDate.prototype.toYmdInt = function() {
        return (this.proxy.getFullYear() * 10000) + (this.getMonthNumber() * 100) + this.proxy.getDate();
    };
    
    /**
     * @namespace Holds localizations for month/day names.
     * <p>jsDate attempts to detect locale when loaded and defaults to 'en'.
     * If a localization is detected which is not available, jsDate defaults to 'en'.
     * Additional localizations can be added after jsDate loads.  After adding a localization,
     * call the jsDate.regional.getLocale() method.  Currently, en, fr and de are defined.</p>
     * 
     * <p>Localizations must be an object and have the following properties defined:  monthNames, monthNamesShort, dayNames, dayNamesShort and Localizations are added like:</p>
     * <pre class="code">
     * jsDate.regional['en'] = {
     * monthNames      : 'January February March April May June July August September October November December'.split(' '),
     * monthNamesShort : 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' '),
     * dayNames        : 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday'.split(' '),
     * dayNamesShort   : 'Sun Mon Tue Wed Thu Fri Sat'.split(' ')
     * };
     * </pre>
     * <p>After adding localizations, call <code>jsDate.regional.getLocale();</code> to update the locale setting with the
     * new localizations.</p>
     */
     
    jsDate.regional = {
        'en': {
            monthNames: ['January','February','March','April','May','June','July','August','September','October','November','December'],
            monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            formatString: '%Y-%m-%d %H:%M:%S'
        },
        
        'fr': {
            monthNames: ['Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'],
            monthNamesShort: ['Jan','Fév','Mar','Avr','Mai','Jun','Jul','Aoû','Sep','Oct','Nov','Déc'],
            dayNames: ['Dimanche','Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi'],
            dayNamesShort: ['Dim','Lun','Mar','Mer','Jeu','Ven','Sam'],
            formatString: '%Y-%m-%d %H:%M:%S'
        },
        
        'de': {
            monthNames: ['Januar','Februar','März','April','Mai','Juni','Juli','August','September','Oktober','November','Dezember'],
            monthNamesShort: ['Jan','Feb','Mär','Apr','Mai','Jun','Jul','Aug','Sep','Okt','Nov','Dez'],
            dayNames: ['Sonntag','Montag','Dienstag','Mittwoch','Donnerstag','Freitag','Samstag'],
            dayNamesShort: ['So','Mo','Di','Mi','Do','Fr','Sa'],
            formatString: '%Y-%m-%d %H:%M:%S'
        },
        
        'es': {
            monthNames: ['Enero','Febrero','Marzo','Abril','Mayo','Junio', 'Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre'],
            monthNamesShort: ['Ene','Feb','Mar','Abr','May','Jun', 'Jul','Ago','Sep','Oct','Nov','Dic'],
            dayNames: ['Domingo','Lunes','Martes','Mi&eacute;rcoles','Jueves','Viernes','S&aacute;bado'],
            dayNamesShort: ['Dom','Lun','Mar','Mi&eacute;','Juv','Vie','S&aacute;b'],
            formatString: '%Y-%m-%d %H:%M:%S'
        },
        
        'ru': {
            monthNames: ['Январь','Февраль','Март','Апрель','Май','Июнь','Июль','Август','Сентябрь','Октябрь','Ноябрь','Декабрь'],
            monthNamesShort: ['Янв','Фев','Мар','Апр','Май','Июн','Июл','Авг','Сен','Окт','Ноя','Дек'],
            dayNames: ['воскресенье','понедельник','вторник','среда','четверг','пятница','суббота'],
            dayNamesShort: ['вск','пнд','втр','срд','чтв','птн','сбт'],
            formatString: '%Y-%m-%d %H:%M:%S'
        },
        
        'ar': {
            monthNames: ['كانون الثاني', 'شباط', 'آذار', 'نيسان', 'آذار', 'حزيران','تموز', 'آب', 'أيلول',   'تشرين الأول', 'تشرين الثاني', 'كانون الأول'],
            monthNamesShort: ['1','2','3','4','5','6','7','8','9','10','11','12'],
            dayNames: ['السبت', 'الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة'],
            dayNamesShort: ['سبت', 'أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة'],
            formatString: '%Y-%m-%d %H:%M:%S'
        },
        
        'pt': {
            monthNames: ['Janeiro','Fevereiro','Mar&ccedil;o','Abril','Maio','Junho','Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'],
            monthNamesShort: ['Jan','Fev','Mar','Abr','Mai','Jun','Jul','Ago','Set','Out','Nov','Dez'],
            dayNames: ['Domingo','Segunda-feira','Ter&ccedil;a-feira','Quarta-feira','Quinta-feira','Sexta-feira','S&aacute;bado'],
            dayNamesShort: ['Dom','Seg','Ter','Qua','Qui','Sex','S&aacute;b'],
            formatString: '%Y-%m-%d %H:%M:%S'   
        },
        
        'pt-BR': {
            monthNames: ['Janeiro','Fevereiro','Mar&ccedil;o','Abril','Maio','Junho', 'Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'],
            monthNamesShort: ['Jan','Fev','Mar','Abr','Mai','Jun','Jul','Ago','Set','Out','Nov','Dez'],
            dayNames: ['Domingo','Segunda-feira','Ter&ccedil;a-feira','Quarta-feira','Quinta-feira','Sexta-feira','S&aacute;bado'],
            dayNamesShort: ['Dom','Seg','Ter','Qua','Qui','Sex','S&aacute;b'],
            formatString: '%Y-%m-%d %H:%M:%S'
        }
        
    
    };
    
    // Set english variants to 'en'
    jsDate.regional['en-US'] = jsDate.regional['en-GB'] = jsDate.regional['en'];
    
    /**
     * Try to determine the users locale based on the lang attribute of the html page.  Defaults to 'en'
     * if it cannot figure out a locale of if the locale does not have a localization defined.
     * @returns {String} locale
     */
     
    jsDate.regional.getLocale = function () {
        var l = jsDate.config.defaultLocale;
        
        if ( document && document.getElementsByTagName('html') && document.getElementsByTagName('html')[0].lang ) {
            l = document.getElementsByTagName('html')[0].lang;
            if (!jsDate.regional.hasOwnProperty(l)) {
                l = jsDate.config.defaultLocale;
            }
        }
        
        return l;
    };
    
    // ms in day
    var day = 24 * 60 * 60 * 1000;
    
    // padd a number with zeros
    var addZeros = function(num, digits) {
        num = String(num);
        var i = digits - num.length;
        var s = String(Math.pow(10, i)).slice(1);
        return s.concat(num);
    };

    // representations used for calculating differences between dates.
    // This borrows heavily from Ken Snyder's work.
    var multipliers = {
        millisecond: 1,
        second: 1000,
        minute: 60 * 1000,
        hour: 60 * 60 * 1000,
        day: day,
        week: 7 * day,
        month: {
            // add a number of months
            add: function(d, number) {
                // add any years needed (increments of 12)
                multipliers.year.add(d, Math[number > 0 ? 'floor' : 'ceil'](number / 12));
                var prevMonth = d.getMonth() + (number % 12);
                if (prevMonth == 12) {
                    prevMonth = 0;
                    d.setYear(d.getFullYear() + 1);
                } else if (prevMonth == -1) {
                    prevMonth = 11;
                    d.setYear(d.getFullYear() - 1);
                }
                d.setMonth(prevMonth);
            },
            // get the number of months between two Date objects (decimal to the nearest day)
            diff: function(d1, d2) {
                // get the number of years
                var diffYears = d1.getFullYear() - d2.getFullYear();
                // get the number of remaining months
                var diffMonths = d1.getMonth() - d2.getMonth() + (diffYears * 12);
                // get the number of remaining days
                var diffDays = d1.getDate() - d2.getDate();
                // return the month difference with the days difference as a decimal
                return diffMonths + (diffDays / 30);
            }
        },
        year: {
            // add a number of years
            add: function(d, number) {
                d.setYear(d.getFullYear() + Math[number > 0 ? 'floor' : 'ceil'](number));
            },
            // get the number of years between two Date objects (decimal to the nearest day)
            diff: function(d1, d2) {
                return multipliers.month.diff(d1, d2) / 12;
            }
        }        
    };
    //
    // Alias each multiplier with an 's' to allow 'year' and 'years' for example.
    // This comes from Ken Snyders work.
    //
    for (var unit in multipliers) {
        if (unit.substring(unit.length - 1) != 's') { // IE will iterate newly added properties :|
            multipliers[unit + 's'] = multipliers[unit];
        }
    }
    
    //
    // take a jsDate instance and a format code and return the formatted value.
    // This is a somewhat modified version of Ken Snyder's method.
    //
    var format = function(d, code, syntax) {
        // if shorcut codes are used, recursively expand those.
        if (jsDate.formats[syntax]["shortcuts"][code]) {
            return jsDate.strftime(d, jsDate.formats[syntax]["shortcuts"][code], syntax);
        } else {
            // get the format code function and addZeros() argument
            var getter = (jsDate.formats[syntax]["codes"][code] || '').split('.');
            var nbr = d['get' + getter[0]] ? d['get' + getter[0]]() : '';
            if (getter[1]) {
                nbr = addZeros(nbr, getter[1]);
            }
            return nbr;
        }       
    };
    
    /**
     * @static
     * Static function for convert a date to a string according to a given format.  Also acts as namespace for strftime format codes.
     * <p>strftime formatting can be accomplished without creating a jsDate object by calling jsDate.strftime():</p>
     * <pre class="code">
     * var formattedDate = jsDate.strftime('Feb 8, 2006 8:48:32', '%Y-%m-%d %H:%M:%S');
     * </pre>
     * @param {String | Number | Array | jsDate&nbsp;Object | Date&nbsp;Object} date A parsable date string, JavaScript time stamp, Array of form [year, month, day, hours, minutes, seconds, milliseconds], jsDate Object or Date object.
     * @param {String} formatString String with embedded date formatting codes.  
     * See: {@link jsDate.formats}. 
     * @param {String} syntax Optional syntax to use [default perl].
     * @param {String} locale Optional locale to use.
     * @returns {String} Formatted representation of the date.
    */
    //
    // Logic as implemented here is very similar to Ken Snyder's Date Instance Methods.
    //
    jsDate.strftime = function(d, formatString, syntax, locale) {
        var syn = 'perl';
        var loc = jsDate.regional.getLocale();
        
        // check if syntax and locale are available or reversed
        if (syntax && jsDate.formats.hasOwnProperty(syntax)) {
            syn = syntax;
        }
        else if (syntax && jsDate.regional.hasOwnProperty(syntax)) {
            loc = syntax;
        }
        
        if (locale && jsDate.formats.hasOwnProperty(locale)) {
            syn = locale;
        }
        else if (locale && jsDate.regional.hasOwnProperty(locale)) {
            loc = locale;
        }
        
        if (get_type(d) != "[object Object]" || d._type != "jsDate") {
            d = new jsDate(d);
            d.locale = loc;
        }
        if (!formatString) {
            formatString = d.formatString || jsDate.regional[loc]['formatString'];
        }
        // default the format string to year-month-day
        var source = formatString || '%Y-%m-%d', 
            result = '', 
            match;
        // replace each format code
        while (source.length > 0) {
            if (match = source.match(jsDate.formats[syn].codes.matcher)) {
                result += source.slice(0, match.index);
                result += (match[1] || '') + format(d, match[2], syn);
                source = source.slice(match.index + match[0].length);
            } else {
                result += source;
                source = '';
            }
        }
        return result;
    };
    
    /**
     * @namespace
     * Namespace to hold format codes and format shortcuts.  "perl" and "php" format codes 
     * <p>Additionally, ISO and SQL shortcuts are defined and can be accesses via:
     * <code>jsDate.formats.ISO</code> and <code>jsDate.formats.SQL</code>
     */
    
    jsDate.formats = {
        ISO:'%Y-%m-%dT%H:%M:%S.%N%G',
        SQL:'%Y-%m-%d %H:%M:%S'
    };
    
    /**
     * Perl format codes and shortcuts for strftime.
     * 
     * A hash (object) of codes where each code must be an array where the first member is 
     * the name of a Date.prototype or jsDate.prototype function to call
     * and optionally a second member indicating the number to pass to addZeros()
     * 
     * <p>The following format codes are defined:</p>
     * 
     * <pre class="code">
     * Code    Result                    Description
     * == Years ==           
     * %Y      2008                      Four-digit year
     * %y      08                        Two-digit year
     * 
     * == Months ==          
     * %m      09                        Two-digit month
     * %#m     9                         One or two-digit month
     * %B      September                 Full month name
     * %b      Sep                       Abbreviated month name
     * 
     * == Days ==            
     * %d      05                        Two-digit day of month
     * %#d     5                         One or two-digit day of month
     * %e      5                         One or two-digit day of month
     * %A      Sunday                    Full name of the day of the week
     * %a      Sun                       Abbreviated name of the day of the week
     * %w      0                         Number of the day of the week (0 = Sunday, 6 = Saturday)
     * 
     * == Hours ==           
     * %H      23                        Hours in 24-hour format (two digits)
     * %#H     3                         Hours in 24-hour integer format (one or two digits)
     * %I      11                        Hours in 12-hour format (two digits)
     * %#I     3                         Hours in 12-hour integer format (one or two digits)
     * %p      PM                        AM or PM
     * 
     * == Minutes ==         
     * %M      09                        Minutes (two digits)
     * %#M     9                         Minutes (one or two digits)
     * 
     * == Seconds ==         
     * %S      02                        Seconds (two digits)
     * %#S     2                         Seconds (one or two digits)
     * %s      1206567625723             Unix timestamp (Seconds past 1970-01-01 00:00:00)
     * 
     * == Milliseconds ==    
     * %N      008                       Milliseconds (three digits)
     * %#N     8                         Milliseconds (one to three digits)
     * 
     * == Timezone ==        
     * %O      360                       difference in minutes between local time and GMT
     * %Z      Mountain Standard Time    Name of timezone as reported by browser
     * %G      06:00                     Hours and minutes between GMT
     * 
     * == Shortcuts ==       
     * %F      2008-03-26                %Y-%m-%d
     * %T      05:06:30                  %H:%M:%S
     * %X      05:06:30                  %H:%M:%S
     * %x      03/26/08                  %m/%d/%y
     * %D      03/26/08                  %m/%d/%y
     * %#c     Wed Mar 26 15:31:00 2008  %a %b %e %H:%M:%S %Y
     * %v      3-Sep-2008                %e-%b-%Y
     * %R      15:31                     %H:%M
     * %r      03:31:00 PM               %I:%M:%S %p
     * 
     * == Characters ==      
     * %n      \n                        Newline
     * %t      \t                        Tab
     * %%      %                         Percent Symbol
     * </pre>
     * 
     * <p>Formatting shortcuts that will be translated into their longer version.
     * Be sure that format shortcuts do not refer to themselves: this will cause an infinite loop.</p>
     * 
     * <p>Format codes and format shortcuts can be redefined after the jsDate
     * module is imported.</p>
     * 
     * <p>Note that if you redefine the whole hash (object), you must supply a "matcher"
     * regex for the parser.  The default matcher is:</p>
     * 
     * <code>/()%(#?(%|[a-z]))/i</code>
     * 
     * <p>which corresponds to the Perl syntax used by default.</p>
     * 
     * <p>By customizing the matcher and format codes, nearly any strftime functionality is possible.</p>
     */
     
    jsDate.formats.perl = {
        codes: {
            //
            // 2-part regex matcher for format codes
            //
            // first match must be the character before the code (to account for escaping)
            // second match must be the format code character(s)
            //
            matcher: /()%(#?(%|[a-z]))/i,
            // year
            Y: 'FullYear',
            y: 'ShortYear.2',
            // month
            m: 'MonthNumber.2',
            '#m': 'MonthNumber',
            B: 'MonthName',
            b: 'AbbrMonthName',
            // day
            d: 'Date.2',
            '#d': 'Date',
            e: 'Date',
            A: 'DayName',
            a: 'AbbrDayName',
            w: 'Day',
            // hours
            H: 'Hours.2',
            '#H': 'Hours',
            I: 'Hours12.2',
            '#I': 'Hours12',
            p: 'AMPM',
            // minutes
            M: 'Minutes.2',
            '#M': 'Minutes',
            // seconds
            S: 'Seconds.2',
            '#S': 'Seconds',
            s: 'Unix',
            // milliseconds
            N: 'Milliseconds.3',
            '#N': 'Milliseconds',
            // timezone
            O: 'TimezoneOffset',
            Z: 'TimezoneName',
            G: 'GmtOffset'  
        },
        
        shortcuts: {
            // date
            F: '%Y-%m-%d',
            // time
            T: '%H:%M:%S',
            X: '%H:%M:%S',
            // local format date
            x: '%m/%d/%y',
            D: '%m/%d/%y',
            // local format extended
            '#c': '%a %b %e %H:%M:%S %Y',
            // local format short
            v: '%e-%b-%Y',
            R: '%H:%M',
            r: '%I:%M:%S %p',
            // tab and newline
            t: '\t',
            n: '\n',
            '%': '%'
        }
    };
    
    /**
     * PHP format codes and shortcuts for strftime.
     * 
     * A hash (object) of codes where each code must be an array where the first member is 
     * the name of a Date.prototype or jsDate.prototype function to call
     * and optionally a second member indicating the number to pass to addZeros()
     * 
     * <p>The following format codes are defined:</p>
     * 
     * <pre class="code">
     * Code    Result                    Description
     * === Days ===        
     * %a      Sun through Sat           An abbreviated textual representation of the day
     * %A      Sunday - Saturday         A full textual representation of the day
     * %d      01 to 31                  Two-digit day of the month (with leading zeros)
     * %e      1 to 31                   Day of the month, with a space preceding single digits.
     * %j      001 to 366                Day of the year, 3 digits with leading zeros
     * %u      1 - 7 (Mon - Sun)         ISO-8601 numeric representation of the day of the week
     * %w      0 - 6 (Sun - Sat)         Numeric representation of the day of the week
     *                                  
     * === Week ===                     
     * %U      13                        Full Week number, starting with the first Sunday as the first week
     * %V      01 through 53             ISO-8601:1988 week number, starting with the first week of the year 
     *                                   with at least 4 weekdays, with Monday being the start of the week
     * %W      46                        A numeric representation of the week of the year, 
     *                                   starting with the first Monday as the first week
     * === Month ===                    
     * %b      Jan through Dec           Abbreviated month name, based on the locale
     * %B      January - December        Full month name, based on the locale
     * %h      Jan through Dec           Abbreviated month name, based on the locale (an alias of %b)
     * %m      01 - 12 (Jan - Dec)       Two digit representation of the month
     * 
     * === Year ===                     
     * %C      19                        Two digit century (year/100, truncated to an integer)
     * %y      09 for 2009               Two digit year
     * %Y      2038                      Four digit year
     * 
     * === Time ===                     
     * %H      00 through 23             Two digit representation of the hour in 24-hour format
     * %I      01 through 12             Two digit representation of the hour in 12-hour format
     * %l      1 through 12              Hour in 12-hour format, with a space preceeding single digits
     * %M      00 through 59             Two digit representation of the minute
     * %p      AM/PM                     UPPER-CASE 'AM' or 'PM' based on the given time
     * %P      am/pm                     lower-case 'am' or 'pm' based on the given time
     * %r      09:34:17 PM               Same as %I:%M:%S %p
     * %R      00:35                     Same as %H:%M
     * %S      00 through 59             Two digit representation of the second
     * %T      21:34:17                  Same as %H:%M:%S
     * %X      03:59:16                  Preferred time representation based on locale, without the date
     * %z      -0500 or EST              Either the time zone offset from UTC or the abbreviation
     * %Z      -0500 or EST              The time zone offset/abbreviation option NOT given by %z
     * 
     * === Time and Date ===            
     * %D      02/05/09                  Same as %m/%d/%y
     * %F      2009-02-05                Same as %Y-%m-%d (commonly used in database datestamps)
     * %s      305815200                 Unix Epoch Time timestamp (same as the time() function)
     * %x      02/05/09                  Preferred date representation, without the time
     * 
     * === Miscellaneous ===            
     * %n        ---                     A newline character (\n)
     * %t        ---                     A Tab character (\t)
     * %%        ---                     A literal percentage character (%)
     * </pre>
     */
 
    jsDate.formats.php = {
        codes: {
            //
            // 2-part regex matcher for format codes
            //
            // first match must be the character before the code (to account for escaping)
            // second match must be the format code character(s)
            //
            matcher: /()%((%|[a-z]))/i,
            // day
            a: 'AbbrDayName',
            A: 'DayName',
            d: 'Date.2',
            e: 'Date',
            j: 'DayOfYear.3',
            u: 'DayOfWeek',
            w: 'Day',
            // week
            U: 'FullWeekOfYear.2',
            V: 'IsoWeek.2',
            W: 'WeekOfYear.2',
            // month
            b: 'AbbrMonthName',
            B: 'MonthName',
            m: 'MonthNumber.2',
            h: 'AbbrMonthName',
            // year
            C: 'Century.2',
            y: 'ShortYear.2',
            Y: 'FullYear',
            // time
            H: 'Hours.2',
            I: 'Hours12.2',
            l: 'Hours12',
            p: 'AMPM',
            P: 'AmPm',
            M: 'Minutes.2',
            S: 'Seconds.2',
            s: 'Unix',
            O: 'TimezoneOffset',
            z: 'GmtOffset',
            Z: 'TimezoneAbbr'
        },
        
        shortcuts: {
            D: '%m/%d/%y',
            F: '%Y-%m-%d',
            T: '%H:%M:%S',
            X: '%H:%M:%S',
            x: '%m/%d/%y',
            R: '%H:%M',
            r: '%I:%M:%S %p',
            t: '\t',
            n: '\n',
            '%': '%'
        }
    };   
    //
    // Conceptually, the logic implemented here is similar to Ken Snyder's Date Instance Methods.
    // I use his idea of a set of parsers which can be regular expressions or functions,
    // iterating through those, and then seeing if Date.parse() will create a date.
    // The parser expressions and functions are a little different and some bugs have been
    // worked out.  Also, a lot of "pre-parsing" is done to fix implementation
    // variations of Date.parse() between browsers.
    //
    jsDate.createDate = function(date) {
        // if passing in multiple arguments, try Date constructor
        if (date == null) {
            return new Date();
        }
        // If the passed value is already a date object, return it
        if (date instanceof Date) {
            return date;
        }
        // if (typeof date == 'number') return new Date(date * 1000);
        // If the passed value is an integer, interpret it as a javascript timestamp
        if (typeof date == 'number') {
            return new Date(date);
        }
        
        // Before passing strings into Date.parse(), have to normalize them for certain conditions.
        // If strings are not formatted staccording to the EcmaScript spec, results from Date parse will be implementation dependent.  
        // 
        // For example: 
        //  * FF and Opera assume 2 digit dates are pre y2k, Chome assumes <50 is pre y2k, 50+ is 21st century.  
        //  * Chrome will correctly parse '1984-1-25' into localtime, FF and Opera will not parse.
        //  * Both FF, Chrome and Opera will parse '1984/1/25' into localtime.
        
        // remove leading and trailing spaces
        var parsable = String(date).replace(/^\s*(.+)\s*$/g, '$1');
        
        // replace dahses (-) with slashes (/) in dates like n[nnn]/n[n]/n[nnn]
        parsable = parsable.replace(/^([0-9]{1,4})-([0-9]{1,2})-([0-9]{1,4})/, "$1/$2/$3");
        
        /////////
        // Need to check for '15-Dec-09' also.
        // FF will not parse, but Chrome will.
        // Chrome will set date to 2009 as well.
        /////////
        
        // first check for 'dd-mmm-yyyy' or 'dd/mmm/yyyy' like '15-Dec-2010'
        parsable = parsable.replace(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{4})/i, "$1 $2 $3");
        
        // Now check for 'dd-mmm-yy' or 'dd/mmm/yy' and normalize years to default century.
        var match = parsable.match(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{2})\D*/i);
        if (match && match.length > 3) {
            var m3 = parseFloat(match[3]);
            var ny = jsDate.config.defaultCentury + m3;
            ny = String(ny);
            
            // now replace 2 digit year with 4 digit year
            parsable = parsable.replace(/^(3[01]|[0-2]?\d)[-\/]([a-z]{3,})[-\/](\d{2})\D*/i, match[1] +' '+ match[2] +' '+ ny);
            
        }
        
        // Check for '1/19/70 8:14PM'
        // where starts with mm/dd/yy or yy/mm/dd and have something after
        // Check if 1st postiion is greater than 31, assume it is year.
        // Assme all 2 digit years are 1900's.
        // Finally, change them into US style mm/dd/yyyy representations.
        match = parsable.match(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})[^0-9]/);
        
        function h1(parsable, match) {
            var m1 = parseFloat(match[1]);
            var m2 = parseFloat(match[2]);
            var m3 = parseFloat(match[3]);
            var cent = jsDate.config.defaultCentury;
            var ny, nd, nm, str;
            
            if (m1 > 31) { // first number is a year
                nd = m3;
                nm = m2;
                ny = cent + m1;
            }
            
            else { // last number is the year
                nd = m2;
                nm = m1;
                ny = cent + m3;
            }
            
            str = nm+'/'+nd+'/'+ny;
            
            // now replace 2 digit year with 4 digit year
            return  parsable.replace(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})/, str);
        
        }
        
        if (match && match.length > 3) {
            parsable = h1(parsable, match);
        }
        
        // Now check for '1/19/70' with nothing after and do as above
        var match = parsable.match(/^([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{1,2})$/);
        
        if (match && match.length > 3) {
            parsable = h1(parsable, match);
        }
                
        
        var i = 0;
        var length = jsDate.matchers.length;
        var pattern,
            ms,
            current = parsable,
            obj;
        while (i < length) {
            ms = Date.parse(current);
            if (!isNaN(ms)) {
                return new Date(ms);
            }
            pattern = jsDate.matchers[i];
            if (typeof pattern == 'function') {
                obj = pattern.call(jsDate, current);
                if (obj instanceof Date) {
                    return obj;
                }
            } else {
                current = parsable.replace(pattern[0], pattern[1]);
            }
            i++;
        }
        return NaN;
    };
    

    /**
     * @static
     * Handy static utility function to return the number of days in a given month.
     * @param {Integer} year Year
     * @param {Integer} month Month (1-12)
     * @returns {Integer} Number of days in the month.
    */
    //
    // handy utility method Borrowed right from Ken Snyder's Date Instance Mehtods.
    // 
    jsDate.daysInMonth = function(year, month) {
        if (month == 2) {
            return new Date(year, 1, 29).getDate() == 29 ? 29 : 28;
        }
        return [undefined,31,undefined,31,30,31,30,31,31,30,31,30,31][month];
    };


    //
    // An Array of regular expressions or functions that will attempt to match the date string.
    // Functions are called with scope of a jsDate instance.
    //
    jsDate.matchers = [
        // convert dd.mmm.yyyy to mm/dd/yyyy (world date to US date).
        [/(3[01]|[0-2]\d)\s*\.\s*(1[0-2]|0\d)\s*\.\s*([1-9]\d{3})/, '$2/$1/$3'],
        // convert yyyy-mm-dd to mm/dd/yyyy (ISO date to US date).
        [/([1-9]\d{3})\s*-\s*(1[0-2]|0\d)\s*-\s*(3[01]|[0-2]\d)/, '$2/$3/$1'],
        // Handle 12 hour or 24 hour time with milliseconds am/pm and optional date part.
        function(str) { 
            var match = str.match(/^(?:(.+)\s+)?([012]?\d)(?:\s*\:\s*(\d\d))?(?:\s*\:\s*(\d\d(\.\d*)?))?\s*(am|pm)?\s*$/i);
            //                   opt. date      hour       opt. minute     opt. second       opt. msec   opt. am or pm
            if (match) {
                if (match[1]) {
                    var d = this.createDate(match[1]);
                    if (isNaN(d)) {
                        return;
                    }
                } else {
                    var d = new Date();
                    d.setMilliseconds(0);
                }
                var hour = parseFloat(match[2]);
                if (match[6]) {
                    hour = match[6].toLowerCase() == 'am' ? (hour == 12 ? 0 : hour) : (hour == 12 ? 12 : hour + 12);
                }
                d.setHours(hour, parseInt(match[3] || 0, 10), parseInt(match[4] || 0, 10), ((parseFloat(match[5] || 0)) || 0)*1000);
                return d;
            }
            else {
                return str;
            }
        },
        // Handle ISO timestamp with time zone.
        function(str) {
            var match = str.match(/^(?:(.+))[T|\s+]([012]\d)(?:\:(\d\d))(?:\:(\d\d))(?:\.\d+)([\+\-]\d\d\:\d\d)$/i);
            if (match) {
                if (match[1]) {
                    var d = this.createDate(match[1]);
                    if (isNaN(d)) {
                        return;
                    }
                } else {
                    var d = new Date();
                    d.setMilliseconds(0);
                }
                var hour = parseFloat(match[2]);
                d.setHours(hour, parseInt(match[3], 10), parseInt(match[4], 10), parseFloat(match[5])*1000);
                return d;
            }
            else {
                    return str;
            }
        },
        // Try to match ambiguous strings like 12/8/22.
        // Use FF date assumption that 2 digit years are 20th century (i.e. 1900's).
        // This may be redundant with pre processing of date already performed.
        function(str) {
            var match = str.match(/^([0-3]?\d)\s*[-\/.\s]{1}\s*([a-zA-Z]{3,9})\s*[-\/.\s]{1}\s*([0-3]?\d)$/);
            if (match) {
                var d = new Date();
                var cent = jsDate.config.defaultCentury;
                var m1 = parseFloat(match[1]);
                var m3 = parseFloat(match[3]);
                var ny, nd, nm;
                if (m1 > 31) { // first number is a year
                    nd = m3;
                    ny = cent + m1;
                }
                
                else { // last number is the year
                    nd = m1;
                    ny = cent + m3;
                }
                
                var nm = inArray(match[2], jsDate.regional[jsDate.regional.getLocale()]["monthNamesShort"]);
                
                if (nm == -1) {
                    nm = inArray(match[2], jsDate.regional[jsDate.regional.getLocale()]["monthNames"]);
                }
            
                d.setFullYear(ny, nm, nd);
                d.setHours(0,0,0,0);
                return d;
            }
            
            else {
                return str;
            }
        }      
    ];

    //
    // I think John Reisig published this method on his blog, ejohn.
    //
    function inArray( elem, array ) {
        if ( array.indexOf ) {
            return array.indexOf( elem );
        }

        for ( var i = 0, length = array.length; i < length; i++ ) {
            if ( array[ i ] === elem ) {
                return i;
            }
        }

        return -1;
    }
    
    //
    // Thanks to Kangax, Christian Sciberras and Stack Overflow for this method.
    //
    function get_type(thing){
        if(thing===null) return "[object Null]"; 
        return Object.prototype.toString.call(thing);
    }
    
    $.jsDate = jsDate;

      
    /**
     * JavaScript printf/sprintf functions.
     * 
     * This code has been adapted from the publicly available sprintf methods
     * by Ash Searle. His original header follows:
     *
     *     This code is unrestricted: you are free to use it however you like.
     *     
     *     The functions should work as expected, performing left or right alignment,
     *     truncating strings, outputting numbers with a required precision etc.
     *
     *     For complex cases, these functions follow the Perl implementations of
     *     (s)printf, allowing arguments to be passed out-of-order, and to set the
     *     precision or length of the output based on arguments instead of fixed
     *     numbers.
     *
     *     See http://perldoc.perl.org/functions/sprintf.html for more information.
     *
     *     Implemented:
     *     - zero and space-padding
     *     - right and left-alignment,
     *     - base X prefix (binary, octal and hex)
     *     - positive number prefix
     *     - (minimum) width
     *     - precision / truncation / maximum width
     *     - out of order arguments
     *
     *     Not implemented (yet):
     *     - vector flag
     *     - size (bytes, words, long-words etc.)
     *     
     *     Will not implement:
     *     - %n or %p (no pass-by-reference in JavaScript)
     *
     *     @version 2007.04.27
     * 
     * You can see the original work and comments on his blog:
     * http://hexmen.com/blog/2007/03/printf-sprintf/
     * http://hexmen.com/js/sprintf.js
     */
     
     /**
      * @Modifications 2009.05.26
      * Added %p %P specifier
      * Acts like %g or %G but will not add more significant digits to the output than present in the input.
      * Example:
      * Format: '%.3p', Input: 0.012, Output: 0.012
      * Format: '%.3g', Input: 0.012, Output: 0.0120
      * Format: '%.4p', Input: 12.0, Output: 12.0
      * Format: '%.4g', Input: 12.0, Output: 12.00
      * Format: '%.4p', Input: 4.321e-5, Output: 4.321e-5
      * Format: '%.4g', Input: 4.321e-5, Output: 4.3210e-5
      * 
      * Example:
      * >>> $.jqplot.sprintf('%.2f, %d', 23.3452, 43.23)
      * "23.35, 43"
      * >>> $.jqplot.sprintf("no value: %n, decimal with thousands separator: %'d", 23.3452, 433524)
      * "no value: , decimal with thousands separator: 433,524"
      */
    $.jqplot.sprintf = function() {
        function pad(str, len, chr, leftJustify) {
            var padding = (str.length >= len) ? '' : Array(1 + len - str.length >>> 0).join(chr);
            return leftJustify ? str + padding : padding + str;

        }

        function thousand_separate(value) {
            var value_str = new String(value);
            for (var i=10; i>0; i--) {
                if (value_str == (value_str = value_str.replace(/^(\d+)(\d{3})/, "$1"+$.jqplot.sprintf.thousandsSeparator+"$2"))) break;
            }
            return value_str; 
        }

        function justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace) {
            var diff = minWidth - value.length;
            if (diff > 0) {
                var spchar = ' ';
                if (htmlSpace) { spchar = '&nbsp;'; }
                if (leftJustify || !zeroPad) {
                    value = pad(value, minWidth, spchar, leftJustify);
                } else {
                    value = value.slice(0, prefix.length) + pad('', diff, '0', true) + value.slice(prefix.length);
                }
            }
            return value;
        }

        function formatBaseX(value, base, prefix, leftJustify, minWidth, precision, zeroPad, htmlSpace) {
            // Note: casts negative numbers to positive ones
            var number = value >>> 0;
            prefix = prefix && number && {'2': '0b', '8': '0', '16': '0x'}[base] || '';
            value = prefix + pad(number.toString(base), precision || 0, '0', false);
            return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace);
        }

        function formatString(value, leftJustify, minWidth, precision, zeroPad, htmlSpace) {
            if (precision != null) {
                value = value.slice(0, precision);
            }
            return justify(value, '', leftJustify, minWidth, zeroPad, htmlSpace);
        }

        var a = arguments, i = 0, format = a[i++];

        return format.replace($.jqplot.sprintf.regex, function(substring, valueIndex, flags, minWidth, _, precision, type) {
            if (substring == '%%') { return '%'; }

            // parse flags
            var leftJustify = false, positivePrefix = '', zeroPad = false, prefixBaseX = false, htmlSpace = false, thousandSeparation = false;
            for (var j = 0; flags && j < flags.length; j++) switch (flags.charAt(j)) {
                case ' ': positivePrefix = ' '; break;
                case '+': positivePrefix = '+'; break;
                case '-': leftJustify = true; break;
                case '0': zeroPad = true; break;
                case '#': prefixBaseX = true; break;
                case '&': htmlSpace = true; break;
                case '\'': thousandSeparation = true; break;
            }

            // parameters may be null, undefined, empty-string or real valued
            // we want to ignore null, undefined and empty-string values

            if (!minWidth) {
                minWidth = 0;
            } 
            else if (minWidth == '*') {
                minWidth = +a[i++];
            } 
            else if (minWidth.charAt(0) == '*') {
                minWidth = +a[minWidth.slice(1, -1)];
            } 
            else {
                minWidth = +minWidth;
            }

            // Note: undocumented perl feature:
            if (minWidth < 0) {
                minWidth = -minWidth;
                leftJustify = true;
            }

            if (!isFinite(minWidth)) {
                throw new Error('$.jqplot.sprintf: (minimum-)width must be finite');
            }

            if (!precision) {
                precision = 'fFeE'.indexOf(type) > -1 ? 6 : (type == 'd') ? 0 : void(0);
            } 
            else if (precision == '*') {
                precision = +a[i++];
            } 
            else if (precision.charAt(0) == '*') {
                precision = +a[precision.slice(1, -1)];
            } 
            else {
                precision = +precision;
            }

            // grab value using valueIndex if required?
            var value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];

            switch (type) {
            case 's': {
                if (value == null) {
                    return '';
                }
                return formatString(String(value), leftJustify, minWidth, precision, zeroPad, htmlSpace);
            }
            case 'c': return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad, htmlSpace);
            case 'b': return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad,htmlSpace);
            case 'o': return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);
            case 'x': return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);
            case 'X': return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace).toUpperCase();
            case 'u': return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad, htmlSpace);
            case 'i': {
              var number = parseInt(+value, 10);
              if (isNaN(number)) {
                return '';
              }
              var prefix = number < 0 ? '-' : positivePrefix;
              var number_str = thousandSeparation ? thousand_separate(String(Math.abs(number))): String(Math.abs(number));
              value = prefix + pad(number_str, precision, '0', false);
              return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace);
                  }
            case 'd': {
              var number = Math.round(+value);
              if (isNaN(number)) {
                return '';
              }
              var prefix = number < 0 ? '-' : positivePrefix;
              var number_str = thousandSeparation ? thousand_separate(String(Math.abs(number))): String(Math.abs(number));
              value = prefix + pad(number_str, precision, '0', false);
              return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace);
                  }
            case 'e':
            case 'E':
            case 'f':
            case 'F':
            case 'g':
            case 'G':
                      {
                      var number = +value;
                      if (isNaN(number)) {
                          return '';
                      }
                      var prefix = number < 0 ? '-' : positivePrefix;
                      var method = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())];
                      var textTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2];
                      var number_str = Math.abs(number)[method](precision);
                      number_str = thousandSeparation ? thousand_separate(number_str): number_str;
                      value = prefix + number_str;
                      return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace)[textTransform]();
                  }
            case 'p':
            case 'P':
            {
                // make sure number is a number
                var number = +value;
                if (isNaN(number)) {
                    return '';
                }
                var prefix = number < 0 ? '-' : positivePrefix;

                var parts = String(Number(Math.abs(number)).toExponential()).split(/e|E/);
                var sd = (parts[0].indexOf('.') != -1) ? parts[0].length - 1 : parts[0].length;
                var zeros = (parts[1] < 0) ? -parts[1] - 1 : 0;
                
                if (Math.abs(number) < 1) {
                    if (sd + zeros  <= precision) {
                        value = prefix + Math.abs(number).toPrecision(sd);
                    }
                    else {
                        if (sd  <= precision - 1) {
                            value = prefix + Math.abs(number).toExponential(sd-1);
                        }
                        else {
                            value = prefix + Math.abs(number).toExponential(precision-1);
                        }
                    }
                }
                else {
                    var prec = (sd <= precision) ? sd : precision;
                    value = prefix + Math.abs(number).toPrecision(prec);
                }
                var textTransform = ['toString', 'toUpperCase']['pP'.indexOf(type) % 2];
                return justify(value, prefix, leftJustify, minWidth, zeroPad, htmlSpace)[textTransform]();
            }
            case 'n': return '';
            default: return substring;
            }
        });
    };

    $.jqplot.sprintf.thousandsSeparator = ',';
    
    $.jqplot.sprintf.regex = /%%|%(\d+\$)?([-+#0&\' ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([nAscboxXuidfegpEGP])/g;

    $.jqplot.getSignificantFigures = function(number) {
        var parts = String(Number(Math.abs(number)).toExponential()).split(/e|E/);
        // total significant digits
        var sd = (parts[0].indexOf('.') != -1) ? parts[0].length - 1 : parts[0].length;
        var zeros = (parts[1] < 0) ? -parts[1] - 1 : 0;
        // exponent
        var expn = parseInt(parts[1], 10);
        // digits to the left of the decimal place
        var dleft = (expn + 1 > 0) ? expn + 1 : 0;
        // digits to the right of the decimal place
        var dright = (sd <= dleft) ? 0 : sd - expn - 1;
        return {significantDigits: sd, digitsLeft: dleft, digitsRight: dright, zeros: zeros, exponent: expn} ;
    };

    $.jqplot.getPrecision = function(number) {
        return $.jqplot.getSignificantFigures(number).digitsRight;
    };

})(jQuery);  


(function($) {

    var backCompat = $.uiBackCompat !== false;

    $.jqplot.effects = {
        effect : {}
    };

    // prefix used for storing data on .data()
    var dataSpace = "jqplot.storage.";

    /******************************************************************************/
    /*********************************** EFFECTS
     * **********************************/
    /******************************************************************************/

    $.extend($.jqplot.effects, {
        version : "1.9pre",

        // Saves a set of properties in a data storage
        save : function(element, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i] !== null) {
                    element.data(dataSpace + set[i], element[ 0 ].style[set[i]]);
                }
            }
        },

        // Restores a set of previously saved properties from a data storage
        restore : function(element, set) {
            for (var i = 0; i < set.length; i++) {
                if (set[i] !== null) {
                    element.css(set[i], element.data(dataSpace + set[i]));
                }
            }
        },

        setMode : function(el, mode) {
            if (mode === "toggle") {
                mode = el.is(":hidden") ? "show" : "hide";
            }
            return mode;
        },

        // Wraps the element around a wrapper that copies position properties
        createWrapper : function(element) {

            // if the element is already wrapped, return it
            if (element.parent().is(".ui-effects-wrapper")) {
                return element.parent();
            }

            // wrap the element
            var props = {
                width : element.outerWidth(true),
                height : element.outerHeight(true),
                "float" : element.css("float")
            }, wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                fontSize : "100%",
                background : "transparent",
                border : "none",
                margin : 0,
                padding : 0
            }),
            // Store the size in case width/height are defined in % - Fixes #5245
            size = {
                width : element.width(),
                height : element.height()
            }, active = document.activeElement;

            element.wrap(wrapper);

            // Fixes #7595 - Elements lose focus when wrapped.
            if (element[0] === active || $.contains(element[0], active)) {
                $(active).focus();
            }

            wrapper = element.parent();
            //Hotfix for jQuery 1.4 since some change in wrap() seems to actually
            // loose the reference to the wrapped element

            // transfer positioning properties to the wrapper
            if (element.css("position") === "static") {
                wrapper.css({
                    position : "relative"
                });
                element.css({
                    position : "relative"
                });
            } else {
                $.extend(props, {
                    position : element.css("position"),
                    zIndex : element.css("z-index")
                });
                $.each(["top", "left", "bottom", "right"], function(i, pos) {
                    props[pos] = element.css(pos);
                    if (isNaN(parseInt(props[pos], 10))) {
                        props[pos] = "auto";
                    }
                });
                element.css({
                    position : "relative",
                    top : 0,
                    left : 0,
                    right : "auto",
                    bottom : "auto"
                });
            }
            element.css(size);

            return wrapper.css(props).show();
        },

        removeWrapper : function(element) {
            var active = document.activeElement;

            if (element.parent().is(".ui-effects-wrapper")) {
                element.parent().replaceWith(element);

                // Fixes #7595 - Elements lose focus when wrapped.
                if (element[0] === active || $.contains(element[0], active)) {
                    $(active).focus();
                }
            }

            return element;
        }
    });

    // return an effect options object for the given parameters:
    function _normalizeArguments(effect, options, speed, callback) {

        // short path for passing an effect options object:
        if ($.isPlainObject(effect)) {
            return effect;
        }

        // convert to an object
        effect = {
            effect : effect
        };

        // catch (effect)
        if (options === undefined) {
            options = {};
        }

        // catch (effect, callback)
        if ($.isFunction(options)) {
            callback = options;
            speed = null;
            options = {};
        }

        // catch (effect, speed, ?)
        if ($.type(options) === "number" || $.fx.speeds[options]) {
            callback = speed;
            speed = options;
            options = {};
        }

        // catch (effect, options, callback)
        if ($.isFunction(speed)) {
            callback = speed;
            speed = null;
        }

        // add options to effect
        if (options) {
            $.extend(effect, options);
        }

        speed = speed || options.duration;
        effect.duration = $.fx.off ? 0 : typeof speed === "number" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;

        effect.complete = callback || options.complete;

        return effect;
    }

    function standardSpeed(speed) {
        // valid standard speeds
        if (!speed || typeof speed === "number" || $.fx.speeds[speed]) {
            return true;
        }

        // invalid strings - treat as "normal" speed
        if ( typeof speed === "string" && !$.jqplot.effects.effect[speed]) {
            if (backCompat && $.jqplot.effects[speed]) {
                return false;
            }
            return true;
        }

        return false;
    }


    $.fn.extend({
        jqplotEffect : function(effect, options, speed, callback) {
            var args = _normalizeArguments.apply(this, arguments), mode = args.mode, queue = args.queue, effectMethod = $.jqplot.effects.effect[args.effect],

            // DEPRECATED: remove in 2.0 (#7115)
            oldEffectMethod = !effectMethod && backCompat && $.jqplot.effects[args.effect];

            if ($.fx.off || !(effectMethod || oldEffectMethod )) {
                // delegate to the original method (e.g., .show()) if possible
                if (mode) {
                    return this[ mode ](args.duration, args.complete);
                } else {
                    return this.each(function() {
                        if (args.complete) {
                            args.complete.call(this);
                        }
                    });
                }
            }

            function run(next) {
                var elem = $(this), complete = args.complete, mode = args.mode;

                function done() {
                    if ($.isFunction(complete)) {
                        complete.call(elem[0]);
                    }
                    if ($.isFunction(next)) {
                        next();
                    }
                }

                // if the element is hiddden and mode is hide,
                // or element is visible and mode is show
                if (elem.is(":hidden") ? mode === "hide" : mode === "show") {
                    done();
                } else {
                    effectMethod.call(elem[0], args, done);
                }
            }

            if (effectMethod) {
                return queue === false ? this.each(run) : this.queue(queue || "fx", run);
            } else {
                return oldEffectMethod.call(this, {
                    options : args,
                    duration : args.duration,
                    callback : args.complete,
                    mode : args.mode
                });
            }
        }
    });

    var rvertical = /up|down|vertical/, rpositivemotion = /up|left|vertical|horizontal/;

    $.jqplot.effects.effect.blind = function(o, done) {
        // Create element
        var el = $(this), props = ["position", "top", "bottom", "left", "right", "height", "width"], mode = $.jqplot.effects.setMode(el, o.mode || "hide"), direction = o.direction || "up", vertical = rvertical.test(direction), ref = vertical ? "height" : "width", ref2 = vertical ? "top" : "left", motion = rpositivemotion.test(direction), animation = {}, show = mode === "show", wrapper, distance, top;

        // // if already wrapped, the wrapper's properties are my property. #6245
        if (el.parent().is(".ui-effects-wrapper")) {
            $.jqplot.effects.save(el.parent(), props);
        } else {
            $.jqplot.effects.save(el, props);
        }
        el.show();
        top = parseInt(el.css('top'), 10);
        wrapper = $.jqplot.effects.createWrapper(el).css({
            overflow : "hidden"
        });

        distance = vertical ? wrapper[ ref ]() + top : wrapper[ ref ]();

        animation[ref] = show ? String(distance) : '0';
        if (!motion) {
            el.css( vertical ? "bottom" : "right", 0).css( vertical ? "top" : "left", "").css({
                position : "absolute"
            });
            animation[ref2] = show ? '0' : String(distance);
        }

        // // start at 0 if we are showing
        if (show) {
            wrapper.css(ref, 0);
            if (!motion) {
                wrapper.css(ref2, distance);
            }
        }

        // // Animate
        wrapper.animate(animation, {
            duration : o.duration,
            easing : o.easing,
            queue : false,
            complete : function() {
                if (mode === "hide") {
                    el.hide();
                }
                $.jqplot.effects.restore(el, props);
                $.jqplot.effects.removeWrapper(el);
                done();
            }
        });

    };
})(jQuery);

/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 * Copyright (c) 2009-2011 Chris Leonello
 * jqPlot is currently available for use in all personal or commercial projects 
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL 
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can 
 * choose the license that best suits your project and use it accordingly. 
 *
 * Although not required, the author would appreciate an email letting him 
 * know of any substantial use of jqPlot.  You can reach the author at: 
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *
 * included jsDate library by Chris Leonello:
 *
 * Copyright (c) 2010-2011 Chris Leonello
 *
 * jsDate is currently available for use in all personal or commercial projects 
 * under both the MIT and GPL version 2.0 licenses. This means that you can 
 * choose the license that best suits your project and use it accordingly.
 *
 * jsDate borrows many concepts and ideas from the Date Instance 
 * Methods by Ken Snyder along with some parts of Ken's actual code.
 * 
 * 
 * jqplotToImage function based on Larry Siden's export-jqplot-to-png.js.
 * Larry has generously given permission to adapt his code for inclusion
 * into jqPlot.
 *
 *
 * https://github.com/lsiden/export-jqplot-to-png
 * 
 * 
 */

(function($) {    
    // This code is a modified version of the canvastext.js code, copyright below:
    //
    // This code is released to the public domain by Jim Studt, 2007.
    // He may keep some sort of up to date copy at http://www.federated.com/~jim/canvastext/
    //
    $.jqplot.CanvasTextRenderer = function(options){
        this.fontStyle = 'normal';  // normal, italic, oblique [not implemented]
        this.fontVariant = 'normal';    // normal, small caps [not implemented]
        this.fontWeight = 'normal'; // normal, bold, bolder, lighter, 100 - 900
        this.fontSize = '10px'; 
        this.fontFamily = "'Arial','Tahoma','Verdana','SimSun','Microsoft Yahei'";
        this.fontStretch = 1.0;
        this.fillStyle = '#666666';
        this.angle = 0;
        this.textAlign = 'start';
        this.textBaseline = 'alphabetic';
        this.text;
        this.width;
        this.height;
        this.pt2px = 1.28;

        $.extend(true, this, options);
        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);
        this.setHeight();
    };
    
    $.jqplot.CanvasTextRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
        this.normalizedFontSize = this.normalizeFontSize(this.fontSize);
        this.setHeight();
    };
    
    // convert css spec into point size
    // returns float
    $.jqplot.CanvasTextRenderer.prototype.normalizeFontSize = function(sz) {
        sz = String(sz);
        var n = parseFloat(sz);
        if (sz.indexOf('px') > -1) {
            return n/this.pt2px;
        }
        else if (sz.indexOf('pt') > -1) {
            return n;
        }
        else if (sz.indexOf('em') > -1) {
            return n*12;
        }
        else if (sz.indexOf('%') > -1) {
            return n*12/100;
        }
        // default to pixels;
        else {
            return n/this.pt2px;
        }
    };
    
    
    $.jqplot.CanvasTextRenderer.prototype.fontWeight2Float = function(w) {
        if (Number(w)) {
            return w/400;
        }
        else {
            switch (w) {
                case 'normal':
                    return 1;
                    break;
                case 'bold':
                    return 1.75;
                    break;
                case 'bolder':
                    return 2.25;
                    break;
                case 'lighter':
                    return 0.75;
                    break;
                default:
                    return 1;
                    break;
             }   
        }
    };
    
    $.jqplot.CanvasTextRenderer.prototype.getText = function() {
        return this.text;
    };
    
    $.jqplot.CanvasTextRenderer.prototype.setText = function(t, ctx) {
        this.text = ''+t;
        this.setWidth(ctx);
        return this;
    };
    
    $.jqplot.CanvasTextRenderer.prototype.getWidth = function(ctx) {
        return this.width;
    };
    
    $.jqplot.CanvasTextRenderer.prototype.setWidth = function(ctx, w) {
        if (!w) {
            this.width = this.measure(ctx, this.text);
        }
        else {
            this.width = w;   
        }
        return this;
    };
    
    // return height in pixels.
    $.jqplot.CanvasTextRenderer.prototype.getHeight = function(ctx) {
        return this.height;
    };
    
    // w - height in pt
    // set heigh in px
    $.jqplot.CanvasTextRenderer.prototype.setHeight = function(w) {
        if (!w) {
            this.height = this.normalizedFontSize * this.pt2px + 4;
        }
        else {
            this.height = w + 4;   
        }
        return this;
    };

    $.jqplot.CanvasTextRenderer.prototype.letter = function (ch)
    {
        return this.letters[ch];
    };

    $.jqplot.CanvasTextRenderer.prototype.ascent = function()
    {
        return this.normalizedFontSize;
    };

    $.jqplot.CanvasTextRenderer.prototype.descent = function()
    {
        return 7.0*this.normalizedFontSize/25.0;
    };

    $.jqplot.CanvasTextRenderer.prototype.measure = function(ctx, str)
    {
        var total = 0;
        var len = str.length;
 
        for (var i = 0; i < len; i++) {
            var c = this.letter(str.charAt(i));
            if (c) {
                total += c.width * this.normalizedFontSize / 25.0 * this.fontStretch;
            }
        }
        return total;
    };

    $.jqplot.CanvasTextRenderer.prototype.draw = function(ctx,str)
    {
        var x = 0;
        // leave room at bottom for descenders.
        var y = this.height*0.72;
         var total = 0;
         var len = str.length;
         var mag = this.normalizedFontSize / 25.0;

         ctx.save();
         var tx, ty;
         
         // 1st quadrant
         if ((-Math.PI/2 <= this.angle && this.angle <= 0) || (Math.PI*3/2 <= this.angle && this.angle <= Math.PI*2)) {
             tx = 0;
             ty = -Math.sin(this.angle) * this.width;
         }
         // 4th quadrant
         else if ((0 < this.angle && this.angle <= Math.PI/2) || (-Math.PI*2 <= this.angle && this.angle <= -Math.PI*3/2)) {
             tx = Math.sin(this.angle) * this.height;
             ty = 0;
         }
         // 2nd quadrant
         else if ((-Math.PI < this.angle && this.angle < -Math.PI/2) || (Math.PI <= this.angle && this.angle <= Math.PI*3/2)) {
             tx = -Math.cos(this.angle) * this.width;
             ty = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height;
         }
         // 3rd quadrant
         else if ((-Math.PI*3/2 < this.angle && this.angle < Math.PI) || (Math.PI/2 < this.angle && this.angle < Math.PI)) {
             tx = Math.sin(this.angle) * this.height - Math.cos(this.angle)*this.width;
             ty = -Math.cos(this.angle) * this.height;
         }
         
         ctx.strokeStyle = this.fillStyle;
         ctx.fillStyle = this.fillStyle;
         ctx.translate(tx, ty);
         ctx.rotate(this.angle);
         ctx.lineCap = "round";
         // multiplier was 2.0
         var fact = (this.normalizedFontSize > 30) ? 2.0 : 2 + (30 - this.normalizedFontSize)/20;
         ctx.lineWidth = fact * mag * this.fontWeight2Float(this.fontWeight);
         
         for ( var i = 0; i < len; i++) {
            var c = this.letter( str.charAt(i));
            if ( !c) {
                continue;
            }

            ctx.beginPath();

            var penUp = 1;
            var needStroke = 0;
            for ( var j = 0; j < c.points.length; j++) {
              var a = c.points[j];
              if ( a[0] == -1 && a[1] == -1) {
                  penUp = 1;
                  continue;
              }
              if ( penUp) {
                  ctx.moveTo( x + a[0]*mag*this.fontStretch, y - a[1]*mag);
                  penUp = false;
              } else {
                  ctx.lineTo( x + a[0]*mag*this.fontStretch, y - a[1]*mag);
              }
            }
            ctx.stroke();
            x += c.width*mag*this.fontStretch;
         }
         ctx.restore();
         return total;
    };

    $.jqplot.CanvasTextRenderer.prototype.letters = {
         ' ': { width: 16, points: [] },
         '!': { width: 10, points: [[5,21],[5,7],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },
         '"': { width: 16, points: [[4,21],[4,14],[-1,-1],[12,21],[12,14]] },
         '#': { width: 21, points: [[11,25],[4,-7],[-1,-1],[17,25],[10,-7],[-1,-1],[4,12],[18,12],[-1,-1],[3,6],[17,6]] },
         '$': { width: 20, points: [[8,25],[8,-4],[-1,-1],[12,25],[12,-4],[-1,-1],[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },
         '%': { width: 24, points: [[21,21],[3,0],[-1,-1],[8,21],[10,19],[10,17],[9,15],[7,14],[5,14],[3,16],[3,18],[4,20],[6,21],[8,21],[10,20],[13,19],[16,19],[19,20],[21,21],[-1,-1],[17,7],[15,6],[14,4],[14,2],[16,0],[18,0],[20,1],[21,3],[21,5],[19,7],[17,7]] },
         '&': { width: 26, points: [[23,12],[23,13],[22,14],[21,14],[20,13],[19,11],[17,6],[15,3],[13,1],[11,0],[7,0],[5,1],[4,2],[3,4],[3,6],[4,8],[5,9],[12,13],[13,14],[14,16],[14,18],[13,20],[11,21],[9,20],[8,18],[8,16],[9,13],[11,10],[16,3],[18,1],[20,0],[22,0],[23,1],[23,2]] },
         '\'': { width: 10, points: [[5,19],[4,20],[5,21],[6,20],[6,18],[5,16],[4,15]] },
         '(': { width: 14, points: [[11,25],[9,23],[7,20],[5,16],[4,11],[4,7],[5,2],[7,-2],[9,-5],[11,-7]] },
         ')': { width: 14, points: [[3,25],[5,23],[7,20],[9,16],[10,11],[10,7],[9,2],[7,-2],[5,-5],[3,-7]] },
         '*': { width: 16, points: [[8,21],[8,9],[-1,-1],[3,18],[13,12],[-1,-1],[13,18],[3,12]] },
         '+': { width: 26, points: [[13,18],[13,0],[-1,-1],[4,9],[22,9]] },
         ',': { width: 10, points: [[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },
         '-': { width: 18, points: [[6,9],[12,9]] },
         '.': { width: 10, points: [[5,2],[4,1],[5,0],[6,1],[5,2]] },
         '/': { width: 22, points: [[20,25],[2,-7]] },
         '0': { width: 20, points: [[9,21],[6,20],[4,17],[3,12],[3,9],[4,4],[6,1],[9,0],[11,0],[14,1],[16,4],[17,9],[17,12],[16,17],[14,20],[11,21],[9,21]] },
         '1': { width: 20, points: [[6,17],[8,18],[11,21],[11,0]] },
         '2': { width: 20, points: [[4,16],[4,17],[5,19],[6,20],[8,21],[12,21],[14,20],[15,19],[16,17],[16,15],[15,13],[13,10],[3,0],[17,0]] },
         '3': { width: 20, points: [[5,21],[16,21],[10,13],[13,13],[15,12],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },
         '4': { width: 20, points: [[13,21],[3,7],[18,7],[-1,-1],[13,21],[13,0]] },
         '5': { width: 20, points: [[15,21],[5,21],[4,12],[5,13],[8,14],[11,14],[14,13],[16,11],[17,8],[17,6],[16,3],[14,1],[11,0],[8,0],[5,1],[4,2],[3,4]] },
         '6': { width: 20, points: [[16,18],[15,20],[12,21],[10,21],[7,20],[5,17],[4,12],[4,7],[5,3],[7,1],[10,0],[11,0],[14,1],[16,3],[17,6],[17,7],[16,10],[14,12],[11,13],[10,13],[7,12],[5,10],[4,7]] },
         '7': { width: 20, points: [[17,21],[7,0],[-1,-1],[3,21],[17,21]] },
         '8': { width: 20, points: [[8,21],[5,20],[4,18],[4,16],[5,14],[7,13],[11,12],[14,11],[16,9],[17,7],[17,4],[16,2],[15,1],[12,0],[8,0],[5,1],[4,2],[3,4],[3,7],[4,9],[6,11],[9,12],[13,13],[15,14],[16,16],[16,18],[15,20],[12,21],[8,21]] },
         '9': { width: 20, points: [[16,14],[15,11],[13,9],[10,8],[9,8],[6,9],[4,11],[3,14],[3,15],[4,18],[6,20],[9,21],[10,21],[13,20],[15,18],[16,14],[16,9],[15,4],[13,1],[10,0],[8,0],[5,1],[4,3]] },
         ':': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[5,2],[4,1],[5,0],[6,1],[5,2]] },
         ';': { width: 10, points: [[5,14],[4,13],[5,12],[6,13],[5,14],[-1,-1],[6,1],[5,0],[4,1],[5,2],[6,1],[6,-1],[5,-3],[4,-4]] },
         '<': { width: 24, points: [[20,18],[4,9],[20,0]] },
         '=': { width: 26, points: [[4,12],[22,12],[-1,-1],[4,6],[22,6]] },
         '>': { width: 24, points: [[4,18],[20,9],[4,0]] },
         '?': { width: 18, points: [[3,16],[3,17],[4,19],[5,20],[7,21],[11,21],[13,20],[14,19],[15,17],[15,15],[14,13],[13,12],[9,10],[9,7],[-1,-1],[9,2],[8,1],[9,0],[10,1],[9,2]] },
         '@': { width: 27, points: [[18,13],[17,15],[15,16],[12,16],[10,15],[9,14],[8,11],[8,8],[9,6],[11,5],[14,5],[16,6],[17,8],[-1,-1],[12,16],[10,14],[9,11],[9,8],[10,6],[11,5],[-1,-1],[18,16],[17,8],[17,6],[19,5],[21,5],[23,7],[24,10],[24,12],[23,15],[22,17],[20,19],[18,20],[15,21],[12,21],[9,20],[7,19],[5,17],[4,15],[3,12],[3,9],[4,6],[5,4],[7,2],[9,1],[12,0],[15,0],[18,1],[20,2],[21,3],[-1,-1],[19,16],[18,8],[18,6],[19,5]] },
         'A': { width: 18, points: [[9,21],[1,0],[-1,-1],[9,21],[17,0],[-1,-1],[4,7],[14,7]] },
         'B': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[-1,-1],[4,11],[13,11],[16,10],[17,9],[18,7],[18,4],[17,2],[16,1],[13,0],[4,0]] },
         'C': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5]] },
         'D': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[11,21],[14,20],[16,18],[17,16],[18,13],[18,8],[17,5],[16,3],[14,1],[11,0],[4,0]] },
         'E': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11],[-1,-1],[4,0],[17,0]] },
         'F': { width: 18, points: [[4,21],[4,0],[-1,-1],[4,21],[17,21],[-1,-1],[4,11],[12,11]] },
         'G': { width: 21, points: [[18,16],[17,18],[15,20],[13,21],[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[18,8],[-1,-1],[13,8],[18,8]] },
         'H': { width: 22, points: [[4,21],[4,0],[-1,-1],[18,21],[18,0],[-1,-1],[4,11],[18,11]] },
         'I': { width: 8, points: [[4,21],[4,0]] },
         'J': { width: 16, points: [[12,21],[12,5],[11,2],[10,1],[8,0],[6,0],[4,1],[3,2],[2,5],[2,7]] },
         'K': { width: 21, points: [[4,21],[4,0],[-1,-1],[18,21],[4,7],[-1,-1],[9,12],[18,0]] },
         'L': { width: 17, points: [[4,21],[4,0],[-1,-1],[4,0],[16,0]] },
         'M': { width: 24, points: [[4,21],[4,0],[-1,-1],[4,21],[12,0],[-1,-1],[20,21],[12,0],[-1,-1],[20,21],[20,0]] },
         'N': { width: 22, points: [[4,21],[4,0],[-1,-1],[4,21],[18,0],[-1,-1],[18,21],[18,0]] },
         'O': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21]] },
         'P': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,14],[17,12],[16,11],[13,10],[4,10]] },
         'Q': { width: 22, points: [[9,21],[7,20],[5,18],[4,16],[3,13],[3,8],[4,5],[5,3],[7,1],[9,0],[13,0],[15,1],[17,3],[18,5],[19,8],[19,13],[18,16],[17,18],[15,20],[13,21],[9,21],[-1,-1],[12,4],[18,-2]] },
         'R': { width: 21, points: [[4,21],[4,0],[-1,-1],[4,21],[13,21],[16,20],[17,19],[18,17],[18,15],[17,13],[16,12],[13,11],[4,11],[-1,-1],[11,11],[18,0]] },
         'S': { width: 20, points: [[17,18],[15,20],[12,21],[8,21],[5,20],[3,18],[3,16],[4,14],[5,13],[7,12],[13,10],[15,9],[16,8],[17,6],[17,3],[15,1],[12,0],[8,0],[5,1],[3,3]] },
         'T': { width: 16, points: [[8,21],[8,0],[-1,-1],[1,21],[15,21]] },
         'U': { width: 22, points: [[4,21],[4,6],[5,3],[7,1],[10,0],[12,0],[15,1],[17,3],[18,6],[18,21]] },
         'V': { width: 18, points: [[1,21],[9,0],[-1,-1],[17,21],[9,0]] },
         'W': { width: 24, points: [[2,21],[7,0],[-1,-1],[12,21],[7,0],[-1,-1],[12,21],[17,0],[-1,-1],[22,21],[17,0]] },
         'X': { width: 20, points: [[3,21],[17,0],[-1,-1],[17,21],[3,0]] },
         'Y': { width: 18, points: [[1,21],[9,11],[9,0],[-1,-1],[17,21],[9,11]] },
         'Z': { width: 20, points: [[17,21],[3,0],[-1,-1],[3,21],[17,21],[-1,-1],[3,0],[17,0]] },
         '[': { width: 14, points: [[4,25],[4,-7],[-1,-1],[5,25],[5,-7],[-1,-1],[4,25],[11,25],[-1,-1],[4,-7],[11,-7]] },
         '\\': { width: 14, points: [[0,21],[14,-3]] },
         ']': { width: 14, points: [[9,25],[9,-7],[-1,-1],[10,25],[10,-7],[-1,-1],[3,25],[10,25],[-1,-1],[3,-7],[10,-7]] },
         '^': { width: 16, points: [[6,15],[8,18],[10,15],[-1,-1],[3,12],[8,17],[13,12],[-1,-1],[8,17],[8,0]] },
         '_': { width: 16, points: [[0,-2],[16,-2]] },
         '`': { width: 10, points: [[6,21],[5,20],[4,18],[4,16],[5,15],[6,16],[5,17]] },
         'a': { width: 19, points: [[15,14],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'b': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },
         'c': { width: 18, points: [[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'd': { width: 19, points: [[15,21],[15,0],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'e': { width: 18, points: [[3,8],[15,8],[15,10],[14,12],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'f': { width: 12, points: [[10,21],[8,21],[6,20],[5,17],[5,0],[-1,-1],[2,14],[9,14]] },
         'g': { width: 19, points: [[15,14],[15,-2],[14,-5],[13,-6],[11,-7],[8,-7],[6,-6],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'h': { width: 19, points: [[4,21],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },
         'i': { width: 8, points: [[3,21],[4,20],[5,21],[4,22],[3,21],[-1,-1],[4,14],[4,0]] },
         'j': { width: 10, points: [[5,21],[6,20],[7,21],[6,22],[5,21],[-1,-1],[6,14],[6,-3],[5,-6],[3,-7],[1,-7]] },
         'k': { width: 17, points: [[4,21],[4,0],[-1,-1],[14,14],[4,4],[-1,-1],[8,8],[15,0]] },
         'l': { width: 8, points: [[4,21],[4,0]] },
         'm': { width: 30, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0],[-1,-1],[15,10],[18,13],[20,14],[23,14],[25,13],[26,10],[26,0]] },
         'n': { width: 19, points: [[4,14],[4,0],[-1,-1],[4,10],[7,13],[9,14],[12,14],[14,13],[15,10],[15,0]] },
         'o': { width: 19, points: [[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3],[16,6],[16,8],[15,11],[13,13],[11,14],[8,14]] },
         'p': { width: 19, points: [[4,14],[4,-7],[-1,-1],[4,11],[6,13],[8,14],[11,14],[13,13],[15,11],[16,8],[16,6],[15,3],[13,1],[11,0],[8,0],[6,1],[4,3]] },
         'q': { width: 19, points: [[15,14],[15,-7],[-1,-1],[15,11],[13,13],[11,14],[8,14],[6,13],[4,11],[3,8],[3,6],[4,3],[6,1],[8,0],[11,0],[13,1],[15,3]] },
         'r': { width: 13, points: [[4,14],[4,0],[-1,-1],[4,8],[5,11],[7,13],[9,14],[12,14]] },
         's': { width: 17, points: [[14,11],[13,13],[10,14],[7,14],[4,13],[3,11],[4,9],[6,8],[11,7],[13,6],[14,4],[14,3],[13,1],[10,0],[7,0],[4,1],[3,3]] },
         't': { width: 12, points: [[5,21],[5,4],[6,1],[8,0],[10,0],[-1,-1],[2,14],[9,14]] },
         'u': { width: 19, points: [[4,14],[4,4],[5,1],[7,0],[10,0],[12,1],[15,4],[-1,-1],[15,14],[15,0]] },
         'v': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0]] },
         'w': { width: 22, points: [[3,14],[7,0],[-1,-1],[11,14],[7,0],[-1,-1],[11,14],[15,0],[-1,-1],[19,14],[15,0]] },
         'x': { width: 17, points: [[3,14],[14,0],[-1,-1],[14,14],[3,0]] },
         'y': { width: 16, points: [[2,14],[8,0],[-1,-1],[14,14],[8,0],[6,-4],[4,-6],[2,-7],[1,-7]] },
         'z': { width: 17, points: [[14,14],[3,0],[-1,-1],[3,14],[14,14],[-1,-1],[3,0],[14,0]] },
         '{': { width: 14, points: [[9,25],[7,24],[6,23],[5,21],[5,19],[6,17],[7,16],[8,14],[8,12],[6,10],[-1,-1],[7,24],[6,22],[6,20],[7,18],[8,17],[9,15],[9,13],[8,11],[4,9],[8,7],[9,5],[9,3],[8,1],[7,0],[6,-2],[6,-4],[7,-6],[-1,-1],[6,8],[8,6],[8,4],[7,2],[6,1],[5,-1],[5,-3],[6,-5],[7,-6],[9,-7]] },
         '|': { width: 8, points: [[4,25],[4,-7]] },
         '}': { width: 14, points: [[5,25],[7,24],[8,23],[9,21],[9,19],[8,17],[7,16],[6,14],[6,12],[8,10],[-1,-1],[7,24],[8,22],[8,20],[7,18],[6,17],[5,15],[5,13],[6,11],[10,9],[6,7],[5,5],[5,3],[6,1],[7,0],[8,-2],[8,-4],[7,-6],[-1,-1],[8,8],[6,6],[6,4],[7,2],[8,1],[9,-1],[9,-3],[8,-5],[7,-6],[5,-7]] },
         '~': { width: 24, points: [[3,6],[3,8],[4,11],[6,12],[8,12],[10,11],[14,8],[16,7],[18,7],[20,8],[21,10],[-1,-1],[3,8],[4,10],[6,11],[8,11],[10,10],[14,7],[16,6],[18,6],[20,7],[21,10],[21,12]] }
     };
     
    $.jqplot.CanvasFontRenderer = function(options) {
        options = options || {};
        if (!options.pt2px) {
            options.pt2px = 1.5;
        }
        $.jqplot.CanvasTextRenderer.call(this, options);
    };
    
    $.jqplot.CanvasFontRenderer.prototype = new $.jqplot.CanvasTextRenderer({});
    $.jqplot.CanvasFontRenderer.prototype.constructor = $.jqplot.CanvasFontRenderer;

    $.jqplot.CanvasFontRenderer.prototype.measure = function(ctx, str)
    {
        var fstyle = this.fontSize+' '+this.fontFamily;
        ctx.save();
        ctx.font = fstyle;
        var w = ctx.measureText(str).width;
        ctx.restore();
        return w;
    };

    $.jqplot.CanvasFontRenderer.prototype.draw = function(ctx, str)
    {
        var x = 0;
        // leave room at bottom for descenders.
        var y = this.height*0.72;

         ctx.save();
         var tx, ty;
         
         // 1st quadrant
         if ((-Math.PI/2 <= this.angle && this.angle <= 0) || (Math.PI*3/2 <= this.angle && this.angle <= Math.PI*2)) {
             tx = 0;
             ty = -Math.sin(this.angle) * this.width;
         }
         // 4th quadrant
         else if ((0 < this.angle && this.angle <= Math.PI/2) || (-Math.PI*2 <= this.angle && this.angle <= -Math.PI*3/2)) {
             tx = Math.sin(this.angle) * this.height;
             ty = 0;
         }
         // 2nd quadrant
         else if ((-Math.PI < this.angle && this.angle < -Math.PI/2) || (Math.PI <= this.angle && this.angle <= Math.PI*3/2)) {
             tx = -Math.cos(this.angle) * this.width;
             ty = -Math.sin(this.angle) * this.width - Math.cos(this.angle) * this.height;
         }
         // 3rd quadrant
         else if ((-Math.PI*3/2 < this.angle && this.angle < Math.PI) || (Math.PI/2 < this.angle && this.angle < Math.PI)) {
             tx = Math.sin(this.angle) * this.height - Math.cos(this.angle)*this.width;
             ty = -Math.cos(this.angle) * this.height;
         }
         ctx.strokeStyle = this.fillStyle;
         ctx.fillStyle = this.fillStyle;
        var fstyle = this.fontSize+' '+this.fontFamily;
         ctx.font = fstyle;
         ctx.translate(tx, ty);
         ctx.rotate(this.angle);
         //In Case of Chinese Font Family, text's baseLine issues will come, so 2 px has to be added
         ctx.fillText(str, x, y+2);

         ctx.restore();
    };
    
})(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 * jqPlot is currently available for use in all personal or commercial projects 
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL 
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can 
 * choose the license that best suits your project and use it accordingly. 
 *
 * Although not required, the author would appreciate an email letting him 
 * know of any substantial use of jqPlot.  You can reach the author at: 
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     The author (Ash Searle) has placed this code in the public domain:
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {
    /**
    *  Class: $.jqplot.CanvasAxisTickRenderer
    * Renderer to draw axis ticks with a canvas element to support advanced
    * featrues such as rotated text.  This renderer uses a separate rendering engine
    * to draw the text on the canvas.  Two modes of rendering the text are available.
    * If the browser has native font support for canvas fonts (currently Mozila 3.5
    * and Safari 4), you can enable text rendering with the canvas fillText method.
    * You do so by setting the "enableFontSupport" option to true. 
    * 
    * Browsers lacking native font support will have the text drawn on the canvas
    * using the Hershey font metrics.  Even if the "enableFontSupport" option is true
    * non-supporting browsers will still render with the Hershey font.
    */
    $.jqplot.CanvasAxisTickRenderer = function(options) {
        // Group: Properties
        
        // prop: mark
        // tick mark on the axis.  One of 'inside', 'outside', 'cross', '' or null.
        this.mark = 'outside';
        // prop: showMark
        // wether or not to show the mark on the axis.
        this.showMark = true;
        // prop: showGridline
        // wether or not to draw the gridline on the grid at this tick.
        this.showGridline = true;
        // prop: isMinorTick
        // if this is a minor tick.
        this.isMinorTick = false;
        // prop: angle
        // angle of text, measured clockwise from x axis.
        this.angle = 0;
        // prop:  markSize
        // Length of the tick marks in pixels.  For 'cross' style, length
        // will be stoked above and below axis, so total length will be twice this.
        this.markSize = 4;
        // prop: show
        // wether or not to show the tick (mark and label).
        this.show = true;
        // prop: showLabel
        // wether or not to show the label.
        this.showLabel = true;
        // prop: labelPosition
        // 'auto', 'start', 'middle' or 'end'.
        // Whether tick label should be positioned so the start, middle, or end
        // of the tick mark.
        this.labelPosition = 'auto';
        this.label = '';
        this.value = null;
        this._styles = {};
        // prop: formatter
        // A class of a formatter for the tick text.
        // The default $.jqplot.DefaultTickFormatter uses sprintf.
        this.formatter = $.jqplot.DefaultTickFormatter;
        // prop: formatString
        // string passed to the formatter.
        this.formatString = '';
        // prop: prefix
        // String to prepend to the tick label.
        // Prefix is prepended to the formatted tick label.
        this.prefix = '';
        // prop: fontFamily
        // css spec for the font-family css attribute.
        this.fontFamily = '"Trebuchet MS", Arial, Helvetica, sans-serif';
        // prop: fontSize
        // CSS spec for font size.
        this.fontSize = '10px';
        // prop: fontWeight
        // CSS spec for fontWeight
        this.fontWeight = 'normal';
        // prop: fontStretch
        // Multiplier to condense or expand font width.  
        // Applies only to browsers which don't support canvas native font rendering.
        this.fontStretch = 1.0;
        // prop: textColor
        // css spec for the color attribute.
        this.textColor = '#3b3b3b';
        // prop: enableFontSupport
        // true to turn on native canvas font support in Mozilla 3.5+ and Safari 4+.
        // If true, tick label will be drawn with canvas tag native support for fonts.
        // If false, tick label will be drawn with Hershey font metrics.
        this.enableFontSupport = true;
        // prop: pt2px
        // Point to pixel scaling factor, used for computing height of bounding box
        // around a label.  The labels text renderer has a default setting of 1.4, which 
        // should be suitable for most fonts.  Leave as null to use default.  If tops of
        // letters appear clipped, increase this.  If bounding box seems too big, decrease.
        // This is an issue only with the native font renderering capabilities of Mozilla
        // 3.5 and Safari 4 since they do not provide a method to determine the font height.
        this.pt2px = null;
        
        this._elem;
        this._ctx;
        this._plotWidth;
        this._plotHeight;
        this._plotDimensions = {height:null, width:null};
        
        $.extend(true, this, options);
        
        var ropts = {fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily};
        if (this.pt2px) {
            ropts.pt2px = this.pt2px;
        }
        
        if (this.enableFontSupport) {
            if ($.jqplot.support_canvas_text()) {
                this._textRenderer = new $.jqplot.CanvasFontRenderer(ropts);
            }
            
            else {
                this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts); 
            }
        }
        else {
            this._textRenderer = new $.jqplot.CanvasTextRenderer(ropts); 
        }
    };
    
    $.jqplot.CanvasAxisTickRenderer.prototype.init = function(options) {
        $.extend(true, this, options);
        this._textRenderer.init({fontSize:this.fontSize, fontWeight:this.fontWeight, fontStretch:this.fontStretch, fillStyle:this.textColor, angle:this.getAngleRad(), fontFamily:this.fontFamily});
    };


    $.jqplot.CanvasAxisTickRenderer.prototype.destroy = function()
    {
         this.mark = null;
        this.showMark = null;
        this.showGridline = null;
        this.isMinorTick = null;
        this.angle = null;
        this.markSize = null;
        this.show = null;
        this.showLabel = null;
        this.labelPosition = null;
        this.label = null;
        this.value = null;
        this._styles = null;
        this.formatter = null;
        this.formatString = null;
        this.prefix = null;
        this.fontFamily = null;
        this.fontSize = null;
        this.fontWeight = null;
        this.fontStretch = null;
        this.textColor = null;
        this.enableFontSupport = null;
        this.pt2px = null;
        this._plotWidth = null;
        this._plotHeight = null;
        this._plotDimensions = null;
        if (this._elem) {
            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                window.G_vmlCanvasManager.uninitElement(this._elem.get(0));
            }
            this._elem.emptyForce();
            if(tiny && tiny.garbageCollect)
            {
                 tiny.garbageCollect(this._elem, true);
            }
            delete this._elem;
            this._elem = null;
        }
        if(this._ctx)
        {
            if(tiny && tiny.garbageCollect)
            {
                 tiny.disposeObject(this._ctx);
            }
            this._ctx = null;
        }
    }

    
    // return width along the x axis
    // will check first to see if an element exists.
    // if not, will return the computed text box width.
    $.jqplot.CanvasAxisTickRenderer.prototype.getWidth = function(ctx) {
        if (this._elem) {
         return this._elem.outerWidth(true);
        }
        else {
            var tr = this._textRenderer;
            var l = tr.getWidth(ctx);
            var h = tr.getHeight(ctx);
            var w = Math.abs(Math.sin(tr.angle)*h) + Math.abs(Math.cos(tr.angle)*l);
            return w;
        }
    };
    
    // return height along the y axis.
    $.jqplot.CanvasAxisTickRenderer.prototype.getHeight = function(ctx) {
        if (this._elem) {
         return this._elem.outerHeight(true);
        }
        else {
            var tr = this._textRenderer;
            var l = tr.getWidth(ctx);
            var h = tr.getHeight(ctx);
            var w = Math.abs(Math.cos(tr.angle)*h) + Math.abs(Math.sin(tr.angle)*l);
            return w;
        }
    };
    
    $.jqplot.CanvasAxisTickRenderer.prototype.getAngleRad = function() {
        var a = this.angle * Math.PI/180;
        return a;
    };
    
    
    $.jqplot.CanvasAxisTickRenderer.prototype.setTick = function(value, axisName, isMinor) {
        this.value = value;
        if (isMinor) {
            this.isMinorTick = true;
        }
        return this;
    };
    
    $.jqplot.CanvasAxisTickRenderer.prototype.draw = function(ctx, plot) {
        if (!this.label) {
            this.label = this.formatter(this.formatString, this.value);
        }
        
        // Memory Leaks patch
        if (this._elem) {
            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                window.G_vmlCanvasManager.uninitElement(this._elem.get(0));
            }
            
            this._elem.emptyForce();
            this._elem = null;
        }

        // create a canvas here, but can't draw on it untill it is appended
        // to dom for IE compatability.

        var elem = plot.canvasManager.getCanvas();
        this.canvasIdx = elem.idx;
        this._textRenderer.setText(this.label, ctx);
        var w = this.getWidth(ctx);
        var h = this.getHeight(ctx);
        // canvases seem to need to have width and heigh attributes directly set.
        elem.width = w;
        elem.height = h;
        elem.style.width = w;
        elem.style.height = h;
        elem.style.textAlign = 'left';
        elem.style.position = 'absolute';
		
		elem = plot.canvasManager.initCanvas(elem);
		
        this._elem = $(elem);
        this._elem.css(this._styles);
        this._elem.addClass('jqplot-'+this.axis+'-tick');
		
        elem = null;
        return this._elem;
    };
    
    $.jqplot.CanvasAxisTickRenderer.prototype.pack = function() {
        this._elem.get(0).getContext("2d").clearRect(0, 0, this._elem.get(0).width, this._elem.get(0).height);
        this._textRenderer.draw(this._elem.get(0).getContext("2d"), this.label);
    };
    
})(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 * jqPlot is currently available for use in all personal or commercial projects 
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL 
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can 
 * choose the license that best suits your project and use it accordingly. 
 *
 * Although not required, the author would appreciate an email letting him 
 * know of any substantial use of jqPlot.  You can reach the author at: 
 * chris at jqplot dot com or see http://www.jqplot.com/info.php .
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 * sprintf functions contained in jqplot.sprintf.js by Ash Searle:
 *
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {   
    /**
    *  class: $.jqplot.CategoryAxisRenderer
    *  A plugin for jqPlot to render a category style axis, with equal pixel spacing between y data values of a series.
    *  
    *  To use this renderer, include the plugin in your source
    *  > <script type="text/javascript" language="javascript" src="plugins/jqplot.categoryAxisRenderer.js"></script>
    *  
    *  and supply the appropriate options to your plot
    *  
    *  > {axes:{xaxis:{renderer:$.jqplot.CategoryAxisRenderer}}}
    **/
    $.jqplot.CategoryAxisRenderer = function(options) {
        $.jqplot.LinearAxisRenderer.call(this);
        // prop: sortMergedLabels
        // True to sort tick labels when labels are created by merging
        // x axis values from multiple series.  That is, say you have
        // two series like:
        // > line1 = [[2006, 4],            [2008, 9], [2009, 16]];
        // > line2 = [[2006, 3], [2007, 7], [2008, 6]];
        // If no label array is specified, tick labels will be collected
        // from the x values of the series.  With sortMergedLabels
        // set to true, tick labels will be:
        // > [2006, 2007, 2008, 2009]
        // With sortMergedLabels set to false, tick labels will be:
        // > [2006, 2008, 2009, 2007]
        //
        // Note, this property is specified on the renderOptions for the 
        // axes when creating a plot:
        // > axes:{xaxis:{renderer:$.jqplot.CategoryAxisRenderer, rendererOptions:{sortMergedLabels:true}}}
        this.sortMergedLabels = false;
    };
    
    $.jqplot.CategoryAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();
    $.jqplot.CategoryAxisRenderer.prototype.constructor = $.jqplot.CategoryAxisRenderer;
    
    $.jqplot.CategoryAxisRenderer.prototype.init = function(options){
        this.groups = 1;
        this.groupLabels = [];
        this._groupLabels = [];
        this._grouped = false;
        this._barsPerGroup = null;
        $.extend(true, this, {tickOptions:{formatString:'%d'}}, options);
        var db = this._dataBounds;
        // Go through all the series attached to this axis and find
        // the min/max bounds for this axis.
        for (var i=0; i<this._series.length; i++) {
            var s = this._series[i];
            if (s.groups) {
                this.groups = s.groups;
            }
            var d = s.data;
            
            for (var j=0; j<d.length; j++) { 
                if (this.name == 'xaxis' || this.name == 'x2axis') {
                    if (d[j][0] < db.min || db.min == null) {
                        db.min = d[j][0];
                    }
                    if (d[j][0] > db.max || db.max == null) {
                        db.max = d[j][0];
                    }
                }              
                else {
                    if (d[j][1] < db.min || db.min == null) {
                        db.min = d[j][1];
                    }
                    if (d[j][1] > db.max || db.max == null) {
                        db.max = d[j][1];
                    }
                }              
            }
        }
        
        if (this.groupLabels.length) {
            this.groups = this.groupLabels.length;
        }
    };
 

    $.jqplot.CategoryAxisRenderer.prototype.createTicks = function() {
        // we're are operating on an axis here
        var ticks = this._ticks;
        var userTicks = this.ticks;
        var name = this.name;
        // databounds were set on axis initialization.
        var db = this._dataBounds;
        var dim, interval;
        var min, max;
        var pos1, pos2;
        var tt, i;

        // if we already have ticks, use them.
        if (userTicks.length) {
            // adjust with blanks if we have groups
            if (this.groups > 1 && !this._grouped) {
                var l = userTicks.length;
                var skip = parseInt(l/this.groups, 10);
                var count = 0;
                for (var i=skip; i<l; i+=skip) {
                    userTicks.splice(i+count, 0, ' ');
                    count++;
                }
                this._grouped = true;
            }
            this.min = 0.5;
            this.max = userTicks.length + 0.5;
            var range = this.max - this.min;
            this.numberTicks = 2*userTicks.length + 1;
            for (i=0; i<userTicks.length; i++){
                tt = this.min + 2 * i * range / (this.numberTicks-1);
                // need a marker before and after the tick
                var t = new this.tickRenderer(this.tickOptions);
                t.showLabel = false;
                t.setTick(tt, this.name);
                this._ticks.push(t);
                var t = new this.tickRenderer(this.tickOptions);
                t.label = userTicks[i];
                t.showMark = false;
                t.showGridline = false;
                t.setTick(tt+0.5, this.name);
                this._ticks.push(t);
            }
            // now add the last tick at the end
            var t = new this.tickRenderer(this.tickOptions);
            t.showLabel = false;
            t.setTick(tt+1, this.name);
            this._ticks.push(t);
        }

        // we don't have any ticks yet, let's make some!
        else {
            if (name == 'xaxis' || name == 'x2axis') {
                dim = this._plotDimensions.width;
            }
            else {
                dim = this._plotDimensions.height;
            }
            
            // if min, max and number of ticks specified, user can't specify interval.
            if (this.min != null && this.max != null && this.numberTicks != null) {
                this.tickInterval = null;
            }
            
            // if max, min, and interval specified and interval won't fit, ignore interval.
            if (this.min != null && this.max != null && this.tickInterval != null) {
                if (parseInt((this.max-this.min)/this.tickInterval, 10) != (this.max-this.min)/this.tickInterval) {
                    this.tickInterval = null;
                }
            }
        
            // find out how many categories are in the lines and collect labels
            var labels = [];
            var numcats = 0;
            var min = 0.5;
            var max, val;
            var isMerged = false;
            for (var i=0; i<this._series.length; i++) {
                var s = this._series[i];
                for (var j=0; j<s.data.length; j++) {
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        val = s.data[j][0];
                    }
                    else {
                        val = s.data[j][1];
                    }
                    if ($.inArray(val, labels) == -1) {
                        isMerged = true;
                        numcats += 1;      
                        labels.push(val);
                    }
                }
            }
            
            if (isMerged && this.sortMergedLabels) {
                labels.sort(function(a,b) { return a - b; });
            }
            
            // keep a reference to these tick labels to use for redrawing plot (see bug #57)
            this.ticks = labels;
            
            // now bin the data values to the right lables.
            for (var i=0; i<this._series.length; i++) {
                var s = this._series[i];
                for (var j=0; j<s.data.length; j++) {
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        val = s.data[j][0];
                    }
                    else {
                        val = s.data[j][1];
                    }
                    // for category axis, force the values into category bins.
                    // we should have the value in the label array now.
                    var idx = $.inArray(val, labels)+1;
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        s.data[j][0] = idx;
                    }
                    else {
                        s.data[j][1] = idx;
                    }
                }
            }
            
            // adjust with blanks if we have groups
            if (this.groups > 1 && !this._grouped) {
                var l = labels.length;
                var skip = parseInt(l/this.groups, 10);
                var count = 0;
                for (var i=skip; i<l; i+=skip+1) {
                    labels[i] = ' ';
                }
                this._grouped = true;
            }
            if (numcats <= 0)
            {
                numcats = 1;
            }
        
            max = numcats + 0.5;
            if (this.numberTicks == null) {
                this.numberTicks = 2*numcats + 1;
            }

            var range = max - min;
            this.min = min;
            this.max = max;
            var track = 0;
            
            // todo: adjust this so more ticks displayed.
            var maxVisibleTicks = parseInt(3+dim/10, 10);
            var skip = parseInt(numcats/maxVisibleTicks, 10);

            if (this.tickInterval == null) {

                this.tickInterval = range / (this.numberTicks-1);

            }
            // if tickInterval is specified, we will ignore any computed maximum.
            for (var i=0; i<this.numberTicks; i++){
                tt = this.min + i * this.tickInterval;
                var t = new this.tickRenderer(this.tickOptions);
                // if even tick, it isn't a category, it's a divider
                if (i/2 == parseInt(i/2, 10)) {
                    t.showLabel = false;
                    t.showMark = true;
                }
                else {
                    if (skip>0 && track<skip) {
                        t.showLabel = false;
                        track += 1;
                    }
                    else {
                        t.showLabel = true;
                        track = 0;
                    } 
                    var iindex = (i-1)/2;
                    if (!labels[iindex])
                    {
                        t.label = t.formatter(t.formatString, '');
                    }
                    else
                    {
                        t.label = t.formatter(t.formatString, labels[iindex]);
                    }
                    t.showMark = false;
                    t.showGridline = false;
                }
                t.setTick(tt, this.name);
                this._ticks.push(t);
            }
        }
        
    };
    
    // called with scope of axis
    $.jqplot.CategoryAxisRenderer.prototype.draw = function(ctx, plot) {
        if (this.show) {
            // populate the axis label and value properties.
            // createTicks is a method on the renderer, but
            // call it within the scope of the axis.
            this.renderer.createTicks.call(this);
            // fill a div with axes labels in the right direction.
            // Need to pregenerate each axis to get it's bounds and
            // position it and the labels correctly on the plot.
            var dim=0;
            var temp;
            // Added for theming.
            if (this._elem) {
                // Memory Leaks patch
                this._elem.emptyForce();
            }

            this._elem = this._elem || $('<div class="jqplot-axis jqplot-'+this.name+'" style="position:absolute;"></div>');
            
            if (this.name == 'xaxis' || this.name == 'x2axis') {
                this._elem.width(this._plotDimensions.width);
            }
            else {
                this._elem.height(this._plotDimensions.height);
            }
            
            // create a _label object.
            this.labelOptions.axis = this.name;
            this._label = new this.labelRenderer(this.labelOptions);
            if (this._label.show) {
                var elem = this._label.draw(ctx, plot);
                elem.appendTo(this._elem);
            }
    
            var t = this._ticks,tickIndex = 0,totalTicks = 0;
            for (var i=0; i<t.length; i++) {
                var tick = t[i];
                if (tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {
                    totalTicks++;
                }
            }
				var hidSpan = document.createElement('span');
			  $(hidSpan).css({visibility:'hidden','white-space':'nowrap','font-size':'10px'});
			  $(document.body).append(hidSpan); 	
            for (var i=0; i<t.length; i++) {
                var tick = t[i];
                if (tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {
                    var elem = tick.draw(ctx, plot,tickIndex++,totalTicks,hidSpan);
                    elem.appendTo(this._elem);
                }
            }			
			tiny.garbageCollect(hidSpan);
			hidSpan = null;
            this._groupLabels = [];
            // now make group labels
            for (var i=0; i<this.groupLabels.length; i++)
            {
                var elem = $('<div style="position:absolute;" class="jqplot-'+this.name+'-groupLabel"></div>');
                elem.html(this.groupLabels[i]);
                this._groupLabels.push(elem);
                elem.appendTo(this._elem);
            }
        }
        return this._elem;
    };
    
    // called with scope of axis
    $.jqplot.CategoryAxisRenderer.prototype.set = function() { 
        var dim = 0;
        var temp;
        var w = 0;
        var h = 0;
        var lshow = (this._label == null) ? false : this._label.show;
        if (this.show) {
            var t = this._ticks;
            for (var i=0; i<t.length; i++) {
                var tick = t[i];
                if (tick.showLabel && (!tick.isMinorTick || this.showMinorTicks)) {
                    if (this.name == 'xaxis' || this.name == 'x2axis') {
                        temp = tick._elem.outerHeight(true);
                    }
                    else {
                        temp = tick._elem.outerWidth(true);
                    }
                    if (temp > dim) {
                        dim = temp;
                    }
                }
            }
            
            var dim2 = 0;
            for (var i=0; i<this._groupLabels.length; i++) {
                var l = this._groupLabels[i];
                if (this.name == 'xaxis' || this.name == 'x2axis') {
                    temp = l.outerHeight(true);
                }
                else {
                    temp = l.outerWidth(true);
                }
                if (temp > dim2) {
                    dim2 = temp;
                }
            }
            
            if (lshow) {
                w = this._label._elem.outerWidth(true);
                h = this._label._elem.outerHeight(true); 
            }
            if (this.name == 'xaxis') {
                dim += dim2 + h;
                this._elem.css({'height':dim+'px', left:'0px', bottom:'0px'});
            }
            else if (this.name == 'x2axis') {
                dim += dim2 + h;
                this._elem.css({'height':dim+'px', left:'0px', top:'0px'});
            }
            else if (this.name == 'yaxis') {
                var unitw = 0;            
                if (this._unitelm)
                {
                    if (!lshow) 
                    {
                        unitw = 12;//after rotation max width for unit element will be this.
                    }
                }
                dim += dim2 + w + unitw;
                this._elem.css({'width':dim+'px', left:'0px', top:'0px'});
                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {
                    this._label._elem.css('width', w+'px');
                }
            }
            else {
                dim += dim2 + w;
                this._elem.css({'width':dim+'px', right:'0px', top:'0px'});
                if (lshow && this._label.constructor == $.jqplot.AxisLabelRenderer) {
                    this._label._elem.css('width', w+'px');
                }
            }
        }  
    };
    
    // called with scope of axis
    $.jqplot.CategoryAxisRenderer.prototype.pack = function(pos, offsets) {
        var ticks = this._ticks;
        var max = this.max;
        var min = this.min;
        var offmax = offsets.max;
        var offmin = offsets.min;
        var lshow = (this._label == null) ? false : this._label.show;
        var i;
		
        for (var p in pos) {
            this._elem.css(p, pos[p]);
        }
        
        this._offsets = offsets;
        // pixellength will be + for x axes and - for y axes becasue pixels always measured from top left.
        var pixellength = offmax - offmin;
        var unitlength = max - min;
        
        // point to unit and unit to point conversions references to Plot DOM element top left corner.
        this.p2u = function(p){
            return (p - offmin) * unitlength / pixellength + min;
        };
        
        this.u2p = function(u){
            return (u - min) * pixellength / unitlength + offmin;
        };
                
        if (this.name == 'xaxis' || this.name == 'x2axis'){
            this.series_u2p = function(u){
                return (u - min) * pixellength / unitlength;
            };
            this.series_p2u = function(p){
                return p * unitlength / pixellength + min;
            };
        }
        
        else {
            this.series_u2p = function(u){
                return (u - max) * pixellength / unitlength;
            };
            this.series_p2u = function(p){
                return p * unitlength / pixellength + max;
            };
        }
        
        if (this.show) {
            if (this.name == 'xaxis' || this.name == 'x2axis') {
                for (i=0; i<ticks.length; i++) {
                    var t = ticks[i];
                    if (t.show && t.showLabel) {
                        var shim;
                        
                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                            // will need to adjust auto positioning based on which axis this is.
                            var temp = (this.name == 'xaxis') ? 1 : -1;
                            switch (t.labelPosition) {
                                case 'auto':
                                    // position at end
                                    if (temp * t.angle < 0) {
                                        shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    }
                                    // position at start
                                    else {
                                        shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                                    }
                                    break;
                                case 'end':
                                    shim = -t.getWidth() + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    break;
                                case 'start':
                                    shim = -t._textRenderer.height * Math.sin(t._textRenderer.angle) / 2;
                                    break;
                                case 'middle':
                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    break;
                                default:
                                    shim = -t.getWidth()/2 + t._textRenderer.height * Math.sin(-t._textRenderer.angle) / 2;
                                    break;
                            }
                        }
                        else {
                            shim = -t.getWidth()/2;
                        }
                        var val = this.u2p(t.value) + shim + 'px';
                        t._elem.css('left', val);
                        t.pack();
                    }
                }
                
                var labeledge=['bottom', 0];
                if (lshow) {
                    var w = this._label._elem.outerWidth(true);
                    this._label._elem.css('left', offmin + pixellength/2 - w/2 + 'px');
                    if (this.name == 'xaxis') {
                        this._label._elem.css('bottom', '0px');
                        labeledge = ['bottom', this._label._elem.outerHeight(true)];
                    }
                    else {
                        this._label._elem.css('top', '0px');
                        labeledge = ['top', this._label._elem.outerHeight(true)];
                    }
                    this._label.pack();
                }
                
                // draw the group labels
                var step = parseInt(this._ticks.length/this.groups, 10);
                for (i=0; i<this._groupLabels.length; i++) {
                    var mid = 0;
                    var count = 0;
                    for (var j=i*step; j<=(i+1)*step; j++) {
                        if (this._ticks[j]._elem && this._ticks[j].label != " ") {
                            var t = this._ticks[j]._elem;
                            var p = t.position();
                            mid += p.left + t.outerWidth(true)/2;
                            count++;
                        }
                    }
                    mid = mid/count;
                    this._groupLabels[i].css({'left':(mid - this._groupLabels[i].outerWidth(true)/2)});
                    this._groupLabels[i].css(labeledge[0], labeledge[1]);
                }
            }
            else {
                for (i=0; i<ticks.length; i++) {
                    var t = ticks[i];
                    if (t.show && t.showLabel) {                        
                        var shim;
                        if (t.constructor == $.jqplot.CanvasAxisTickRenderer && t.angle) {
                            // will need to adjust auto positioning based on which axis this is.
                            var temp = (this.name == 'yaxis') ? 1 : -1;
                            switch (t.labelPosition) {
                                case 'auto':
                                    // position at end
                                case 'end':
                                    if (temp * t.angle < 0) {
                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;
                                    }
                                    else {
                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                                    }
                                    break;
                                case 'start':
                                    if (t.angle > 0) {
                                        shim = -t._textRenderer.height * Math.cos(-t._textRenderer.angle) / 2;
                                    }
                                    else {
                                        shim = -t.getHeight() + t._textRenderer.height * Math.cos(t._textRenderer.angle) / 2;
                                    }
                                    break;
                                case 'middle':
                                    shim = -t.getHeight()/2;
                                    break;
                                default:
                                    shim = -t.getHeight()/2;
                                    break;
                            }
                        }
                        else {
                            shim = -t.getHeight()/2;
                        }
                        
                        var val = this.u2p(t.value) + shim + 'px';
                        t._elem.css('top', val);
                        t.pack();
                    }
                }
                
                var labeledge=['left', 0];
                if (lshow) {
                    var h = this._label._elem.outerHeight(true);
                    this._label._elem.css('top', offmax - pixellength/2 - h/2 + 'px');
                    if (this.name == 'yaxis') {
                        this._label._elem.css('left', '0px');
                        labeledge = ['left', this._label._elem.outerWidth(true)];
                    }
                    else {
                        this._label._elem.css('right', '0px');
                        labeledge = ['right', this._label._elem.outerWidth(true)];
                    }   
                    this._label.pack();
                }
                
                // draw the group labels, position top here, do left after label position.
                var step = parseInt(this._ticks.length/this.groups, 10);
                for (i=0; i<this._groupLabels.length; i++) {
                    var mid = 0;
                    var count = 0;
                    for (var j=i*step; j<=(i+1)*step; j++) {
                        if (this._ticks[j]._elem && this._ticks[j].label != " ") {
                            var t = this._ticks[j]._elem;
                            var p = t.position();
                            mid += p.top + t.outerHeight()/2;
                            count++;
                        }
                    }
                    mid = mid/count;
                    this._groupLabels[i].css({'top':mid - this._groupLabels[i].outerHeight()/2});
                    this._groupLabels[i].css(labeledge[0], labeledge[1]);
                    
                }
            }
        }
    };    
    
    
})(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 * jqPlot is currently available for use in all personal or commercial projects 
 * under both the MIT (http://www.opensource.org/licenses/mit-license.php) and GPL 
 * version 2.0 (http://www.gnu.org/licenses/gpl-2.0.html) licenses. This means that you can 
 * choose the license that best suits your project and use it accordingly. 
 *
 *
 * If you are feeling kind and generous, consider supporting the project by
 * making a donation at: http://www.jqplot.com/donate.php .
 *
 *
 *     version 2007.04.27
 *     author Ash Searle
 *     http://hexmen.com/blog/2007/03/printf-sprintf/
 *     http://hexmen.com/js/sprintf.js
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {
    /**
     * Class: $.jqplot.MeterGaugeRenderer
     * Plugin renderer to draw a meter gauge chart.
     * 
     * Data consists of a single series with 1 data point to position the gauge needle.
     * 
     * A meterGauge plot does not support events.
     */
    $.jqplot.MeterGaugeRenderer = function(){
        $.jqplot.LineRenderer.call(this);
    };
    
    $.jqplot.MeterGaugeRenderer.prototype = new $.jqplot.LineRenderer();
    $.jqplot.MeterGaugeRenderer.prototype.constructor = $.jqplot.MeterGaugeRenderer;
    
    // called with scope of a series
    $.jqplot.MeterGaugeRenderer.prototype.init = function(options,plot) {
        // Group: Properties
        // prop: diameter
        // Outer diameter of the meterGauge, auto computed by default
        this.diameter = null;
        // prop: padding
        // padding between the meterGauge and plot edges, auto
        // calculated by default.
        this.padding = null;
        // prop: shadowOffset
        // offset of the shadow from the gauge ring and offset of 
        // each succesive stroke of the shadow from the last.
        this.shadowOffset = 2;
        // prop: shadowAlpha
        // transparency of the shadow (0 = transparent, 1 = opaque)
        this.shadowAlpha = 0.07;
        // prop: shadowDepth
        // number of strokes to apply to the shadow, 
        // each stroke offset shadowOffset from the last.
        this.shadowDepth = 4;
        // prop: background
        // background color of the inside of the gauge.
        this.background = "rgba(255,255,255,0)";
        // prop: ringColor
        // color of the outer ring, hub, and needle of the gauge.
        this.ringColor = "#BBC6D0";
        // needle color not implemented yet.
        this.needleColor = "#434243";
        // prop: tickColor
        // color of the tick marks around the gauge.
        this.tickColor = "989898";
        // prop: ringWidth
        // width of the ring around the gauge.  Auto computed by default.
        this.ringWidth = null;
        // prop: min
        // Minimum value on the gauge.  Auto computed by default
        this.min;
        // prop: max
        // Maximum value on the gauge. Auto computed by default
        this.max;
        // prop: ticks
        // Array of tick values. Auto computed by default.
        this.ticks = [];
        // prop: showTicks
        // true to show ticks around gauge.
        this.showTicks = true;
        // prop: showTickLabels
        // true to show tick labels next to ticks.
        this.showTickLabels = true;
        // prop: label
        // A gauge label like 'kph' or 'Volts'
        this.label = null;
        // prop: labelHeightAdjust
        // Number of Pixels to offset the label up (-) or down (+) from its default position.
        this.labelHeightAdjust = 0;
        // prop: labelPosition
        // Where to position the label, either 'inside' or 'bottom'.
        this.labelPosition = 'inside';
        
        this.highlightColors = [];
        
        this.img = new Image();
        this.img.tinythis = this;
        
        // prop: intervals
        // Array of ranges to be drawn around the gauge.
        // Array of form:
        // > [value1, value2, ...]
        // indicating the values for the first, second, ... intervals.
        this.intervals = [];
        // prop: intervalColors
        // Array of colors to use for the intervals.
        this.intervalColors = ["#61C44F", "#73BEE3", "#E7CB52", "#EA9E25", "#CA3333", "#4bb2c5", "#EAA228", "#c5b47f", "#579575", "#839557", "#958c12", "#953579", "#4b5de4", "#d8b83f", "#ff5800", "#0085cc", "#c747a3", "#cddf54", "#FBD178", "#26B4E3", "#bd70c7"];
        this.intervalGraColors = ['#9ad98e','#a6d5ed','#f0de90','#f2c174','#dd7d7d',"#bbe2e9", "#EAA228", "#c5b47f", "#579575", "#839557", "#958c12", "#953579", "#4b5de4", "#d8b83f", "#ff5800", "#0085cc", "#c747a3", "#cddf54", "#FBD178", "#26B4E3", "#bd70c7"];
        this.intervalLightGraColors = ['#c6eac0','#cce8f5','#f6ecc1','#f7dcb0','#ecb5b5',"#bbe2e9", "#EAA228", "#c5b47f", "#579575", "#839557", "#958c12", "#953579", "#4b5de4", "#d8b83f", "#ff5800", "#0085cc", "#c747a3", "#cddf54", "#FBD178", "#26B4E3", "#bd70c7"];
        // prop: intervalInnerRadius
        // Radius of the inner circle of the interval ring.
        this.intervalInnerRadius =  null;
        // prop: intervalOuterRadius
        // Radius of the outer circle of the interval ring.
        this.intervalOuterRadius = null;
        this.tickRenderer = $.jqplot.MeterGaugeTickRenderer;
        // ticks spaced every 1, 2, 2.5, 5, 10, 20, .1, .2, .25, .5, etc.
        this.tickPositions = [1, 2, 2.5, 5, 10];
        // prop: tickSpacing
        // Degrees between ticks.  This is a target number, if 
        // incompatible span and ticks are supplied, a suitable
        // spacing close to this value will be computed.
        this.tickSpacing = 30;
        this.numberMinorTicks = null;
        // prop: hubRadius
        // Radius of the hub at the bottom center of gauge which the needle attaches to.
        // Auto computed by default
        this.hubRadius = null;
        // prop: tickPadding
        // padding of the tick marks to the outer ring and the tick labels to marks.
        // Auto computed by default.
        this.tickPadding = null;
        // prop: needleThickness
        // Maximum thickness the needle.  Auto computed by default.
        this.needleThickness = null;
        // prop: needlePad
        // Padding between needle and inner edge of the ring when the needle is at the min or max gauge value.
        this.needlePad = 6;
        // prop: pegNeedle
        // True will stop needle just below/above the  min/max values if data is below/above min/max,
        // as if the meter is "pegged".
        this.pegNeedle = true;
        this._type = 'meterGauge';
        
        $.extend(true, this, options);
        this.type = null;
        this.numberTicks = null;
        this.tickInterval = null;
        // span, the sweep (in degrees) from min to max.  This gauge is 
        // a semi-circle.
        this.span = 180;
        if (this.type == 'circular') {
            this.semiCircular = false;
        }
        else if (this.type != 'circular') {
            this.semiCircular = true;
        }
        else {
            this.semiCircular = (this.span <= 180) ? true : false;
        }
        this._tickPoints = [];
        // reference to label element.
        this._labelElem = null;
        
        // start the gauge at the beginning of the span
        this.startAngle = (90 + (360 - this.span)/2) * Math.PI/180;
        this.endAngle = (90 - (360 - this.span)/2) * Math.PI/180;
        
        this.setmin = !!(this.min == null);
        this.setmax = !!(this.max == null);
        
        // if given intervals and is an array of values, create labels and colors.
        if (this.intervals.length) {
            if (this.intervals[0].length == null || this.intervals.length == 1) {
                for (var i=0; i<this.intervals.length; i++) {
                    this.intervals[i] = [this.intervals[i], this.intervals[i], this.intervalColors[i],this.intervalGraColors[i],this.intervalLightGraColors[i]];
                }
            }
            else if (this.intervals[0].length == 2) {
                for (i=0; i<this.intervals.length; i++) {
                    this.intervals[i] = [this.intervals[i][0], this.intervals[i][1], this.intervalColors[i],this.intervalGraColors[i],this.intervalLightGraColors[i]];
                }
            }
        }
        
        // compute min, max and ticks if not supplied:
        if (this.ticks.length) {
            if (this.ticks[0].length == null || this.ticks[0].length == 1) {
                for (var i=0; i<this.ticks.length; i++) {
                    this.ticks[i] = [this.ticks[i], this.ticks[i]];
                }
            }
            this.min = (this.min == null) ? this.ticks[0][0] : this.min;
            this.max = (this.max == null) ? this.ticks[this.ticks.length-1][0] : this.max;
            this.setmin = false;
            this.setmax = false;
            this.numberTicks = this.ticks.length;
            this.tickInterval = this.ticks[1][0] - this.ticks[0][0];
            this.tickFactor = Math.floor(parseFloat((Math.log(this.tickInterval)/Math.log(10)).toFixed(11)));
            // use the first interal to calculate minor ticks;
            this.numberMinorTicks = getnmt(this,this.tickPositions, this.tickInterval, this.tickFactor);
        }
        
        else if (this.intervals.length) {
            this.min = (this.min == null) ? 0 : this.min;
            this.setmin = false;
            if (this.max == null) {
                if (this.intervals[this.intervals.length-1][0] >= this.data[0][1]) {
                    this.max = this.intervals[this.intervals.length-1][0];
                    this.setmax = false;
                }
            }
            else {
                this.setmax = false;
            }
        }
        
        else {
            // no ticks and no intervals supplied, put needle in middle
            this.min = (this.min == null) ? 0 : this.min;
            this.setmin = false;
            if (this.max == null) {
                this.max = this.data[0][1] * 1.25;
                this.setmax = true;
            }
            else {
                this.setmax = false;
            }
        }
        
        plot.eventListenerHooks.addOnce('jqplotMouseMove', handleMove);
    };
    
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
    	var s = plot.series[0],canvas = s.plugins.highlightCanvas;
        if (canvas) {
            var ctx = canvas._ctx, width = s.seriesPoints[0];
            if (neighbor) {
                if (neighbor.pointIndex > 0) {
                    width = s.seriesPoints[neighbor.pointIndex] - s.seriesPoints[neighbor.pointIndex - 1];
                }
                ctx.clearRect(0, 0, s.seriesPoints[s.seriesPoints.length - 1], 22);
                var opts = {
                    fillStyle : s.highlightColors[neighbor.pointIndex],
                    fillRect : true
                };
                s.renderer.shapeRenderer.draw(ctx, [neighbor.points, 0, width, 22], opts);
                canvas = null;
            } else {
                ctx.clearRect(0, 0, s.seriesPoints[s.seriesPoints.length - 1], 22);
            }
        }

    }
     
    $.jqplot.MeterGaugeRenderer.prototype.setGridData = function(plot) {
    	this.plot = plot;
        // set gridData property.  This will hold angle in radians of each data point.
        var stack = [];
        var td = [];
        var sa = this.startAngle;
        for (var i=0; i<this.data.length; i++){
            stack.push(this.data[i][1]);
            td.push([this.data[i][0]]);
            if (i>0) {
                stack[i] += stack[i-1];
            }
        }
        var fact = Math.PI*2/stack[stack.length - 1];
        
        for (var i=0; i<stack.length; i++) {
            td[i][1] = stack[i] * fact;
        }
        this.gridData = td;
    };
    
    $.jqplot.MeterGaugeRenderer.prototype.makeGridData = function(data, plot) {
        var stack = [];
        var td = [];
        var sa = this.startAngle;
        for (var i=0; i<data.length; i++){
            stack.push(data[i][1]);
            td.push([data[i][0]]);
            if (i>0) {
                stack[i] += stack[i-1];
            }
        }
        var fact = Math.PI*2/stack[stack.length - 1];
        
        for (var i=0; i<stack.length; i++) {
            td[i][1] = stack[i] * fact;
        }
        return td;
    };

        
    function getnmt(series, pos, interval, fact) {
        return series.tinyMinorTicks;
    }
    
    $.jqplot.MeterGaugeAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
    };
    
    $.jqplot.MeterGaugeAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();
    $.jqplot.MeterGaugeAxisRenderer.prototype.constructor = $.jqplot.MeterGaugeAxisRenderer;
        
    
    // There are no traditional axes on a gauge chart.  We just need to provide
    // dummy objects with properties so the plot will render.
    // called with scope of axis object.
    $.jqplot.MeterGaugeAxisRenderer.prototype.init = function(options){
        
        this.tickRenderer = $.jqplot.MeterGaugeTickRenderer;
        $.extend(true, this, options);
        // I don't think I'm going to need _dataBounds here.
        // have to go Axis scaling in a way to fit chart onto plot area
        // and provide u2p and p2u functionality for mouse cursor, etc.
        // for convienence set _dataBounds to 0 and 100 and
        // set min/max to 0 and 100.
        this._dataBounds = {min:0, max:100};
        this.min = 0;
        this.max = 100;
        this.showTicks = false;
        this.ticks = [];
        this.showMark = false;
        this.show = false; 
    };
    
    $.jqplot.MeterGaugeLegendRenderer = function(){
        $.jqplot.TableLegendRenderer.call(this);
    };
    
    $.jqplot.MeterGaugeLegendRenderer.prototype = new $.jqplot.TableLegendRenderer();
    $.jqplot.MeterGaugeLegendRenderer.prototype.constructor = $.jqplot.MeterGaugeLegendRenderer;
    
    /**
     * Class: $.jqplot.MeterGaugeLegendRenderer
     *Meter gauges don't typically have a legend, this overrides the default legend renderer.
     */
    $.jqplot.MeterGaugeLegendRenderer.prototype.init = function(options) {
        // Maximum number of rows in the legend.  0 or null for unlimited.
        this.numberRows = null;
        // Maximum number of columns in the legend.  0 or null for unlimited.
        this.numberColumns = null;
        $.extend(true, this, options);
    };
    
    // called with context of legend
    $.jqplot.MeterGaugeLegendRenderer.prototype.draw = function() {
        if (this.show) {
            var series = this._series;
            var ss = 'position:absolute;';
            ss += (this.background) ? 'background:'+this.background+';' : '';
            ss += (this.border) ? 'border:'+this.border+';' : '';
            ss += (this.fontSize) ? 'font-size:'+this.fontSize+';' : '';
            ss += (this.fontFamily) ? 'font-family:'+this.fontFamily+';' : '';
            ss += (this.textColor) ? 'color:'+this.textColor+';' : '';
            ss += (this.marginTop != null) ? 'margin-top:'+this.marginTop+';' : '';
            ss += (this.marginBottom != null) ? 'margin-bottom:'+this.marginBottom+';' : '';
            ss += (this.marginLeft != null) ? 'margin-left:'+this.marginLeft+';' : '';
            ss += (this.marginRight != null) ? 'margin-right:'+this.marginRight+';' : '';
            this._elem = $('<table class="jqplot-table-legend" style="'+ss+'"></table>');
            // MeterGauge charts legends don't go by number of series, but by number of data points
            // in the series.  Refactor things here for that.
            
            var pad = false, 
                reverse = false,
                nr, nc;
            var s = series[0];
            
            if (s.show) {
                var pd = s.data;
                if (this.numberRows) {
                    nr = this.numberRows;
                    if (!this.numberColumns){
                        nc = Math.ceil(pd.length/nr);
                    }
                    else{
                        nc = this.numberColumns;
                    }
                }
                else if (this.numberColumns) {
                    nc = this.numberColumns;
                    nr = Math.ceil(pd.length/this.numberColumns);
                }
                else {
                    nr = pd.length;
                    nc = 1;
                }
                
                var i, j, tr, td1, td2, lt, rs, color;
                var idx = 0;    
                
                for (i=0; i<nr; i++) {
                    if (reverse){
                        tr = $('<tr class="jqplot-table-legend"></tr>').prependTo(this._elem);
                    }
                    else{
                        tr = $('<tr class="jqplot-table-legend"></tr>').appendTo(this._elem);
                    }
                    for (j=0; j<nc; j++) {
                        if (idx < pd.length){
                            lt = this.labels[idx] || pd[idx][0].toString();
                            color = s.color;
                            if (!reverse){
                                if (i>0){
                                    pad = true;
                                }
                                else{
                                    pad = false;
                                }
                            }
                            else{
                                if (i == nr -1){
                                    pad = false;
                                }
                                else{
                                    pad = true;
                                }
                            }
                            rs = (pad) ? this.rowSpacing : '0';
                
                            td1 = $('<td class="jqplot-table-legend" style="text-align:center;padding-top:'+rs+';">'+
                                '<div><div class="jqplot-table-legend-swatch" style="border-color:'+color+';"></div>'+
                                '</div></td>');
                            td2 = $('<td class="jqplot-table-legend" style="padding-top:'+rs+';"></td>');
                            if (this.escapeHtml){
                                td2.text(lt);
                            }
                            else {
                                td2.html(lt);
                            }
                            if (reverse) {
                                td2.prependTo(tr);
                                td1.prependTo(tr);
                            }
                            else {
                                td1.appendTo(tr);
                                td2.appendTo(tr);
                            }
                            pad = true;
                        }
                        idx++;
                    }   
                }
            }
        }
        return this._elem;                
    };
    
    
    // setup default renderers for axes and legend so user doesn't have to
    // called with scope of plot
    function preInit(target, data, options) {
        options = options || {};
        options.axesDefaults = options.axesDefaults || {};
        options.legend = options.legend || {};
        options.seriesDefaults = options.seriesDefaults || {};
        options.grid = options.grid || {};
           
        // only set these if there is a gauge series
        var setopts = false;
        if (options.seriesDefaults.renderer == $.jqplot.MeterGaugeRenderer) {
            setopts = true;
        }
        else if (options.series) {
            for (var i=0; i < options.series.length; i++) {
                if (options.series[i].renderer == $.jqplot.MeterGaugeRenderer) {
                    setopts = true;
                }
            }
        }
        
        if (setopts) {
            options.axesDefaults.renderer = $.jqplot.MeterGaugeAxisRenderer;
            options.legend.renderer = $.jqplot.MeterGaugeLegendRenderer;
            options.legend.preDraw = true;
            options.grid.background = options.grid.background || 'white';
            options.grid.drawGridlines = false;
            options.grid.borderWidth = (options.grid.borderWidth != null) ? options.grid.borderWidth : 0;
            options.grid.shadow = (options.grid.shadow != null) ? options.grid.shadow : false;
        }
    }
    
    // called with scope of plot
    function postParseOptions(options) {
    }
    
    $.jqplot.preInitHooks.push(preInit);
    $.jqplot.postParseOptionsHooks.push(postParseOptions);
    
    $.jqplot.MeterGaugeTickRenderer = function() {
        $.jqplot.AxisTickRenderer.call(this);
    };
    
    $.jqplot.MeterGaugeTickRenderer.prototype = new $.jqplot.AxisTickRenderer();
    $.jqplot.MeterGaugeTickRenderer.prototype.constructor = $.jqplot.MeterGaugeTickRenderer;
    
})(jQuery);

    
    /**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {
    
    // Class: $.jqplot.BarRenderer
    // A plugin renderer for jqPlot to draw a bar plot.
    // Draws series as a line.
    
    $.jqplot.BarRenderer = function(){
        $.jqplot.LineRenderer.call(this);
    };
    
    $.jqplot.BarRenderer.prototype = new $.jqplot.LineRenderer();
    $.jqplot.BarRenderer.prototype.constructor = $.jqplot.BarRenderer;
    
    // called with scope of series.
    $.jqplot.BarRenderer.prototype.init = function(options, plot) {
        // Group: Properties
        //
        // prop: barPadding
        // Number of pixels between adjacent bars at the same axis value.
        this.barPadding = 8;
        // prop: barMargin
        // Number of pixels between groups of bars at adjacent axis values.
        this.barMargin = 10;
        // prop: barDirection
        // 'vertical' = up and down bars, 'horizontal' = side to side bars
        this.barDirection = 'vertical';
        // prop: barWidth
        // Width of the bar in pixels (auto by devaul).  null = calculated automatically.
        this.barWidth = null;
        // prop: shadowOffset
        // offset of the shadow from the slice and offset of 
        // each succesive stroke of the shadow from the last.
        this.shadowOffset = 1;
        // prop: shadowDepth
        // number of strokes to apply to the shadow, 
        // each stroke offset shadowOffset from the last.
        this.shadowDepth = 5;
        // prop: shadowAlpha
        // transparency of the shadow (0 = transparent, 1 = opaque)
        this.shadowAlpha = 0.08;
        // prop: waterfall
        // true to enable waterfall plot.
        this.waterfall = false;
        // prop: groups
        // group bars into this many groups
        this.groups = 1;
        // prop: varyBarColor
        // true to color each bar of a series separately rather than
        // have every bar of a given series the same color.
        // If used for non-stacked multiple series bar plots, user should
        // specify a separate 'seriesColors' array for each series.
        // Otherwise, each series will set their bars to the same color array.
        // This option has no Effect for stacked bar charts and is disabled.
        this.varyBarColor = false;
        // prop: highlightMouseOver
        // True to highlight slice when moused over.
        // This must be false to enable highlightMouseDown to highlight when clicking on a slice.
        this.highlightMouseOver = true;
        // prop: highlightMouseDown
        // True to highlight when a mouse button is pressed over a slice.
        // This will be disabled if highlightMouseOver is true.
        this.highlightMouseDown = false;
        // prop: highlightColors
        // an array of colors to use when highlighting a bar.
        this.highlightColors = [];
        // prop: transposedData
        // NOT IMPLEMENTED YET.  True if this is a horizontal bar plot and 
        // x and y values are "transposed".  Tranposed, or "swapped", data is 
        // required prior to rev. 894 builds of jqPlot with horizontal bars. 
        // Allows backward compatability of bar renderer horizontal bars with 
        // old style data sets.
        this.transposedData = true;
        this.renderer.animation = {
            show: false,
            direction: 'down',
            speed: 3000,
            _supported: true
        };
        this._type = 'bar';
        
        // if user has passed in highlightMouseDown option and not set highlightMouseOver, disable highlightMouseOver
        if (options.highlightMouseDown && options.highlightMouseOver == null) {
            options.highlightMouseOver = false;
        }
        
        //////
        // This is probably wrong here.
        // After going back and forth on wether renderer should be the thing
        // or extend the thing, it seems that it it best if it is a property
        // on the thing.  This should be something that is commonized 
        // among series renderers in the future.
        //////
        $.extend(true, this, options);

        // really should probably do this
        $.extend(true, this.renderer, options);
        // fill is still needed to properly draw the legend.
        // bars have to be filled.
        this.fill = true;

        // if horizontal bar and animating, reset the default direction
        if (this.barDirection === 'horizontal' && this.rendererOptions.animation && this.rendererOptions.animation.direction == null) {
            this.renderer.animation.direction = 'left';
        }
        
        if (this.waterfall) {
            this.fillToZero = false;
            this.disableStack = true;
        }
        
        if (this.barDirection == 'vertical' ) {
            this._primaryAxis = '_xaxis';
            this._stackAxis = 'y';
            this.fillAxis = 'y';
        }
        else {
            this._primaryAxis = '_yaxis';
            this._stackAxis = 'x';
            this.fillAxis = 'x';
        }
        // index of the currenty highlighted point, if any
        this._highlightedPoint = null;
        // total number of values for all bar series, total number of bar series, and position of this series
        this._plotSeriesInfo = null;
        // Array of actual data colors used for each data point.
        this._dataColors = [];
        this._barPoints = [];
        
        // set the shape renderer options
        var opts = {lineJoin:'miter', lineCap:'round', fill:true, isarc:false, strokeStyle:this.color, fillStyle:this.color, closePath:this.fill};
        this.renderer.shapeRenderer.init(opts);
        // set the shadow renderer options
        var sopts = {lineJoin:'miter', lineCap:'round', fill:true, isarc:false, angle:this.shadowAngle, offset:this.shadowOffset, alpha:this.shadowAlpha, depth:this.shadowDepth, closePath:this.fill};
        this.renderer.shadowRenderer.init(sopts);
        
        plot.postInitHooks.addOnce(postInit);
        plot.postDrawHooks.addOnce(postPlotDraw);
        plot.eventListenerHooks.addOnce('jqplotMouseMove', handleMove);
        plot.eventListenerHooks.addOnce('jqplotMouseDown', handleMouseDown);
        plot.eventListenerHooks.addOnce('jqplotMouseUp', handleMouseUp);
        plot.eventListenerHooks.addOnce('jqplotClick', handleClick);
        plot.eventListenerHooks.addOnce('jqplotRightClick', handleRightClick); 
    };
    
    // called with scope of series
    function barPreInit(target, data, seriesDefaults, options) {
        if (this.rendererOptions.barDirection == 'horizontal') {
            this._stackAxis = 'x';
            this._primaryAxis = '_yaxis';
        }
        if (this.rendererOptions.waterfall == true) {
            this._data = $.extend(true, [], this.data);
            var sum = 0;
            var pos = (!this.rendererOptions.barDirection || this.rendererOptions.barDirection === 'vertical' || this.transposedData === false) ? 1 : 0;
            for(var i=0; i<this.data.length; i++) {
                sum += this.data[i][pos];
                if (i>0) {
                    this.data[i][pos] += this.data[i-1][pos];
                }
            }
            this.data[this.data.length] = (pos == 1) ? [this.data.length+1, sum] : [sum, this.data.length+1];
            this._data[this._data.length] = (pos == 1) ? [this._data.length+1, sum] : [sum, this._data.length+1];
        }
        if (this.rendererOptions.groups > 1) {
            this.breakOnNull = true;
            var l = this.data.length;
            var skip = parseInt(l/this.rendererOptions.groups, 10);
            var count = 0;
            for (var i=skip; i<l; i+=skip) {
                this.data.splice(i+count, 0, [null, null]);
                count++;
            }
            for (i=0; i<this.data.length; i++) {
                if (this._primaryAxis == '_xaxis') {
                    this.data[i][0] = i+1;
                }
                else {
                    this.data[i][1] = i+1;
                }
            }
        }
    }
    
    $.jqplot.preSeriesInitHooks.push(barPreInit);
    
    // needs to be called with scope of series, not renderer.
    $.jqplot.BarRenderer.prototype.calcSeriesNumbers = function() {
        var nvals = 0;
        var nseries = 0;
        var paxis = this[this._primaryAxis];
        var s, series, pos;
        // loop through all series on this axis
        for (var i=0; i < paxis._series.length; i++) {
            series = paxis._series[i];
            if (series === this) {
                pos = i;
            }
            // is the series rendered as a bar?
            if (series.renderer.constructor == $.jqplot.BarRenderer) {
                // gridData may not be computed yet, use data length insted
                nvals += series.data.length;
                nseries += 1;
            }
        }
        // return total number of values for all bar series, total number of bar series, and position of this series
        return [nvals, nseries, pos];
    };

    $.jqplot.BarRenderer.prototype.setBarWidth = function() {
        // need to know how many data values we have on the approprate axis and figure it out.
        var i;
        var nvals = 0;
        var nseries = 0;
        var paxis = this[this._primaryAxis];
        var s, series, pos;
        var temp = this._plotSeriesInfo = this.renderer.calcSeriesNumbers.call(this);
        nvals = temp[0];
        nseries = temp[1];
        var nticks = paxis.numberTicks;
        var nbins = (nticks-1)/2;
        // so, now we have total number of axis values.
        if (paxis.name == 'xaxis' || paxis.name == 'x2axis') {
            if (this._stack) {
                this.barWidth = (paxis._offsets.max - paxis._offsets.min) / nvals * nseries - this.barMargin;
            }
            else {
                this.barWidth = ((paxis._offsets.max - paxis._offsets.min)/nbins  - this.barPadding * (nseries-1) - this.barMargin*2)/nseries;
				if(this.barDirection === 'vertical')
				{
					if(this.barWidth<7)//include 2px for border
					{
						this.barWidth = 7;
					}
					else if(this.barWidth>30)
					{
						this.barWidth = 30;
					}
				}
            }
        }
        else {
            if (this._stack) {
                this.barWidth = (paxis._offsets.min - paxis._offsets.max) / nvals * nseries - this.barMargin;
            }
            else {
                this.barWidth = ((paxis._offsets.min - paxis._offsets.max)/nbins  - this.barPadding * (nseries-1) - this.barMargin*2)/nseries;
            }
        }
        return [nvals, nseries];
    };

    function computeHighlightColors (colors) {
        var ret = [];
        for (var i=0; i<colors.length; i++){
            var rgba = $.jqplot.getColorComponents(colors[i]);
            var newrgb = [rgba[0], rgba[1], rgba[2]];
            var sum = newrgb[0] + newrgb[1] + newrgb[2];
            for (var j=0; j<3; j++) {
                // when darkening, lowest color component can be is 60.
                newrgb[j] = (sum > 570) ?  newrgb[j] * 0.8 : newrgb[j] + 0.3 * (255 - newrgb[j]);
                newrgb[j] = parseInt(newrgb[j], 10);
            }
            ret.push('rgb('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+')');
        }
        return ret;
    }
    
    $.jqplot.BarRenderer.prototype.draw = function(ctx, gridData, options) {
        var i;
        // Ughhh, have to make a copy of options b/c it may be modified later.
        var opts = $.extend({}, options);
        var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;
        var showLine = (opts.showLine != undefined) ? opts.showLine : this.showLine;
        var fill = (opts.fill != undefined) ? opts.fill : this.fill;
        var xaxis = this.xaxis;
        var yaxis = this.yaxis;
        var xp = this._xaxis.series_u2p;
        var yp = this._yaxis.series_u2p;
        var pointx, pointy;
        // clear out data colors.
        this._dataColors = [];
        this._barPoints = [];
        
        if (this.barWidth == null) {
            this.renderer.setBarWidth.call(this);
        }
        
        var temp = this._plotSeriesInfo = this.renderer.calcSeriesNumbers.call(this);
        var nvals = temp[0];
        var nseries = temp[1];
        var pos = temp[2];
		var points = [];
        
        if (this._stack) {
            this._barNudge = 0;
        }
        else {
            this._barNudge = (-Math.abs(nseries/2 - 0.5) + pos) * (this.barWidth + this.barPadding);
        }
        if (showLine) {
            var negativeColors = new $.jqplot.ColorGenerator(this.negativeSeriesColors);
            var positiveColors = new $.jqplot.ColorGenerator(this.seriesColors);
            var negativeColor = negativeColors.get(this.index);
            if (! this.useNegativeColors) {
                negativeColor = opts.fillStyle;
            }
            var positiveColor = opts.fillStyle;
			var base;
			var xstart; 
			var ystart;
            
            if (this.barDirection == 'vertical') {
                for (var i=0; i<gridData.length; i++) {
                    if (this.data[i][1] == null) {
                        continue;
                    }
                    points = [];
                    base = gridData[i][0] + this._barNudge;
					ystart;
                    
                    // stacked
                    if (this._stack && this._prevGridData.length) {
                        ystart = this._prevGridData[i][1];
                    }
                    // not stacked and first series in stack
                    else {
                        if (this.fillToZero) {
                            ystart = this._yaxis.series_u2p(0);
                        }
                        else if (this.waterfall && i > 0 && i < this.gridData.length-1) {
                            ystart = this.gridData[i-1][1];
                        }
                        else if (this.waterfall && i == 0 && i < this.gridData.length-1) {
                            if (this._yaxis.min <= 0 && this._yaxis.max >= 0) {
                                ystart = this._yaxis.series_u2p(0);
                            }
                            else if (this._yaxis.min > 0) {
                                ystart = ctx.canvas.height;
                            }
                            else {
                                ystart = 0;
                            }
                        }
                        else if (this.waterfall && i == this.gridData.length - 1) {
                            if (this._yaxis.min <= 0 && this._yaxis.max >= 0) {
                                ystart = this._yaxis.series_u2p(0);
                            }
                            else if (this._yaxis.min > 0) {
                                ystart = ctx.canvas.height;
                            }
                            else {
                                ystart = 0;
                            }
                        }
                        else {
                            ystart = ctx.canvas.height;
                        }
                    }
                    if ((this.fillToZero && this._plotData[i][1] < 0) || (this.waterfall && this._data[i][1] < 0)) {
                        if (this.varyBarColor && !this._stack) {
                            if (this.useNegativeColors) {
                                opts.fillStyle = negativeColors.next();
                            }
                            else {
                                opts.fillStyle = positiveColors.next();
                            }
                        }
                        else {
                            opts.fillStyle = negativeColor;
                        }
                    }
                    else {
                        if (this.varyBarColor && !this._stack) {
                            opts.fillStyle = positiveColors.next();
                        }
                        else {
                            opts.fillStyle = positiveColor;
                        }
                    }
					
					if (!this.fillToZero || this._plotData[i][1] >= 0) { 
						points.push([base-this.barWidth/2, ystart]);
						points.push([base-this.barWidth/2, gridData[i][1]]);
						points.push([base+this.barWidth/2, gridData[i][1]]);
						points.push([base+this.barWidth/2, ystart]);
					}
					// for negative bars make sure points are always ordered clockwise
					else {              
						points.push([base-this.barWidth/2, gridData[i][1]]);
						points.push([base-this.barWidth/2, ystart]);
						points.push([base+this.barWidth/2, ystart]);
						points.push([base+this.barWidth/2, gridData[i][1]]);
					}
                    this._barPoints.push(points);
                    // now draw the shadows if not stacked.
                    // for stacked plots, they are predrawn by drawShadow
                    if (shadow && !this._stack) {
                        var sopts = $.extend(true, {}, opts);
                        // need to get rid of fillStyle on shadow.
                        delete sopts.fillStyle;
                        this.renderer.shadowRenderer.draw(ctx, points, sopts);
                    }
                    var clr = opts.fillStyle || this.color;
                    this._dataColors.push(clr);
                    var gradcolor = clr;
                    if(gradcolor)
                    {
                        var gradref = $.jqplot.GradientRenderer(gradcolor,ctx,points,this.barDirection, this.index);
                        if(gradref)
                        {
                            opts.fillStyle = gradref;
                        }
                    }
                    this.renderer.shapeRenderer.draw(ctx, points, opts); 
                    
                    if (!this.fillToZero || this._plotData[i][1] >= 0) 
                    {
                    	if(this.borderColor)
                    		{
	                    		var topts = $.extend(true, {strokeStyle: this.borderColor,strokeRect:true}, opts);                    
	                            var point1 = 0,point2 = 0,point3 = 0,point4 = 0,hpoint1 = 0,hpoint2 = 0;
	                            hpoint1 = Math.round(points[0][0]);
	                            hpoint2 = Math.round(points[0][1]);
	                            point1 = Math.round(points[1][0]);
	                            point2 = Math.round(points[1][1]);
	                            point3 = Math.round(points[2][0]);
	                            point4 = Math.round(points[2][1]);
	                            
	                            var dist1 = point3 - point1;
	                            var dist2 = point2 - point4;
	                            var bwidth = Math.round(Math.sqrt((dist1*dist1)+(dist2*dist2)));
	                            var hdist1 = point1 - hpoint1;
	                            var hdist2 = point2 - hpoint2;
	                            var hheight = Math.round(Math.sqrt((hdist1*hdist1)+(hdist2*hdist2)));                        
	                            this.renderer.shapeRenderer.draw(ctx, [hpoint1,point4,bwidth,hheight], topts);
                    		}
                    }
                    else
                    {
                    }
                }
            }
            
            else if (this.barDirection == 'horizontal'){
                for (var i=0; i<gridData.length; i++) {
                    if (this.data[i][0] == null) {
                        continue;
                    }
                    points = [];
                    base = gridData[i][1] - this._barNudge;
                    xstart;
                    
                    if (this._stack && this._prevGridData.length) {
                        xstart = this._prevGridData[i][0];
                    }
                    // not stacked and first series in stack
                    else {
                        if (this.fillToZero) {
                            xstart = this._xaxis.series_u2p(0);
                        }
                        else if (this.waterfall && i > 0 && i < this.gridData.length-1) {
                            xstart = this.gridData[i-1][1];
                        }
                        else if (this.waterfall && i == 0 && i < this.gridData.length-1) {
                            if (this._xaxis.min <= 0 && this._xaxis.max >= 0) {
                                xstart = this._xaxis.series_u2p(0);
                            }
                            else if (this._xaxis.min > 0) {
                                xstart = 0;
                            }
                            else {
                                xstart = ctx.canvas.width;
                            }
                        }
                        else if (this.waterfall && i == this.gridData.length - 1) {
                            if (this._xaxis.min <= 0 && this._xaxis.max >= 0) {
                                xstart = this._xaxis.series_u2p(0);
                            }
                            else if (this._xaxis.min > 0) {
                                xstart = 0;
                            }
                            else {
                                xstart = ctx.canvas.width;
                            }
                        }
                        else {
                            xstart = 0;
                        }
                    }
                    if ((this.fillToZero && this._plotData[i][1] < 0) || (this.waterfall && this._data[i][1] < 0)) {
                        if (this.varyBarColor && !this._stack) {
                            if (this.useNegativeColors) {
                                opts.fillStyle = negativeColors.next();
                            }
                            else {
                                opts.fillStyle = positiveColors.next();
                            }
                        }
                    }
                    else {
                        if (this.varyBarColor && !this._stack) {
                            opts.fillStyle = positiveColors.next();
                        }
                        else {
                            opts.fillStyle = positiveColor;
                        }                    
                    }
                    

                    if (!this.fillToZero || this._plotData[i][0] >= 0) {
                        points.push([xstart, base + this.barWidth / 2]);
                        points.push([xstart, base - this.barWidth / 2]);
                        points.push([gridData[i][0], base - this.barWidth / 2]);
                        points.push([gridData[i][0], base + this.barWidth / 2]);
                    }
                    else {
                        points.push([gridData[i][0], base + this.barWidth / 2]);
                        points.push([gridData[i][0], base - this.barWidth / 2]);
                        points.push([xstart, base - this.barWidth / 2]);
                        points.push([xstart, base + this.barWidth / 2]);
                    }

                    this._barPoints.push(points);
                    // now draw the shadows if not stacked.
                    // for stacked plots, they are predrawn by drawShadow
                    if (shadow && !this._stack) {
                        var sopts = $.extend(true, {}, opts);
                        delete sopts.fillStyle;
                        this.renderer.shadowRenderer.draw(ctx, points, sopts);
                    }
                    var clr = opts.fillStyle || this.color;
                    this._dataColors.push(clr);
                    gradcolor = clr;
                    if(gradcolor)
                    {
                        var gradref = $.jqplot.GradientRenderer(gradcolor,ctx,points,this.barDirection, this.index);
                        if(gradref)
                        {
                            opts.fillStyle = gradref;
                        }
                    }
                    this.renderer.shapeRenderer.draw(ctx, points, opts); 
                    
                    if (!this.fillToZero || this._plotData[i][0] >= 0) 
                    {

                    	if(this.borderColor)
                    		{
	                    		var topts = $.extend(true, {strokeStyle: this.borderColor,strokeRect:true}, opts);                    
	                            var point1 = 0,point2 = 0,point3 = 0,point4 = 0,hpoint1 = 0,hpoint2 = 0;
	                            hpoint1 = Math.round(points[0][0]);
	                            hpoint2 = Math.round(points[0][1]);
	                            point1 = Math.round(points[1][0]);
	                            point2 = Math.round(points[1][1]);
	                            point3 = Math.round(points[2][0]);
	                            point4 = Math.round(points[2][1]);
	                            var dist1 = point3 - point1;
	                            var dist2 = point2 - point4;
	                            var bwidth = Math.round(Math.sqrt((dist1*dist1)+(dist2*dist2)));
	                            var hdist1 = point1 - hpoint1;
	                            var hdist2 = point2 - hpoint2;
	                            var hheight = Math.round(Math.sqrt((hdist1*hdist1)+(hdist2*hdist2)));
	                            this.renderer.shapeRenderer.draw(ctx, [hpoint1,point4,bwidth,hheight], topts); 
                    		}
                    }
                    else
                    {
                    }
                }
            }
        }                
        
        if (this.highlightColors.length == 0) {
            this.highlightColors = $.jqplot.computeHighlightColors(this._dataColors);
        }
        
        else if (typeof(this.highlightColors) == 'string') {
            var temp = this.highlightColors;
            this.highlightColors = [];
            for (var i=0; i<this._dataColors.length; i++) {
                this.highlightColors.push(temp);
            }
        }
        
    };
    
     
    // for stacked plots, shadows will be pre drawn by drawShadow.
    $.jqplot.BarRenderer.prototype.drawShadow = function(ctx, gridData, options) {
        var i;
        var opts = (options != undefined) ? options : {};
        var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;
        var showLine = (opts.showLine != undefined) ? opts.showLine : this.showLine;
        var fill = (opts.fill != undefined) ? opts.fill : this.fill;
        var xaxis = this.xaxis;
        var yaxis = this.yaxis;
        var xp = this._xaxis.series_u2p;
        var yp = this._yaxis.series_u2p;
        var pointx, points, pointy, nvals, nseries, pos;
        
        if (this._stack && this.shadow) {
            if (this.barWidth == null) {
                this.renderer.setBarWidth.call(this);
            }
        
            var temp = this._plotSeriesInfo = this.renderer.calcSeriesNumbers.call(this);
            nvals = temp[0];
            nseries = temp[1];
            pos = temp[2];
        
            if (this._stack) {
                this._barNudge = 0;
            }
            else {
                this._barNudge = (-Math.abs(nseries/2 - 0.5) + pos) * (this.barWidth + this.barPadding);
            }
            if (showLine) {
            
                if (this.barDirection == 'vertical') {
                    for (var i=0; i<gridData.length; i++) {
                    if(this.data.length<gridData.length)
                    {
                        this.data.push([0,0]);
                        this._prevGridData.push([0,0]);
                    }
                    else if(this.data.length>gridData.length)
                    {
                        this.data.splice(gridData.length, this.data.length);
                        this._prevGridData.splice(gridData.length, this.data.length);
                    }
                        if (this.data[i][1] == null) {
                            continue;
                        }
                        points = [];
                        var base = gridData[i][0] + this._barNudge;
                        var ystart;
                    
                        if (this._stack && this._prevGridData.length && this._prevGridData[i])
                        {
                            ystart = this._prevGridData[i][1];
                        }
                        else {
                            if (this.fillToZero) {
                                ystart = this._yaxis.series_u2p(0);
                            }
                            else {
                                ystart = ctx.canvas.height;
                            }
                        }
                    
                        points.push([base-this.barWidth/2, ystart]);
                        points.push([base-this.barWidth/2, gridData[i][1]]);
                        points.push([base+this.barWidth/2, gridData[i][1]]);
                        points.push([base+this.barWidth/2, ystart]);
                        this.renderer.shadowRenderer.draw(ctx, points, opts);
                    }
                }
            
                else if (this.barDirection == 'horizontal'){
                }
            }   
            
        }
    };
    
    function postInit(target, data, options) {
        for (var i=0; i<this.series.length; i++) {
            if (this.series[i].renderer.constructor == $.jqplot.BarRenderer) {
                // don't allow mouseover and mousedown at same time.
                if (this.series[i].highlightMouseOver) {
                    this.series[i].highlightMouseDown = false;
                }
            }
        }
    }
    
    // called within context of plot
    // create a canvas which we can draw on.
    // insert it before the eventCanvas, so eventCanvas will still capture events.
    function postPlotDraw() {
        // Memory Leaks patch    
        if (this.plugins.barRenderer && this.plugins.barRenderer.highlightCanvas) {

            this.plugins.barRenderer.highlightCanvas.resetCanvas();
            this.plugins.barRenderer.highlightCanvas = null;
        }
         
        this.plugins.barRenderer = {highlightedSeriesIndex:null};
        this.plugins.barRenderer.highlightCanvas = new $.jqplot.GenericCanvas();
        
        this.eventCanvas._elem.before(this.plugins.barRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-barRenderer-highlight-canvas', this._plotDimensions, this));
        this.plugins.barRenderer.highlightCanvas.setContext();
        this.eventCanvas._elem.bind('mouseleave', {plot:this}, function (ev) { unhighlight(ev.data.plot); });
    }   
    
    function highlight (plot, sidx, pidx, points) {
        var s = plot.series[sidx];
        var canvas = plot.plugins.barRenderer.highlightCanvas;
        canvas._ctx.clearRect(0,0,canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        s._highlightedPoint = pidx;
        plot.plugins.barRenderer.highlightedSeriesIndex = sidx;
        var opts = {fillStyle: s.highlightColors[pidx]};
        s.renderer.shapeRenderer.draw(canvas._ctx, points, opts);
        canvas = null;
    }
    
    function unhighlight (plot) {
        var allnull = true;
        for (var i=0; i<plot.series.length; i++) {
            allnull = allnull && plot.series[i]._highlightedPoint == null;
        }
        if (allnull)
        {
            return;
        }
        var canvas = plot.plugins.barRenderer.highlightCanvas;
        canvas._ctx.clearRect(0,0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        for (var i=0; i<plot.series.length; i++) {
            plot.series[i]._highlightedPoint = null;
        }
        plot.plugins.barRenderer.highlightedSeriesIndex = null;
        plot.target.trigger('jqplotDataUnhighlight');
        canvas =  null;
    }
    
    
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var evt1 = jQuery.Event('jqplotDataMouseOver');
            evt1.pageX = ev.pageX;
            evt1.pageY = ev.pageY;
            plot.target.trigger(evt1, ins);
            if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.barRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event('jqplotDataHighlight');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                plot.target.trigger(evt, ins);
                highlight (plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
    }
    
    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            if (plot.series[ins[0]].highlightMouseDown && !(ins[0] == plot.plugins.barRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event('jqplotDataHighlight');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                plot.target.trigger(evt, ins);
                highlight (plot, neighbor.seriesIndex, neighbor.pointIndex, neighbor.points);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
    }
    
    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {
        var idx = plot.plugins.barRenderer.highlightedSeriesIndex;
        if (idx != null && plot.series[idx].highlightMouseDown) {
            unhighlight(plot);
        }
    }
    
    function handleClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var evt = jQuery.Event('jqplotDataClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            plot.target.trigger(evt, ins);
        }
    }
    
    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var idx = plot.plugins.barRenderer.highlightedSeriesIndex;
            if (idx != null && plot.series[idx].highlightMouseDown) {
                unhighlight(plot);
            }
            var evt = jQuery.Event('jqplotDataRightClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            plot.target.trigger(evt, ins);
        }
    }
    
})(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {
    /**
     * Class: $.jqplot.PieRenderer
     * Plugin renderer to draw a pie chart.
     * x values, if present, will be used as slice labels.
     * y values give slice size.
     * 
     * A pie plot will trigger events on the plot target
     * according to user interaction.  All events return the event object,
     * the series index, the point (slice) index, and the point data for 
     * the appropriate slice.
     * 
     * 'jqplotDataMouseOver' - triggered when user mouseing over a slice.
     * 'jqplotDataHighlight' - triggered the first time user mouses over a slice,
     * if highlighting is enabled.
     * 'jqplotDataUnhighlight' - triggered when a user moves the mouse out of
     * a highlighted slice.
     * 'jqplotDataClick' - triggered when the user clicks on a slice.
     * 'jqplotDataRightClick' - tiggered when the user right clicks on a slice if
     * the "captureRightClick" option is set to true on the plot.
     */
    $.jqplot.PieRenderer = function(){
        $.jqplot.LineRenderer.call(this);
    };
    
    $.jqplot.PieRenderer.prototype = new $.jqplot.LineRenderer();
    $.jqplot.PieRenderer.prototype.constructor = $.jqplot.PieRenderer;
    
    // called with scope of a series
    $.jqplot.PieRenderer.prototype.init = function(options, plot) {
        // Group: Properties
        // prop: diameter
        // Outer diameter of the pie, auto computed by default
        this.diameter = null;
        // prop: padding
        // padding between the pie and plot edges, legend, etc.
        this.padding = 20;
        // prop: sliceMargin
        // angular spacing between pie slices in degrees.
        this.sliceMargin = 0;
        // prop: fill
        // true or false, wether to fil the slices.
        this.fill = true;
        // prop: shadowOffset
        // offset of the shadow from the slice and offset of 
        // each succesive stroke of the shadow from the last.
        this.shadowOffset = 2;
        // prop: shadowAlpha
        // transparency of the shadow (0 = transparent, 1 = opaque)
        this.shadowAlpha = 0.07;
        // prop: shadowDepth
        // number of strokes to apply to the shadow, 
        // each stroke offset shadowOffset from the last.
        this.shadowDepth = 5;
        // prop: highlightMouseOver
        // True to highlight slice when moused over.
        // This must be false to enable highlightMouseDown to highlight when clicking on a slice.
        this.highlightMouseOver = true;
        // prop: highlightMouseDown
        // True to highlight when a mouse button is pressed over a slice.
        // This will be disabled if highlightMouseOver is true.
        this.highlightMouseDown = false;
        // prop: highlightColors
        // an array of colors to use when highlighting a slice.
        this.highlightColors = [];
        // prop: dataLabels
        // Either 'label', 'value', 'percent' or an array of labels to place on the pie slices.
        // Defaults to percentage of each pie slice.
        this.dataLabels = 'percent';
        // prop: showDataLabels
        // true to show data labels on slices.
        this.showDataLabels = false;
        // prop: dataLabelFormatString
        // Format string for data labels.  If none, '%s' is used for "label" and for arrays, '%d' for value and '%d%%' for percentage.
        this.dataLabelFormatString = null;
        // prop: dataLabelThreshold
        // Threshhold in percentage (0-100) of pie area, below which no label will be displayed.
        // This applies to all label types, not just to percentage labels.
        this.dataLabelThreshold = 3;
        // prop: dataLabelPositionFactor
        // A Multiplier (0-1) of the pie radius which controls position of label on slice.
        // Increasing will slide label toward edge of pie, decreasing will slide label toward center of pie.
        this.dataLabelPositionFactor = 0.52;
        // prop: dataLabelNudge
        // Number of pixels to slide the label away from (+) or toward (-) the center of the pie.
        this.dataLabelNudge = 2;
        // prop: dataLabelCenterOn
        // True to center the data label at its position.
        // False to set the inside facing edge of the label at its position.
        this.dataLabelCenterOn = true;
        // prop: startAngle
        // Angle to start drawing pie in degrees.  
        // According to orientation of canvas coordinate system:
        // 0 = on the positive x axis
        // -90 = on the positive y axis.
        // 90 = on the negaive y axis.
        // 180 or - 180 = on the negative x axis.
        this.startAngle = 0;
        this.tickRenderer = $.jqplot.PieTickRenderer;
        // Used as check for conditions where pie shouldn't be drawn.
        this._drawData = true;
        this._type = 'pie';
        
        // if user has passed in highlightMouseDown option and not set highlightMouseOver, disable highlightMouseOver
        if (options.highlightMouseDown && options.highlightMouseOver == null) {
            options.highlightMouseOver = false;
        }
        
        $.extend(true, this, options);

        if (this.sliceMargin < 0) {
            this.sliceMargin = 0;
        }

        this._diameter = null;
        this._radius = null;
        // array of [start,end] angles arrays, one for each slice.  In radians.
        this._sliceAngles = [];
        // index of the currenty highlighted point, if any
        this._highlightedPoint = null;
        
        // set highlight colors if none provided
        if (this.highlightColors.length == 0) {
            for (var i=0; i<this.seriesColors.length; i++){
                var rgba = $.jqplot.getColorComponents(this.seriesColors[i]);
                var newrgb = [rgba[0], rgba[1], rgba[2]];
                var sum = newrgb[0] + newrgb[1] + newrgb[2];
                for (var j=0; j<3; j++) {
                    // when darkening, lowest color component can be is 60.
                    newrgb[j] = (sum > 570) ?  newrgb[j] * 0.8 : newrgb[j] + 0.3 * (255 - newrgb[j]);
                    newrgb[j] = parseInt(newrgb[j], 10);
                }
                this.highlightColors.push('rgb('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+')');
            }
        }
        
        this.highlightColorGenerator = new $.jqplot.ColorGenerator(this.highlightColors);
        
        plot.postParseOptionsHooks.addOnce(postParseOptions);
        plot.postInitHooks.addOnce(postInit);
        plot.eventListenerHooks.addOnce('jqplotMouseMove', handleMove);
        plot.eventListenerHooks.addOnce('jqplotMouseDown', handleMouseDown);
        plot.eventListenerHooks.addOnce('jqplotMouseUp', handleMouseUp);
        plot.eventListenerHooks.addOnce('jqplotClick', handleClick);
        plot.eventListenerHooks.addOnce('jqplotRightClick', handleRightClick);
        plot.postDrawHooks.addOnce(postPlotDraw);
    };
    
    $.jqplot.PieRenderer.prototype.setGridData = function(plot) {
        // set gridData property.  This will hold angle in radians of each data point.
        var stack = [];
        var td = [];
        var sa = this.startAngle/180*Math.PI;
        var tot = 0;
        // don't know if we have any valid data yet, so set plot to not draw.
        this._drawData = false;
        for (var i=0; i<this.data.length; i++){
            if (this.data[i][1] != 0) {
                // we have data, O.K. to draw.
                this._drawData = true;
            }
            stack.push(this.data[i][1]);
            td.push([this.data[i][0]]);
            if (i>0) {
                stack[i] += stack[i-1];
            }
            tot += this.data[i][1];
        }
        var fact = Math.PI*2/stack[stack.length - 1];
        
        for (var i=0; i<stack.length; i++) {
            td[i][1] = stack[i] * fact;
            td[i][2] = this.data[i][1]/tot;
        }
        this.gridData = td;
    };
    
    $.jqplot.PieRenderer.prototype.makeGridData = function(data, plot) {
        var stack = [];
        var td = [];
        var tot = 0;
        var sa = this.startAngle/180*Math.PI;
        // don't know if we have any valid data yet, so set plot to not draw.
        this._drawData = false;
        for (var i=0; i<data.length; i++){
            if (this.data[i][1] != 0) {
                // we have data, O.K. to draw.
                this._drawData = true;
            }
            stack.push(data[i][1]);
            td.push([data[i][0]]);
            if (i>0) {
                stack[i] += stack[i-1];
            }
            tot += data[i][1];
        }
        var fact = Math.PI*2/stack[stack.length - 1];
        
        for (var i=0; i<stack.length; i++) {
            td[i][1] = stack[i] * fact;
            td[i][2] = data[i][1]/tot;
        }
        return td;
    };

    function calcRadiusAdjustment(ang) {
        return Math.sin((ang - (ang-Math.PI) / 8 / Math.PI )/2.0);
    }

    function calcRPrime(ang1, ang2, sliceMargin, fill, lineWidth) {
        var rprime = 0;
        var ang = ang2 - ang1;
        var absang = Math.abs(ang);
        var sm = sliceMargin;
        if (fill == false) {
            sm += lineWidth;
        }

        if (sm > 0 && absang > 0.01 && absang < 6.282) {
            rprime = parseFloat(sm) / 2.0 / calcRadiusAdjustment(ang);
        }

        return rprime;
    }
    
    $.jqplot.PieRenderer.prototype.drawSlice = function (ctx, ang1, ang2, color, isShadow) {
        if (this._drawData) {
            var r = this._radius;
            var fill = this.fill;
            var lineWidth = this.lineWidth;
            var sm = this.sliceMargin;
            if (this.fill == false) {
                sm += this.lineWidth;
            }
            ctx.save();
            ctx.translate(this._center[0], this._center[1]);
            
            var rprime = calcRPrime(ang1, ang2, this.sliceMargin, this.fill, this.lineWidth);

            var transx = rprime * Math.cos((ang1 + ang2) / 2.0);
            var transy = rprime * Math.sin((ang1 + ang2) / 2.0);

            if ((ang2 - ang1) <= Math.PI) {
                r -= rprime;  
            }
            else {
                r += rprime;
            }

            ctx.translate(transx, transy);
            
            if (isShadow) {
                for (var i=0, l=this.shadowDepth; i<l; i++) {
                    ctx.save();
                    ctx.translate(this.shadowOffset*Math.cos(this.shadowAngle/180*Math.PI), this.shadowOffset*Math.sin(this.shadowAngle/180*Math.PI));
                    doDraw(r);
                }
                for (var i=0, l=this.shadowDepth; i<l; i++) {
                    ctx.restore();
                }
            }
    
            else {
                doDraw(r);
            }
            ctx.restore();
        }
    
        function doDraw (rad) {
            // Fix for IE and Chrome that can't seem to draw circles correctly.
            // ang2 should always be <= 2 pi since that is the way the data is converted.
             if (ang2 > 6.282 + this.startAngle) {
                ang2 = 6.282 + this.startAngle;
                if (ang1 > ang2) {
                    ang1 = 6.281 + this.startAngle;
                }
            }
            // Fix for IE, where it can't seem to handle 0 degree angles.  Also avoids
            // ugly line on unfilled pies.
            if (ang1 >= ang2) {
                return;
            }            
        
            ctx.beginPath();  
            ctx.fillStyle = color;
            ctx.strokeStyle = color;
            ctx.lineWidth = lineWidth;
            ctx.arc(0, 0, rad, ang1, ang2, false);
            ctx.lineTo(0,0);
            ctx.closePath();
        
            if (fill) {
                ctx.fill();
            }
            else {
                ctx.stroke();
            }
        }
    };
    
    // called with scope of series
    $.jqplot.PieRenderer.prototype.draw = function (ctx, gd, options, plot) {
        var i;
        var opts = (options != undefined) ? options : {};
        // offset and direction of offset due to legend placement
        var offx = 0;
        var offy = 0;
        var trans = 1;
        var colorGenerator = new $.jqplot.ColorGenerator(this.seriesColors);
        if (options.legendInfo && options.legendInfo.placement == 'insideGrid') {
            var li = options.legendInfo;
            switch (li.location) {
                case 'nw':
                    offx = li.width + li.xoffset;
                    break;
                case 'w':
                    offx = li.width + li.xoffset;
                    break;
                case 'sw':
                    offx = li.width + li.xoffset;
                    break;
                case 'ne':
                    offx = li.width + li.xoffset;
                    trans = -1;
                    break;
                case 'e':
                    offx = li.width + li.xoffset;
                    trans = -1;
                    break;
                case 'se':
                    offx = li.width + li.xoffset;
                    trans = -1;
                    break;
                case 'n':
                    offy = li.height + li.yoffset;
                    break;
                case 's':
                    offy = li.height + li.yoffset;
                    trans = -1;
                    break;
                default:
                    break;
            }
        }
        
        var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;
        var fill = (opts.fill != undefined) ? opts.fill : this.fill;
        var cw = ctx.canvas.width;
        var ch = ctx.canvas.height;
        var w = cw - offx - 2 * this.padding;
        var h = ch - offy - 2 * this.padding;
        var mindim = Math.min(w,h);
        var d = mindim;
        
        // Fixes issue #272.  Thanks hugwijst!
        // reset slice angles array.
        this._sliceAngles = [];

        var sm = this.sliceMargin;
        if (this.fill == false) {
            sm += this.lineWidth;
        }
        
        var rprime;
        var maxrprime = 0;

        var ang, ang1, ang2, shadowColor;
        var sa = this.startAngle / 180 * Math.PI;

        // have to pre-draw shadows, so loop throgh here and calculate some values also.
        for (var i=0, l=gd.length; i<l; i++) {
            ang1 = (i == 0) ? sa : gd[i-1][1] + sa;
            ang2 = gd[i][1] + sa;

            this._sliceAngles.push([ang1, ang2]);

            rprime = calcRPrime(ang1, ang2, this.sliceMargin, this.fill, this.lineWidth);

            if (Math.abs(ang2-ang1) > Math.PI) {
                maxrprime = Math.max(rprime, maxrprime);  
            }
        }

        if (this.diameter != null && this.diameter > 0) {
            this._diameter = this.diameter - 2*maxrprime;
        }
        else {
            this._diameter = d - 2*maxrprime;
        }

        // Need to check for undersized pie.  This can happen if
        // plot area too small and legend is too big.
        if (this._diameter < 6) {
            $.jqplot.log('Diameter of pie too small, not rendering.');
            return;
        }

        var r = this._radius = this._diameter/2;

        this._center = [(cw - trans * offx)/2 + trans * offx + maxrprime * Math.cos(sa), (ch - trans*offy)/2 + trans * offy + maxrprime * Math.sin(sa)];

        if (this.shadow) {
            for (var i=0, l=gd.length; i<l; i++) {
                shadowColor = 'rgba(0,0,0,'+this.shadowAlpha+')';
                this.renderer.drawSlice.call (this, ctx, this._sliceAngles[i][0], this._sliceAngles[i][1], shadowColor, true);
            }
        }
        
        plot.tipLocation = [];
        
        for (var i=0; i<gd.length; i++) {
                      
            this.renderer.drawSlice.call (this, ctx, this._sliceAngles[i][0], this._sliceAngles[i][1], colorGenerator.next(), false);
        
                var fstr, avgang = (this._sliceAngles[i][0] + this._sliceAngles[i][1])/2, label;
            
                if (this.dataLabels == 'label') {
                    fstr = this.dataLabelFormatString || '%s';
                    label = $.jqplot.sprintf(fstr, gd[i][0]);
                }
                else if (this.dataLabels == 'value') {
                    fstr = this.dataLabelFormatString || '%d';
                    label = $.jqplot.sprintf(fstr, this.data[i][1]);
                }
                else if (this.dataLabels == 'percent') {
                    fstr = this.dataLabelFormatString || '%d%%';
                    label = $.jqplot.sprintf(fstr, gd[i][2]*100);
                }
                else if (this.dataLabels.constructor == Array) {
                    fstr = this.dataLabelFormatString || '%s';
                    label = $.jqplot.sprintf(fstr, this.dataLabels[i]);
                }
            
                var fact = (this._radius ) * this.dataLabelPositionFactor + this.sliceMargin + this.dataLabelNudge;
            
                var x = this._center[0] + Math.cos(avgang) * fact + this.canvas._offsets.left;
                var y = this._center[1] + Math.sin(avgang) * fact + this.canvas._offsets.top;
            
                if (this.showDataLabels && gd[i][2]*100 >= this.dataLabelThreshold){
	                var labelelem = $('<div class="jqplot-pie-series jqplot-data-label" style="position:absolute;">' + label + '</div>').insertBefore(plot.eventCanvas._elem);
	                if (this.dataLabelCenterOn) {
	                    x -= labelelem.width()/2;
	                    y -= labelelem.height()/2;
	                }
	                else {
	                    x -= labelelem.width() * Math.sin(avgang/2);
	                    y -= labelelem.height()/2;
	                }
	                x = Math.round(x);
	                y = Math.round(y);
	                labelelem.css({left: x, top: y});
                }
                plot.tipLocation.push({left: x, top: y});
        }            
    };
    
    
    $.jqplot.PieAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
    };
    
    $.jqplot.PieAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();
    $.jqplot.PieAxisRenderer.prototype.constructor = $.jqplot.PieAxisRenderer;
        
    
    // There are no traditional axes on a pie chart.  We just need to provide
    // dummy objects with properties so the plot will render.
    // called with scope of axis object.
    $.jqplot.PieAxisRenderer.prototype.init = function(options){
        
        this.tickRenderer = $.jqplot.PieTickRenderer;
        $.extend(true, this, options);
        // for convienence set _dataBounds to 0 and 100 and
        // set min/max to 0 and 100.
        this._dataBounds = {min:0, max:100};
        this.min = 0;
        this.max = 100;
        this.showTicks = false;
        this.ticks = [];
        this.showMark = false;
        this.show = false; 
    };
    
    
    
    
    $.jqplot.PieLegendRenderer = function(){
        $.jqplot.TableLegendRenderer.call(this);
    };
    
    $.jqplot.PieLegendRenderer.prototype = new $.jqplot.TableLegendRenderer();
    $.jqplot.PieLegendRenderer.prototype.constructor = $.jqplot.PieLegendRenderer;
    
    /**
     * Class: $.jqplot.PieLegendRenderer
     * Legend Renderer specific to pie plots.  Set by default
     * when user creates a pie plot.
     */
    $.jqplot.PieLegendRenderer.prototype.init = function(options) {
        // Group: Properties
        //
        // prop: numberRows
        // Maximum number of rows in the legend.  0 or null for unlimited.
        this.numberRows = null;
        // prop: numberColumns
        // Maximum number of columns in the legend.  0 or null for unlimited.
        this.numberColumns = null;
        $.extend(true, this, options);
    };
    
    // called with context of legend
    $.jqplot.PieLegendRenderer.prototype.draw = function() {
        var legend = this;
        if (this.show) {
            var series = this._series;


            this._elem = $(document.createElement('table'));
            this._elem.addClass('jqplot-table-legend');

            var ss = {position:'absolute'};
            if (this.background) {
                ss['background'] = this.background;
            }
            if (this.border) {
                ss['border'] = this.border;
            }
            if (this.fontSize) {
                ss['fontSize'] = this.fontSize;
            }
            if (this.fontFamily) {
                ss['fontFamily'] = this.fontFamily;
            }
            if (this.textColor) {
                ss['textColor'] = this.textColor;
            }
            if (this.marginTop != null) {
                ss['marginTop'] = this.marginTop;
            }
            if (this.marginBottom != null) {
                ss['marginBottom'] = this.marginBottom;
            }
            if (this.marginLeft != null) {
                ss['marginLeft'] = this.marginLeft;
            }
            if (this.marginRight != null) {
                ss['marginRight'] = this.marginRight;
            }

            this._elem.css(ss);

            // Pie charts legends don't go by number of series, but by number of data points
            // in the series.  Refactor things here for that.
            
            var pad = false, 
                reverse = false,
                nr, 
                nc;
            var s = series[0];
            var colorGenerator = new $.jqplot.ColorGenerator(s.seriesColors);
            
            if (s.show) {
                var pd = s.data;
                if (this.numberRows) {
                    nr = this.numberRows;
                    if (!this.numberColumns){
                        nc = Math.ceil(pd.length/nr);
                    }
                    else{
                        nc = this.numberColumns;
                    }
                }
                else if (this.numberColumns) {
                    nc = this.numberColumns;
                    nr = Math.ceil(pd.length/this.numberColumns);
                }
                else {
                    nr = pd.length;
                    nc = 1;
                }
                
                var i, j;
                var tr, td1, td2; 
                var lt, rs, color;
                var idx = 0; 
                var div0, div1;   
                
                for (i=0; i<nr; i++) {
                    tr = $(document.createElement('tr'));
                    tr.addClass('jqplot-table-legend');
                    
                    if (reverse){
                        tr.prependTo(this._elem);
                    }
                    
                    else{
                        tr.appendTo(this._elem);
                    }
                    
                    for (j=0; j<nc; j++) {
                        if (idx < pd.length){
                            lt = this.labels[idx] || pd[idx][0].toString();
                            color = colorGenerator.next();
                            if (!reverse){
                                if (i>0){
                                    pad = true;
                                }
                                else{
                                    pad = false;
                                }
                            }
                            else{
                                if (i == nr -1){
                                    pad = false;
                                }
                                else{
                                    pad = true;
                                }
                            }
                            rs = (pad) ? this.rowSpacing : '0';



                            td1 = $(document.createElement('td'));
                            td1.addClass('jqplot-table-legend jqplot-table-legend-swatch');
                            td1.css({textAlign: 'center', paddingTop: rs});

                            div0 = $(document.createElement('div'));
                            div0.addClass('jqplot-table-legend-swatch-outline');
                            div1 = $(document.createElement('div'));
                            div1.addClass('jqplot-table-legend-swatch');
                            div1.css({backgroundColor: color, borderColor: color});
                            td1.append(div0.append(div1));

                            td2 = $(document.createElement('td'));
                            td2.addClass('jqplot-table-legend jqplot-table-legend-label');
                            td2.css('paddingTop', rs);

                            if (this.escapeHtml){
                                td2.text(lt);
                            }
                            else {
                                td2.html(lt);
                            }
                            if (reverse) {
                                td2.prependTo(tr);
                                td1.prependTo(tr);
                            }
                            else {
                                td1.appendTo(tr);
                                td2.appendTo(tr);
                            }
                            pad = true;
                        }
                        idx++;
                    }   
                }
            }
        }
        return this._elem;                
    };
    
    $.jqplot.PieRenderer.prototype.handleMove = function(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            plot.target.trigger('jqplotDataMouseOver', ins);
            if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {
                plot.target.trigger('jqplotDataHighlight', ins);
                highlight (plot, ins[0], ins[1]);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
    };
    
    
    
    // setup default renderers for axes and legend so user doesn't have to
    // called with scope of plot
    function preInit(target, data, options) {
        options = options || {};
        options.axesDefaults = options.axesDefaults || {};
        options.legend = options.legend || {};
        options.seriesDefaults = options.seriesDefaults || {};
        // only set these if there is a pie series
        var setopts = false;
        if (options.seriesDefaults.renderer == $.jqplot.PieRenderer) {
            setopts = true;
        }
        else if (options.series) {
            for (var i=0; i < options.series.length; i++) {
                if (options.series[i].renderer == $.jqplot.PieRenderer) {
                    setopts = true;
                }
            }
        }
        
        if (setopts) {
            options.axesDefaults.renderer = $.jqplot.PieAxisRenderer;
            options.legend.renderer = $.jqplot.PieLegendRenderer;
            options.legend.preDraw = true;
            options.seriesDefaults.pointLabels = {show: false};
        }
    }
    
    function postInit(target, data, options) {
        for (var i=0; i<this.series.length; i++) {
            if (this.series[i].renderer.constructor == $.jqplot.PieRenderer) {
                // don't allow mouseover and mousedown at same time.
                if (this.series[i].highlightMouseOver) {
                    this.series[i].highlightMouseDown = false;
                }
            }
        }
    }
    
    // called with scope of plot
    function postParseOptions(options) {
        for (var i=0; i<this.series.length; i++) {
            this.series[i].seriesColors = this.seriesColors;
            this.series[i].colorGenerator = $.jqplot.colorGenerator;
        }
    }
    
    function highlight (plot, sidx, pidx) {
        var s = plot.series[sidx];
        var canvas = plot.plugins.pieRenderer.highlightCanvas;
        canvas._ctx.clearRect(0,0,canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        s._highlightedPoint = pidx;
        plot.plugins.pieRenderer.highlightedSeriesIndex = sidx;
        s.renderer.drawSlice.call(s, canvas._ctx, s._sliceAngles[pidx][0], s._sliceAngles[pidx][1], s.highlightColorGenerator.get(pidx), false);
    }
    
    function unhighlight (plot) {
        var canvas = plot.plugins.pieRenderer.highlightCanvas;
        canvas._ctx.clearRect(0,0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        for (var i=0; i<plot.series.length; i++) {
            plot.series[i]._highlightedPoint = null;
        }
        plot.plugins.pieRenderer.highlightedSeriesIndex = null;
        plot.target.trigger('jqplotDataUnhighlight');
    }
 
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var evt1 = jQuery.Event('jqplotDataMouseOver');
            evt1.pageX = ev.pageX;
            evt1.pageY = ev.pageY;
            plot.target.trigger(evt1, ins);
            if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event('jqplotDataHighlight');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                plot.target.trigger(evt, ins);
                highlight (plot, ins[0], ins[1]);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
    } 
    
    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            if (plot.series[ins[0]].highlightMouseDown && !(ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event('jqplotDataHighlight');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                plot.target.trigger(evt, ins);
                highlight (plot, ins[0], ins[1]);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
    }
    
    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {
        var idx = plot.plugins.pieRenderer.highlightedSeriesIndex;
        if (idx != null && plot.series[idx].highlightMouseDown) {
            unhighlight(plot);
        }
    }
    
    function handleClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var evt = jQuery.Event('jqplotDataClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            plot.target.trigger(evt, ins);
        }
    }
    
    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var idx = plot.plugins.pieRenderer.highlightedSeriesIndex;
            if (idx != null && plot.series[idx].highlightMouseDown) {
                unhighlight(plot);
            }
            var evt = jQuery.Event('jqplotDataRightClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            plot.target.trigger(evt, ins);
        }
    }    
    
    // called within context of plot
    // create a canvas which we can draw on.
    // insert it before the eventCanvas, so eventCanvas will still capture events.
    function postPlotDraw() {
        // Memory Leaks patch    
        if (this.plugins.pieRenderer && this.plugins.pieRenderer.highlightCanvas) {
            this.plugins.pieRenderer.highlightCanvas.resetCanvas();
            tiny.garbageCollect(this.plugins.pieRenderer.highlightCanvas._elem, true);
            this.plugins.pieRenderer.highlightCanvas = null;
        }

        this.plugins.pieRenderer = {highlightedSeriesIndex:null};
        this.plugins.pieRenderer.highlightCanvas = new $.jqplot.GenericCanvas();
        
        // do we have any data labels?  if so, put highlight canvas before those
        var labels = $(this.targetId+' .jqplot-data-label');
        if (labels.length) {
            $(labels[0]).before(this.plugins.pieRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-pieRenderer-highlight-canvas', this._plotDimensions, this));
        }
        // else put highlight canvas before event canvas.
        else {
            this.eventCanvas._elem.before(this.plugins.pieRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-pieRenderer-highlight-canvas', this._plotDimensions, this));
        }
        
        var hctx = this.plugins.pieRenderer.highlightCanvas.setContext();
        this.eventCanvas._elem.bind('mouseleave', {plot:this}, function (ev) { unhighlight(ev.data.plot); });
    }
    
    $.jqplot.preInitHooks.push(preInit);
    
    $.jqplot.PieTickRenderer = function() {
        $.jqplot.AxisTickRenderer.call(this);
    };
    
    $.jqplot.PieTickRenderer.prototype = new $.jqplot.AxisTickRenderer();
    $.jqplot.PieTickRenderer.prototype.constructor = $.jqplot.PieTickRenderer;
    
})(jQuery);

    
    /**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 * Version: 1.0.0b2_r1012
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {
    
    /**
     * Class: $.jqplot.PointLabels
     * Plugin for putting labels at the data points.
     * 
     * By default, html entities (<, >, etc.) are escaped in point labels.  
     * If you want to include actual html markup in the labels, 
     * set the "escapeHTML" option to false.
     * 
     */
    $.jqplot.PointLabels = function(options) {
        // Group: Properties
        //
        // prop: show
        // show the labels or not.
        this.show = $.jqplot.config.enablePlugins;
        // prop: location
        // compass location where to position the label around the point.
        // 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'
        this.location = 'n';
        // prop: labelsFromSeries
        // true to use labels within data point arrays.
        this.labelsFromSeries = false;
        // prop: seriesLabelIndex
        // array index for location of labels within data point arrays.
        // if null, will use the last element of the data point array.
        this.seriesLabelIndex = null;
        // prop: labels
        // array of arrays of labels, one array for each series.
        this.labels = [];
        // actual labels that will get displayed.
        // needed to preserve user specified labels in labels array.
        this._labels = [];
        // prop: stackedValue
        // true to display value as stacked in a stacked plot.
        // no effect if labels is specified.
        this.stackedValue = false;
        // prop: ypadding
        // vertical padding in pixels between point and label
        this.ypadding = 6;
        // prop: xpadding
        // horizontal padding in pixels between point and label
        this.xpadding = 6;
        // prop: escapeHTML
        // true to escape html entities in the labels.
        // If you want to include markup in the labels, set to false.
        this.escapeHTML = true;
        // prop: edgeTolerance
        // Number of pixels that the label must be away from an axis
        // boundary in order to be drawn.  Negative values will allow overlap
        // with the grid boundaries.
        this.edgeTolerance = -5;
        // prop: formatter
        // A class of a formatter for the tick text.  sprintf by default.
        this.formatter = $.jqplot.DefaultTickFormatter;
        // prop: formatString
        // string passed to the formatter.
        this.formatString = '';
        // prop: hideZeros
        // true to not show a label for a value which is 0.
        this.hideZeros = false;
        this._elems = [];
        
        $.extend(true, this, options);
    };
    
    var locations = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];
    var locationIndicies = {'nw':0, 'n':1, 'ne':2, 'e':3, 'se':4, 's':5, 'sw':6, 'w':7};
    var oppositeLocations = ['se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];
    
    // called with scope of a series
    $.jqplot.PointLabels.init = function (target, data, seriesDefaults, opts, plot){
        var options = $.extend(true, {}, seriesDefaults, opts);
        options.pointLabels = options.pointLabels || {};
        if (this.renderer.constructor === $.jqplot.BarRenderer && this.barDirection === 'horizontal' && !options.pointLabels.location) {
            options.pointLabels.location = 'e';
        }
        // add a pointLabels attribute to the series plugins
        this.plugins.pointLabels = new $.jqplot.PointLabels(options.pointLabels);
        this.plugins.pointLabels.setLabels.call(this,plot);
    };

      $.jqplot.PointLabels.prototype.destroy = function()
      {
        for (var i=0; i<this._elems.length; i++) {
            // Memory Leaks patch
            tiny.garbageCollect(this._elems[i], true);
            this._elems[i] = null;
        }
        this._elems.splice(0,this._elems.length);
      }
    // called with scope of series
    $.jqplot.PointLabels.prototype.setLabels = function() {   
        var p = this.plugins.pointLabels; 
        var labelIdx;
        if (p.seriesLabelIndex != null) {
            labelIdx = p.seriesLabelIndex;
        }
        else if (this.renderer.constructor === $.jqplot.BarRenderer && this.barDirection === 'horizontal') {
            labelIdx = 0;
        }
        else {
            labelIdx = (this._plotData.length === 0) ? 0 : this._plotData[0].length -1;
        }
        p._labels = [];
        if (p.labels.length === 0 || p.labelsFromSeries) {    
            if (p.stackedValue) {
                if (this._plotData.length && this._plotData[0].length){
                    for (var i=0; i<this._plotData.length; i++) {
                        p._labels.push(this._plotData[i][labelIdx]);
                    }
                }
            }
            else {
                var d = this._plotData;
                if (this.renderer.constructor === $.jqplot.BarRenderer && this.waterfall) {
                    d = this._data;
                }
                if (d.length && d[0].length) {
                    for (var i=0; i<d.length; i++) {
                        p._labels.push(d[i][labelIdx]);
                    }
                }
                d = null;
            }
        }
        else if (p.labels.length){
            p._labels = p.labels;
        }
    };
    
    $.jqplot.PointLabels.prototype.xOffset = function(elem, location, padding) {
        location = location || this.location;
        padding = padding || this.xpadding;
        var offset;
        
        switch (location) {
            case 'nw':
                offset = -elem.outerWidth(true) - this.xpadding;
                break;
            case 'n':
                offset = -elem.outerWidth(true)/2;
                break;
            case 'ne':
                offset =  this.xpadding;
                break;
            case 'e':
                offset = this.xpadding;
                break;
            case 'se':
                offset = this.xpadding;
                break;
            case 's':
                offset = -elem.outerWidth(true)/2;
                break;
            case 'sw':
                offset = -elem.outerWidth(true) - this.xpadding;
                break;
            case 'w':
                offset = -elem.outerWidth(true) - this.xpadding;
                break;
            default: // same as 'nw'
                offset = -elem.outerWidth(true) - this.xpadding;
                break;
        }
        return offset; 
    };
    
    $.jqplot.PointLabels.prototype.yOffset = function(elem, location, padding) {
        location = location || this.location;
        padding = padding || this.xpadding;
        var offset;
        
        switch (location) {
            case 'nw':
                offset = -elem.outerHeight(true) - this.ypadding;
                break;
            case 'n':
                offset = -elem.outerHeight(true) - this.ypadding;
                break;
            case 'ne':
                offset = -elem.outerHeight(true) - this.ypadding;
                break;
            case 'e':
                offset = -elem.outerHeight(true)/2;
                break;
            case 'se':
                offset = this.ypadding;
                break;
            case 's':
                offset = this.ypadding;
                break;
            case 'sw':
                offset = this.ypadding;
                break;
            case 'w':
                offset = -elem.outerHeight(true)/2;
                break;
            default: // same as 'nw'
                offset = -elem.outerHeight(true) - this.ypadding;
                break;
        }
        return offset; 
    };
    
    // called with scope of series
    $.jqplot.PointLabels.draw = function (sctx, options, plot) {
        var p = this.plugins.pointLabels;
        var paxisElemChildren = p._elems.length,indx;
        for(indx=0; indx < paxisElemChildren.length; indx++)
        {
           tiny.garbageCollect(paxisElemChildren[indx]);
        }
        // set labels again in case they have changed.
        p.setLabels.call(this,plot);
        // remove any previous labels
        for (var i=0; i<p._elems.length; i++) {
            // Memory Leaks patch
            p._elems[i].emptyForce();
            tiny.garbageCollect(p._elems[i], true);
        }
        p._elems.splice(0, p._elems.length);

        if (p.show && this.show) {
            var ax = '_'+this._stackAxis+'axis';
        
            if (!p.formatString) {
                p.formatString = this[ax]._ticks[0].formatString;
                p.formatter = this[ax]._ticks[0].formatter;
            }
        
            var pd = this._plotData;
            var xax = this._xaxis;
            var yax = this._yaxis;
            var elem, helem;

            for (var i=0, l=p._labels.length; i < l; i++) {
                var label = p._labels[i];
                
                if (p.hideZeros && parseInt(p._labels[i], 10) == 0) {
                    label = '';
                }
                
                if (label != null) {
                    label = p.formatter(p.formatString, label);
                } 

                helem = document.createElement('div');
                p._elems[i] = $(helem);

                elem = p._elems[i];


                elem.addClass('jqplot-point-label jqplot-series-'+this.index+' jqplot-point-'+i);
                elem.css('position', 'absolute');
                elem.insertAfter(sctx.canvas);

                if (p.escapeHTML) {
                    elem.text(label);
                }
                else {
                    elem.html(label);
                }
                var location = p.location;
                if ((this.fillToZero && pd[i][1] < 0) || (this.fillToZero && this._type === 'bar' && this.barDirection === 'horizontal' && pd[i][0] < 0) || (this.waterfall && parseInt(label, 10)) < 0) {
                    location = oppositeLocations[locationIndicies[location]];
                }
                var ell = xax.u2p(pd[i][0]) + p.xOffset(elem, location);
                var elt = yax.u2p(pd[i][1]) + p.yOffset(elem, location);
                if (this.renderer.constructor == $.jqplot.BarRenderer) {
                    if (this.barDirection == "vertical") {
                        ell += this._barNudge;
                    }
                    else {
                        elt -= this._barNudge;
                    }
                }
                elem.css('top', elt);
                var elr = ell + elem.width();
                var elb = elt + elem.height();
                var et = p.edgeTolerance;
                var scl = $(sctx.canvas).position().left;
                var sct = $(sctx.canvas).position().top;
                var scr = sctx.canvas.width + scl;
                var scb = sctx.canvas.height + sct;
                // if label is outside of allowed area, remove it
                if (ell - et < scl)
                { 
                    elem.css('left', scl);
                }
                if( elr + et > scr)
                {
                    elem.css('right', '10px');
                }
                else
                {
                    elem.css('left', ell);
                }
                if( elb + et > scb)
                {
                    elem.css('top', scb);
                }
                if (elt - et < sct)
                {
                    elem.css('top', sct);
                }
                elem = null;
                helem = null;
            }


        }
    };
    
    $.jqplot.postSeriesInitHooks.push($.jqplot.PointLabels.init);
    $.jqplot.postDrawSeriesHooks.push($.jqplot.PointLabels.draw);
})(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {
    $.jqplot.eventListenerHooks.push(['jqplotMouseMove', handleMove]);
    
    /**
     * Class: $.jqplot.Highlighter
     * Plugin which will highlight data points when they are moused over.
     * 
     * To use this plugin, include the js
     * file in your source:
     * 
     */
    $.jqplot.Highlighter = function(options) {
        // Group: Properties
        //
        //prop: show
        // true to show the highlight.
        this.show = $.jqplot.config.enablePlugins;
        // prop: markerRenderer
        // Renderer used to draw the marker of the highlighted point.
        // Renderer will assimilate attributes from the data point being highlighted,
        // so no attributes need set on the renderer directly.
        // Default is to turn off shadow drawing on the highlighted point.
        this.markerRenderer = new $.jqplot.MarkerRenderer({shadow:false});
        // prop: showMarker
        // true to show the marker
        this.showMarker  = true;
        // prop: lineWidthAdjust
        // Pixels to add to the lineWidth of the highlight.
        this.lineWidthAdjust = 2.5;
        // prop: sizeAdjust
        // Pixels to add to the overall size of the highlight.
        this.sizeAdjust = 5;
        // prop: showTooltip
        // Show a tooltip with data point values.
        this.showTooltip = true;
        // prop: tooltipLocation
        // Where to position tooltip, 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'
        this.tooltipLocation = 'n';
        // prop: fadeTooltip
        // true = fade in/out tooltip, flase = show/hide tooltip
        this.fadeTooltip = true;
        // prop: tooltipFadeSpeed
        // 'slow', 'def', 'fast', or number of milliseconds.
        this.tooltipFadeSpeed = 10;
        // prop: tooltipOffset
        // Pixel offset of tooltip from the highlight.
        this.tooltipOffset = 2;
        // prop: tooltipAxes
        // Which axes to display in tooltip, 'x', 'y' or 'both', 'xy' or 'yx'
        // 'both' and 'xy' are equivalent, 'yx' reverses order of labels.
        this.tooltipAxes = 'both';
        // prop; tooltipSeparator
        // String to use to separate x and y axes in tooltip.
        this.tooltipSeparator = '@ ';
        // prop; tooltipContentEditor
        // Function used to edit/augment/replace the formatted tooltip contents.
        // Called as str = tooltipContentEditor(str, seriesIndex, pointIndex)
        // where str is the generated tooltip html and seriesIndex and pointIndex identify
        // the data point being highlighted. Should return the html for the tooltip contents.
        this.tooltipContentEditor = null;
        // prop: useAxesFormatters
        // Use the x and y axes formatters to format the text in the tooltip.
        this.useAxesFormatters = true;
        // prop: tooltipFormatString
        // sprintf format string for the tooltip.
        // Uses Ash Searle's javascript sprintf implementation
        // found here: http://hexmen.com/blog/2007/03/printf-sprintf/
        // See http://perldoc.perl.org/functions/sprintf.html for reference.
        // Additional "p" and "P" format specifiers added by Chris Leonello.
        this.tooltipFormatString = '%.5P';
        // prop: formatString
        // alternative to tooltipFormatString
        // will format the whole tooltip text, populating with x, y values as
        // indicated by tooltipAxes option.  So, you could have a tooltip like:
        // 'Date: %s, number of cats: %d' to format the whole tooltip at one go.
        // If useAxesFormatters is true, values will be formatted according to
        // Axes formatters and you can populate your tooltip string with 
        // %s placeholders.
        this.formatString = null;
        // prop: yvalues
        // Number of y values to expect in the data point array.
        // Typically this is 1.  Certain plots, like OHLC, will
        // have more y values in each data point array.
        this.yvalues = 1;
        // prop: bringSeriesToFront
        // This option requires jQuery 1.4+
        // True to bring the series of the highlighted point to the front
        // of other series.
        this.bringSeriesToFront = false;
        this._tooltipElem;
        this.isHighlighting = false;
        this.currentNeighbor = null;

        $.extend(true, this, options);
    };
    
    var locations = ['nw', 'n', 'ne', 'e', 'se', 's', 'sw', 'w'];
    var locationIndicies = {'nw':0, 'n':1, 'ne':2, 'e':3, 'se':4, 's':5, 'sw':6, 'w':7};
    var oppositeLocations = ['se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'];
    
    
    
    // called with scope of plot
    $.jqplot.Highlighter.init = function (target, data, opts){
        var options = opts || {};
        // add a highlighter attribute to the plot
        this.plugins.highlighter = new $.jqplot.Highlighter(options.highlighter);
        this.plugins.highlighter.fnShowTooltip = fnShowTooltip;
        this.plugins.highlighter.tips = new Tip();
        this.plugins.highlighter.draw = draw;
    };
    
    // called within scope of series
    $.jqplot.Highlighter.parseOptions = function (defaults, options) {
        // Add a showHighlight option to the series 
        // and set it to true by default.
        this.showHighlight = true;
    };
    
    // called within context of plot
    // create a canvas which we can draw on.
    // insert it before the eventCanvas, so eventCanvas will still capture events.
    $.jqplot.Highlighter.postPlotDraw = function() {
        // Memory Leaks patch    
        if (this.plugins.highlighter && this.plugins.highlighter.highlightCanvas) {
            this.plugins.highlighter.highlightCanvas.resetCanvas();
            tiny.garbageCollect(this.plugins.highlighter.highlightCanvas._elem , true);
            this.plugins.highlighter.highlightCanvas = null;
        }

        if (this.plugins.highlighter && this.plugins.highlighter._tooltipElem) {
            tiny.garbageCollect(this.plugins.highlighter._tooltipElem, true);
            this.plugins.highlighter._tooltipElem.emptyForce();
            this.plugins.highlighter._tooltipElem = null;
        }

        this.plugins.highlighter.highlightCanvas = new $.jqplot.GenericCanvas();
        
        this.eventCanvas._elem.before(this.plugins.highlighter.highlightCanvas.createElement(this._gridPadding, 'jqplot-highlight-canvas', this._plotDimensions, this));
        this.plugins.highlighter.highlightCanvas.setContext();

        var elem = document.createElement('div');
        this.plugins.highlighter._tooltipElem = $(elem);
        elem = null;
        this.plugins.highlighter._tooltipElem.addClass('jqplot-highlighter-tooltip');
        this.plugins.highlighter._tooltipElem.addClass('tiny-highlighter-tooltip');
        
        this.plugins.highlighter._tooltipElem.css({position:'absolute', display:'none'});
        
        this.eventCanvas._elem.before(this.plugins.highlighter._tooltipElem);
    };
    
    var checkNearestYPoint = function(series, nrPt, gridpos, serToPt)
    {        
        for(var i = 0; i < series.length ; i++)
        {
            var refSeries = series[i];
            var ptIdx = nrPt.pointIndex;
            if(serToPt && ( serToPt[i] >=0 ))
            {
                ptIdx = serToPt[i];
            }
            var refSeriesGridData = refSeries.gridData[ptIdx];
            if (refSeries.show && refSeries.showHighlight)
            {
                nrPt.seriesData.push(refSeriesGridData);
            }
            else
            {
                continue;
            }
            if(i != nrPt.seriesIndex && refSeriesGridData && refSeriesGridData[0] !== undefined)
            {
                var matchSeries = series[nrPt.seriesIndex];
                var matchSeriesGridData = matchSeries.gridData[nrPt.pointIndex];
                var matchXDiff =  Math.abs ( matchSeriesGridData[0] - gridpos.x);
                var refXDiff =  Math.abs ( refSeriesGridData[0] - gridpos.x);
                if((refXDiff < matchXDiff)  && refSeriesGridData && matchSeriesGridData)
                {
                    {
                        nrPt.seriesIndex = i;
                        nrPt.gridData = refSeriesGridData;
                        nrPt.data = refSeries.data[ptIdx];
                        nrPt.pointIndex = ptIdx;
                    }
                }
                else if((refXDiff == matchXDiff)&& (ptIdx == nrPt.pointIndex) && refSeriesGridData && matchSeriesGridData)
                {
                    var refSrs2EvtDiff = Math.abs ( refSeriesGridData[1] - gridpos.y);
                    var match2EvtDiff =  Math.abs ( matchSeriesGridData[1] - gridpos.y);
                    if(refSrs2EvtDiff < match2EvtDiff)
                    {
                        nrPt.seriesIndex = i;
                        nrPt.gridData = refSeriesGridData;
                        nrPt.data = refSeries.data[ptIdx];
                        nrPt.pointIndex = ptIdx;
                    }
                }
                
            }
        }
	
	
        return nrPt;
    };
    
    function computeSeries(nrPt, tempSerData)
    {
	var validPt  = nrPt;
	for (var k = 0 ;k <=tempSerData.length - 1  ; k++)
	{
		if(nrPt.seriesIndex != tempSerData[k].seriesIndex)
		{
			if (nrPt.gridData[0]== tempSerData[k].gridData[0] && nrPt.gridData[1] == tempSerData[k].gridData[1])
			{
				validPt = tempSerData[k];
				break;
			}
		}
	}
	return validPt;
    }
    
    //Get nearest point accross series data fro Line Charts
    
    $.jqplot.Highlighter.nearestDataPoint = function(gridpos, plot,autotooltip,prevNeibSeriesIndex)
    {
        var series = plot.series,series1 = [];
        var serToPt = {};
            var p1, p2, p, s, x, y, dataLoc,j;
            x = gridpos.x;
            y = gridpos.y;

        
            var prevSeries = -1,prevData = null,seriesData = [],visibleIndex = [],tempSerData = [];
            for (var k = 0; k <=plot.seriesStack.length - 1  ; k++)
            {
                var i = plot.seriesStack[k];
                s = series[i];                 
                if (s && s.show && s.showHighlight && s.data && s.data.length)
                {
                    visibleIndex.push(k);
                }
            }
            for (var k = plot.seriesStack.length - 1; k >=0  ; k--)
            {
                var i = plot.seriesStack[k];

                s = series[i]; 
                
                if (s && s.show && s.showHighlight && s.data && s.data.length)
                { 
                    for (j = 0; j <= s.gridData.length; j++)
                    {
                        p1 = (j === 0) ? null : s.gridData[j - 1];
                        p2 = (j === s.gridData.length) ? null : s.gridData[j];
                        if (p1 === null && p2 !== null)
                        {
                            // before first point
                            if (p2[0] !== null && p2[1] !== null && p2[0] >= x)
                            {
                                p = p2;
                                dataLoc = j;
                                serToPt[i] = j;
                                break;
                            }
                        }
                        else if (p2 === null && p1 !== null)
                        {
                            // before first point
                            if (p1[0] !== null && p1[1] !== null && p1[0] <= x)
                            {
                                p = p1;
                                dataLoc = j - 1;
                                serToPt[i] = j - 1;
                                break;
                            }
                        }
                        else if (p1 !== null && p2[0] !== null)
                        {
                            if (p1[0] <= x && p2[0] >= x)
                            {
                                if ((x - p1[0]) < (p2[0] - x))
                                {
                                    p = p1;
                                    dataLoc = j - 1;
                                    serToPt[i] = j - 1;
                                }
                                else
                                {
                                    p = p2;
                                    dataLoc = j;
                                    serToPt[i] = j;
                                }
                            }
                        }
                    }
                    if(k !== visibleIndex[0] && !autotooltip)
                    {
			tempSerData.push({seriesIndex: i, pointIndex: dataLoc,
                    gridData: p, data: s.data[dataLoc],seriesData: []});
                        continue;
                    }
                    var xAxis = plot.axes[s.xaxis],min = xAxis.min || xAxis._dataBounds.min,max = xAxis.max || xAxis._dataBounds.max,xval = null;
                    if (s.data[dataLoc])
                    {
                        xval = s.data[dataLoc][0];
                    }
                    if (xval != null)
                    {
                        if (xval < min || xval > max)
                        {
                            continue;
                        }
                    }
                    var nrPt =  {seriesIndex: i, pointIndex: dataLoc,
                    gridData: p, data: s.data[dataLoc],seriesData: []}; 
                    if (!autotooltip)
                    {
                        nrPt = checkNearestYPoint(series, nrPt, gridpos, serToPt);
                        gridpos = plot = null;
			var tempsel = computeSeries(nrPt, tempSerData,plot);
			return tempsel;
                    }
                    else
                    {
                        nrPt.series = series;
                    }                    
                    seriesData.push(p);
                    if (prevSeries === -1)
                    {
                        prevSeries = i;
                        prevData = nrPt;
                        continue;
                    }
                    else
                    {
                        var selectedSer = prevNeibSeriesIndex;
                        if (!isNaN(selectedSer))
                        {
                            if (i === selectedSer)
                            {
                                prevSeries = i;
                                prevData = nrPt;
                            }
                            else
                            {
                                continue;
                            }
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
            }
            gridpos = plot = null;
            if (prevData !== null)
            {
                prevData.seriesData = seriesData;
                return prevData;
            }
    };
    
    //clear Dotted Line Canvas for Line Charts

    $.jqplot.Highlighter.clearDashLine = function(plot)
    {
        var temp = $('.line_canvas'+plot.target[0].id)[0].getContext('2d');
        temp.clearRect(0,0,temp.canvas.width,temp.canvas.height);
        temp = plot = null;
    };
    
    //draw dashLine for Line Charts
    $.jqplot.Highlighter.drawDashLine = function(plot,x, neighbor,nearestpoint,gridpos,autotooltip)
    {
        var ctx = $('.line_canvas'+plot.target[0].id)[0].getContext('2d');
        var i,j,ypoint;
        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
        ctx.save();
        var canvasHeight = ctx.canvas.clientHeight;
        var y = 0,gridposset = false;
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.strokeStyle = "#999999";
        var draw = false;
        for (i = 0; i <= canvasHeight; )
        {
            var length = nearestpoint.seriesData.length;
            var found = false;
            for (j=0;j<length;j++)
            {
                if (nearestpoint.seriesData[j] !== undefined)
                {
                    ypoint = nearestpoint.seriesData[j][1];
                    if (ypoint)
                    {
                        if (y > (ypoint-6) && y < (ypoint+6))
                        {
                            found = true;
                        }
                    }
                }
            }
            if (found && !gridposset)
            {
                y = y + 3;
                continue;
            }
            if (draw === true)
            {
                y = y + 3;
                ctx.lineTo(x, y);
                draw = false;
            }
            else
            {
                ctx.moveTo(x, y);
                y = y + 3;
                if(neighbor === null ||
                    (neighbor !== null &&
                    (y < neighbor.gridData[1] - 5 || y > neighbor.gridData[1] + 6)))
                {
                    ctx.lineTo(x, y);
                }
            }
            y = y + 3;
            i = y;

        }
         ctx.stroke();
         ctx.restore();
    };
    
    $.jqplot.preInitHooks.push($.jqplot.Highlighter.init);
    $.jqplot.preParseSeriesOptionsHooks.push($.jqplot.Highlighter.parseOptions);
    $.jqplot.postDrawHooks.push($.jqplot.Highlighter.postPlotDraw);
    
    function draw(plot, neighbor) {
        var hl = plot.plugins.highlighter;
        var s = plot.series[neighbor.seriesIndex];
        var smr = s.markerRenderer;
        var mr = hl.markerRenderer;
        mr.style = smr.style;
	var option;
	    if (s._type === 'line' && s.markerRenderer.style==='circle')
		{
			mr.lineWidth = 2;
			option = {};
		   option.tinyCircleStyle = "white";
		}
		else
		{
			mr.lineWidth = smr.lineWidth + hl.lineWidthAdjust;
		}
        mr.size = smr.size + hl.sizeAdjust;
        var rgba = $.jqplot.getColorComponents(smr.color);
        var newrgb = [rgba[0], rgba[1], rgba[2]];
        var alpha = (rgba[3] >= 0.6) ? rgba[3]*0.6 : rgba[3]*(2-rgba[3]);
        mr.color = 'rgba('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+','+alpha+')';
        mr.init();
        var x, y;
        if (typeof s.gridData[neighbor.pointIndex]!== 'undefined')
        {
            x = s.gridData[neighbor.pointIndex][0];
            y = s.gridData[neighbor.pointIndex][1];
        }
        
        mr.draw(x, y, hl.highlightCanvas._ctx,option, true);
        plot = neighbor = h1 = s = smr = mr = option = null;
        
    }
    
    function collectGarbageElm()
    {
        if (this.plugins && this.plugins.highlighter)
        {
            this.plugins.highlighter._tooltipElem.emptyForce();
            var tips = plot.plugins.highlighter.tips;
            tips.hide();
            tips = null;
        }
    }
    
    function fnShowTooltip(plot, series, neighbor,gridpos) 
    {
        if (series.show)
        {
        // neighbor looks like: {seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]}
        // gridData should be x,y pixel coords on the grid.
        // add the plot._gridPadding to that to get x,y in the target.
        if(!neighbor.data)
        {
            collectGarbageElm();
            return;
        }
        var tips = plot.plugins.highlighter.tips;
        var hl = plot.plugins.highlighter;
        var elem = hl._tooltipElem;
        var serieshl = series.highlighter || {};
        var chartoffset =  {top: 0,left: 0};
        var assignedparent = plot.target,marginTop,marginLeft,offsetTop,offsetLeft;
        var targetOffset = assignedparent.offset();
        
        offsetTop = parseInt(targetOffset.top);
        offsetLeft = parseInt(targetOffset.left);
        var parentmarginleft = parseInt(plot.target.css('margin-left'));
        if (!isNaN(parentmarginleft))
        {
            offsetLeft = offsetLeft + parentmarginleft;
        }
        if (!isNaN(offsetTop))
        {
            chartoffset.top = chartoffset.top + offsetTop;
        }
        if (!isNaN(offsetLeft))
        {
            chartoffset.left = chartoffset.left + offsetLeft;
        }
        if (!isNaN(marginTop))
        {
            chartoffset.top = chartoffset.top + marginTop;
        }
        if (!isNaN(marginLeft))
        {
            chartoffset.left = chartoffset.left + marginLeft;
        }
        var opts = $.extend(true, {}, hl, serieshl);

        if (opts.useAxesFormatters) {
            var xf = function(str, val){
                if(typeof val === "undefined")
                {
                    return "";
                } 
                return ""+val;
            };
            var yf = function(str, val){
                if(typeof val === "undefined")
                {
                    return "";
                } 
                return ""+val;
            };
            var xfstr = "";
            var yfstr = "";
            if( series._xaxis._ticks.length > 0)
            {
                xf = series._xaxis._ticks[0].formatter;
                xfstr = series._xaxis._ticks[0].formatString;
            }
            if( series._yaxis._ticks.length > 0)
            {
                yf = series._yaxis._ticks[0].formatter;
                yfstr = series._yaxis._ticks[0].formatString;
            }
            var str;
            var xstr = xf(xfstr, neighbor.data[0]);
            var ystrs = [];
            for (var i=1; i<opts.yvalues+1; i++) {
                ystrs.push(yf(yfstr, neighbor.data[i]));
            }
            if (typeof opts.formatString === 'string') {
                switch (opts.tooltipAxes) {
                    case 'both':
                    case 'xy':
                        ystrs.unshift(xstr);
                        ystrs.unshift(opts.formatString);
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                        break;
                    case 'yx':
                        ystrs.push(xstr);
                        ystrs.unshift(opts.formatString);
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                        break;
                    case 'x':
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, [opts.formatString, xstr]);
                        break;
                    case 'y':
                        ystrs.unshift(opts.formatString);
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                        break;
                    default: // same as xy
                        ystrs.unshift(xstr);
                        ystrs.unshift(opts.formatString);
                        str = $.jqplot.sprintf.apply($.jqplot.sprintf, ystrs);
                        break;
                } 
            }
            else {
                switch (opts.tooltipAxes) {
                    case 'both':
                    case 'xy':
                        str = xstr;
                        for (var i=0; i<ystrs.length; i++) {
                            str += opts.tooltipSeparator + ystrs[i];
                        }
                        break;
                    case 'yx':
                        str = '';
                        for (var i=0; i<ystrs.length; i++) {
                            str += ystrs[i] + opts.tooltipSeparator;
                        }
                        str += xstr;
                        break;
                    case 'x':
                        str = xstr;
                        break;
                    case 'y':
                        str = ystrs.join(opts.tooltipSeparator);
                        break;
                    default: // same as 'xy'
                        str = xstr;
                        for (var i=0; i<ystrs.length; i++) {
                            str += opts.tooltipSeparator + ystrs[i];
                        }
                        break;
                    
                }                
            }
            xf = yf = xfstr = yfstr = null;
        }
        else {
            var str;
            if (typeof opts.formatString ===  'string') {
                str = $.jqplot.sprintf.apply($.jqplot.sprintf, [opts.formatString].concat(neighbor.data));
            }

            else {
                if (opts.tooltipAxes == 'both' || opts.tooltipAxes == 'xy') {
                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]) + opts.tooltipSeparator + $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]);
                }
                else if (opts.tooltipAxes == 'yx') {
                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]) + opts.tooltipSeparator + $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]);
                }
                else if (opts.tooltipAxes == 'x') {
                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[0]);
                }
                else if (opts.tooltipAxes == 'y') {
                    str = $.jqplot.sprintf(opts.tooltipFormatString, neighbor.data[1]);
                } 
            }
        }
        var tempTip;
        if ($.isFunction(opts.tooltipContentEditor)) {
        	tempTip = opts.tooltipContentEditor(str, neighbor.seriesIndex, neighbor.pointIndex, plot);
        	str =  '<div id="charttip" class="tiny-tips tiny-tips-box fl">'+
            '<div class="tiny-tips-box-t"><div class="tiny-tips-box-t_l"></div>'+
            '<div class="tiny-tips-box-t_c"><div class="tiny-tips-box-t_cin"></div></div>'+
            '<div class="tiny-tips-box-t_r"></div></div><div class="tiny-tips-box-c clearfix">'+
            '<div class="tiny-tips-ico-gy c7">'+  tempTip +'</div></div><div class="tiny-tips-box-b">'+
          	'<div class="tiny-tips-box-b_l"></div><div class="tiny-tips-box-b_c">'+
          	'<div class="tiny-tips-box-b_cin"></div></div><div class="tiny-tips-box-b_r"></div></div></div>';
            
        }
        if (!tempTip)
        {
            collectGarbageElm();
            return;
        }
        tips.option("content",tempTip);
        tips.option("parent",plot.target); 
        var elementTop = 0,elementLeft = 0;
        var gridpos = {x:neighbor.gridData[0], y:neighbor.gridData[1]};
        var ms = 0;
        var fact = 0.707;
        if (series.markerRenderer.show == true && series._type !== 'bar') { 
            ms = (series.markerRenderer.size + opts.sizeAdjust)/2;
        }
		
		var loc = locations;
		if (series.fillToZero && series.fill && neighbor.data[1] < 0) {
			loc = oppositeLocations;
		}
		 if(series._type==='line' ||series._stack) 
			{
			 opts.tooltipLocation='ne';
			}
		
        switch (loc[locationIndicies[opts.tooltipLocation]]) {
            case 'nw':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - fact * ms;
                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - fact * ms;
                break;
            case 'n':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;
                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - ms;
                break;
            case 'ne':
                var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + fact * ms;
                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - fact * ms;
                break;
            case 'e':
                var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + ms;
                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;
                break;
            case 'se':
                var x = gridpos.x + plot._gridPadding.left + opts.tooltipOffset + fact * ms;
                var y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + fact * ms;
                break;
            case 's':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;
                var y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + ms;
                break;
            case 'sw':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - fact * ms;
                var y = gridpos.y + plot._gridPadding.top + opts.tooltipOffset + fact * ms;
                break;
            case 'w':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - ms;
                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;
                break;
            default: // same as 'nw'
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - opts.tooltipOffset - fact * ms;
                var y = gridpos.y + plot._gridPadding.top - opts.tooltipOffset - elem.outerHeight(true) - fact * ms;
                break;
        }
        tiny.garbageCollect(elem , true);
        elem = null;
        
       if(series._type==='bar' ) 
		{
			if (series.barDirection === "horizontal")
			{
				if (series._stack)
				{
                    elementTop = y;
                    elementLeft = x-15;
				}
				else
				{
                    elementTop = neighbor.points[2][1] + plot._gridPadding.top;
                    elementLeft = neighbor.points[2][0] + plot._gridPadding.left - 8;
				}
				
			}
			else
			{
				if (series._stack)
				{
               		elementLeft = x-(series.barWidth/2);
               		elementTop = y+4;
				}
				else
				{
					elementTop = neighbor.points[2][1] + plot._gridPadding.top;
                    elementLeft = neighbor.points[2][0] + plot._gridPadding.left - 8;
                    elementLeft = elementLeft > (3*series.barWidth/4) ? elementLeft - (3*series.barWidth/4) : elementLeft ;
				}
			}

		}
       else  if(series._type==='line' ) 
		{
            if (!plot.lastNeighbour)
            {
                plot.lastNeighbour = neighbor;
                plot.lastGridpos = gridpos;
            }
            else
            {
                plot.lastNeighbour = null;
                plot.lastGridpos = null;
                plot.lastNeighbour = neighbor;
                plot.lastGridpos = gridpos;
            }
            var tt = neighbor.gridData[1]+
            plot._gridPadding.top
            - fact * ms
            + chartoffset.top;
            var ts = neighbor.gridData[0] + plot._gridPadding.left-5 + chartoffset.left;
            elementLeft = ts;
            elementTop = tt;
            if ((plot.islinechart || plot.options.islinechart) && elementTop !== parseInt(y))
			{
				if (opts.fadeTooltip)
				{
                    if (tempTip)
                    {
                        tips.setPosition(elementLeft, elementTop);
                        tips.show();
                    }
                    else
                    {
                        tips.hide();
                    }
                    elem = null;
				}
				else
				{				
					if (tempTip)
					{
                        elementLeft = elementLeft + chartoffset.left;
                        elementTop = elementTop + chartoffset.top;

                        tips.setPosition(x, y);
                        tips.show();
					}
					else
					{
                        tips.hide();
					}
				}
                tips = null;
				return;
			}
		}
		else
		{
            elementLeft = x;
            elementTop = y;            
		}
		if (tempTip)
		{
            elementLeft = elementLeft + chartoffset.left;
            elementTop = elementTop + chartoffset.top;

            tips.setPosition(elementLeft, elementTop);
            tips.show();
		}
		else
		{
            tips.hide();
		}
        tips = null;
	}
        plot = series = neighbor = str = null;
    }

    
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        var hl = plot.plugins.highlighter;
        var c = plot.plugins.cursor;
        if (hl.show) {
            var tips = plot.plugins.highlighter.tips;
            if (neighbor == null && hl.isHighlighting) {
                var ctx = hl.highlightCanvas._ctx;
                ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                ctx = null;
                if (hl.fadeTooltip) {
                }
                else {
                    tips.hide();
                }
                if (hl.bringSeriesToFront) {
                    plot.restorePreviousSeriesOrder();
                }
                hl.isHighlighting = false;
                tiny.garbageCollect(hl.currentNeighbor , false);
                hl.currentNeighbor = null;
            }
            else if (neighbor != null && plot.series[neighbor.seriesIndex].showHighlight && !hl.isHighlighting) {
                hl.isHighlighting = true;
                hl.currentNeighbor = neighbor;
                if (hl.showMarker && plot.series[neighbor.seriesIndex]._type !== 'bar') {
                    draw(plot, neighbor);
                }
                if (hl.showTooltip && (!c || !c._zoom.started)) {
                    if(plot.stackSeries)
                    {
                        neighbor.data = plot.series[neighbor.seriesIndex]._stackData[neighbor.pointIndex];
                    }
                    if (hl.showMarker && plot.series[neighbor.seriesIndex]._type !== 'bar') {
                        if (hl.showMarker && plot.series[neighbor.seriesIndex]._type === 'line') 
                        {
                            var nearestpoint = $.jqplot.Highlighter.nearestDataPoint(gridpos, plot);
                            if(!nearestpoint || !nearestpoint.gridData)
                            {
                                collectGarbageElm();
                                return;
                            }
                            var tempNearestpoint = neighbor;
                            tempNearestpoint.seriesData = [];
                            if (nearestpoint.data !== tempNearestpoint.data)
                            {
                                if (tempNearestpoint.pointIndex === nearestpoint.pointIndex)
                                {
                                    tempNearestpoint.seriesData = nearestpoint.seriesData;
                                }
                            }
                            $.jqplot.Highlighter.drawDashLine(plot,tempNearestpoint.gridData[0], neighbor,tempNearestpoint,gridpos);
                        }
                        if(!plot.options.ispiechart) {fnShowTooltip(plot, plot.series[neighbor.seriesIndex], neighbor,gridpos);}
                    }
                }
                if (hl.bringSeriesToFront) {
                    plot.moveSeriesToFront(neighbor.seriesIndex);
                }
            }
            // check to see if we're highlighting the wrong point.
            else if (neighbor != null && hl.isHighlighting && hl.currentNeighbor != neighbor) {
                // highlighting the wrong point.

                // if new series allows highlighting, highlight new point.
                if (plot.series[neighbor.seriesIndex].showHighlight) {
                    if (plot.series[neighbor.seriesIndex]._type !== 'bar')
                    {
                        var ctx = hl.highlightCanvas._ctx;
                        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
                        ctx = null;
                    }
                    hl.isHighlighting = true;
                    hl.currentNeighbor = neighbor;
                    if (hl.showMarker && plot.series[neighbor.seriesIndex]._type !== 'bar') {
                        draw(plot, neighbor);
                        
                    }
                    if (hl.showTooltip && (!c || !c._zoom.started)) {
                        if(plot.stackSeries)
                        {
                            neighbor.data = plot.series[neighbor.seriesIndex]._stackData[neighbor.pointIndex];
                        }
                        if (hl.showMarker && plot.series[neighbor.seriesIndex]._type === 'line') 
                        {
                            var nearestpoint = $.jqplot.Highlighter.nearestDataPoint(gridpos, plot);
                            if(!nearestpoint || !nearestpoint.gridData)
                            {
                                collectGarbageElm();
                                return;
                            }
                            var tempNearestpoint = neighbor;
                            tempNearestpoint.seriesData = [];                                
                            if (nearestpoint.data !== tempNearestpoint.data)
                            {
                                if (tempNearestpoint.pointIndex === nearestpoint.pointIndex)
                                {
                                    tempNearestpoint.seriesData = nearestpoint.seriesData;
                                }
                            }
                            $.jqplot.Highlighter.drawDashLine(plot,tempNearestpoint.gridData[0], neighbor,tempNearestpoint,gridpos);
                        }
                         if(!plot.options.ispiechart) {fnShowTooltip(plot, plot.series[neighbor.seriesIndex], neighbor,gridpos);}
                    }
                    if (hl.bringSeriesToFront) {
                        plot.moveSeriesToFront(neighbor.seriesIndex);
                    }                    
                }                
            }
            tips = null;
        }
        ev = gridpos = datapos = neighbor = plot = h1 = c = null;
    }
})(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {
    
    /**
     * Class: $.jqplot.Cursor
     * Plugin class representing the cursor as displayed on the plot.
     */
    $.jqplot.Cursor = function(options) {
        // Group: Properties
        // prop: style
        // CSS spec for cursor style
        this.style = 'crosshair';
        this.previousCursor = 'auto';
        // prop: show
        // wether to show the cursor or not.
        this.show = $.jqplot.config.enablePlugins;
        // prop: showTooltip
        // show a cursor position tooltip.  Location of the tooltip
        // will be controlled by followMouse and tooltipLocation.
        this.showTooltip = true;
        // prop: followMouse
        // Tooltip follows the mouse, it is not at a fixed location.
        // Tooltip will show on the grid at the location given by
        // tooltipLocation, offset from the grid edge by tooltipOffset.
        this.followMouse = false;
        // prop: tooltipLocation
        // Where to position tooltip.  If followMouse is true, this is
        // relative to the cursor, otherwise, it is relative to the grid.
        // One of 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'
        this.tooltipLocation = 'se';
        // prop: tooltipOffset
        // Pixel offset of tooltip from the grid boudaries or cursor center.
        this.tooltipOffset = 6;
        // prop: showTooltipGridPosition
        // show the grid pixel coordinates of the mouse.
        this.showTooltipGridPosition = false;
        // prop: showTooltipUnitPosition
        // show the unit (data) coordinates of the mouse.
        this.showTooltipUnitPosition = true;
        // prop: showTooltipDataPosition
        // Used with showVerticalLine to show intersecting data points in the tooltip.
        this.showTooltipDataPosition = false;
        // prop: tooltipFormatString
        // sprintf format string for the tooltip.
        // Uses Ash Searle's javascript sprintf implementation
        // found here: http://hexmen.com/blog/2007/03/printf-sprintf/
        // See http://perldoc.perl.org/functions/sprintf.html for reference
        // Note, if showTooltipDataPosition is true, the default tooltipFormatString
        // will be set to the cursorLegendFormatString, not the default given here.
        this.tooltipFormatString = '%.4P, %.4P';
        // prop: useAxesFormatters
        // Use the x and y axes formatters to format the text in the tooltip.
        this.useAxesFormatters = true;
        // prop: tooltipAxisGroups
        // Show position for the specified axes.
        // This is an array like [['xaxis', 'yaxis'], ['xaxis', 'y2axis']]
        // Default is to compute automatically for all visible axes.
        this.tooltipAxisGroups = [];
        // prop: zoom
        // Enable plot zooming.
        this.zoom = false;
        // zoomProxy and zoomTarget properties are not directly set by user.  
        // They Will be set through call to zoomProxy method.
        this.zoomProxy = false;
        this.zoomTarget = false;
        // prop: looseZoom
        // Will expand zoom range to provide more rounded tick values.
        // Works only with linear, log and date axes.
        this.looseZoom = true;
        // prop: clickReset
        // Will reset plot zoom if single click on plot without drag.
        this.clickReset = false;
        // prop: dblClickReset
        // Will reset plot zoom if double click on plot without drag.
        this.dblClickReset = true;
        // prop: showVerticalLine
        // draw a vertical line across the plot which follows the cursor.
        // When the line is near a data point, a special legend and/or tooltip can
        // be updated with the data values.
        this.showVerticalLine = false;
        // prop: showHorizontalLine
        // draw a horizontal line across the plot which follows the cursor.
        this.showHorizontalLine = false;
        // prop: constrainZoomTo
        // 'none', 'x' or 'y'
        this.constrainZoomTo = 'none';
        // // prop: autoscaleConstraint
        // // when a constrained axis is specified, true will
        // // auatoscale the adjacent axis.
        this.shapeRenderer = new $.jqplot.ShapeRenderer();
        this._zoom = {start:[], end:[], started: false, zooming:false, isZoomed:false, axes:{start:{}, end:{}}, gridpos:{}, datapos:{}};
        this._tooltipElem;
        this.zoomCanvas;
        this.cursorCanvas;
        // prop: intersectionThreshold
        // pixel distance from data point or marker to consider cursor lines intersecting with point.
        // If data point markers are not shown, this should be >= 1 or will often miss point intersections.
        this.intersectionThreshold = 2;
        // prop: showCursorLegend
        // Replace the plot legend with an enhanced legend displaying intersection information.
        this.showCursorLegend = false;
        // prop: cursorLegendFormatString
        // Format string used in the cursor legend.  If showTooltipDataPosition is true,
        // this will also be the default format string used by tooltipFormatString.
        this.cursorLegendFormatString = $.jqplot.Cursor.cursorLegendFormatString;
        // whether the cursor is over the grid or not.
        this._oldHandlers = {onselectstart: null, ondrag: null, onmousedown: null};
        // prop: constrainOutsideZoom
        // True to limit actual zoom area to edges of grid, even when zooming
        // outside of plot area.  That is, can't zoom out by mousing outside plot.
        this.constrainOutsideZoom = true;
        // prop: showTooltipOutsideZoom
        // True will keep updating the tooltip when zooming of the grid.
        this.showTooltipOutsideZoom = false;
        // true if mouse is over grid, false if not.
        this.onGrid = false;
        $.extend(true, this, options);
    };
    
    $.jqplot.Cursor.cursorLegendFormatString = '%s x:%s, y:%s';
    
    // called with scope of plot
    $.jqplot.Cursor.init = function (target, data, opts){
        // add a cursor attribute to the plot
        var options = opts || {};
        this.plugins.cursor = new $.jqplot.Cursor(options.cursor);
        var c = this.plugins.cursor;

        if (c.show) {
            $.jqplot.eventListenerHooks.push(['jqplotMouseEnter', handleMouseEnter]);
            $.jqplot.eventListenerHooks.push(['jqplotMouseLeave', handleMouseLeave]);
            $.jqplot.eventListenerHooks.push(['jqplotMouseMove', handleMouseMove]);
            
            if (c.showCursorLegend) {              
                opts.legend = opts.legend || {};
                opts.legend.renderer =  $.jqplot.CursorLegendRenderer;
                opts.legend.formatString = this.plugins.cursor.cursorLegendFormatString;
                opts.legend.show = true;
            }
            
            if (c.zoom) {
                $.jqplot.eventListenerHooks.push(['jqplotMouseDown', handleMouseDown]);
                
                if (c.clickReset) {
                    $.jqplot.eventListenerHooks.push(['jqplotClick', handleClick]);
                }
                
                if (c.dblClickReset) {
                    $.jqplot.eventListenerHooks.push(['jqplotDblClick', handleDblClick]);
                }             
            }
    
            this.resetZoom = function() {
                var axes = this.axes;
                if (!c.zoomProxy) {
                    for (var ax in axes) {
                        axes[ax].reset();
                        axes[ax]._ticks = [];
                        // fake out tick creation algorithm to make sure original auto
                        // computed format string is used if _overrideFormatString is true
                        if (c._zoom.axes[ax] !== undefined) {
                            axes[ax]._autoFormatString = c._zoom.axes[ax].tickFormatString;
                        }
                    }
                    this.redraw();
                }
                else {
                    var ctx = this.plugins.cursor.zoomCanvas._ctx;
                    ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);
                    ctx = null;
                }
                this.plugins.cursor._zoom.isZoomed = false;
                this.target.trigger('jqplotResetZoom', [this, this.plugins.cursor]);
            };
            

            if (c.showTooltipDataPosition) {
                c.showTooltipUnitPosition = false;
                c.showTooltipGridPosition = false;
                if (options.cursor.tooltipFormatString == undefined) {
                    c.tooltipFormatString = $.jqplot.Cursor.cursorLegendFormatString;
                }
            }
        }
    };
    
    // called with context of plot
    $.jqplot.Cursor.postDraw = function() {
        var c = this.plugins.cursor;
        
        // Memory Leaks patch
        if (c.zoomCanvas) {
            c.zoomCanvas.resetCanvas();
            tiny.garbageCollect(c.zoomCanvas, true);
            c.zoomCanvas = null;
        }
        
        if (c.cursorCanvas) {
            c.cursorCanvas.resetCanvas();
            tiny.garbageCollect(c.cursorCanvas, true);
            c.cursorCanvas = null;
        }
        
        if (c._tooltipElem) {
            c._tooltipElem.emptyForce();
            tiny.garbageCollect(c._tooltipElem, true);
            c._tooltipElem = null;
        }

        
        if (c.zoom) {
            c.zoomCanvas = new $.jqplot.GenericCanvas();
            this.eventCanvas._elem.before(c.zoomCanvas.createElement(this._gridPadding, 'jqplot-zoom-canvas', this._plotDimensions, this));
            c.zoomCanvas.setContext();
        }

        var elem = document.createElement('div');
        c._tooltipElem = $(elem);
        elem = null;
        c._tooltipElem.addClass('jqplot-cursor-tooltip');
        c._tooltipElem.css({position:'absolute', display:'none'});
        
        
        if (c.zoomCanvas) {
            c.zoomCanvas._elem.before(c._tooltipElem);
        }

        else {
            this.eventCanvas._elem.before(c._tooltipElem);
        }

        if (c.showVerticalLine || c.showHorizontalLine) {
            c.cursorCanvas = new $.jqplot.GenericCanvas();
            this.eventCanvas._elem.before(c.cursorCanvas.createElement(this._gridPadding, 'jqplot-cursor-canvas', this._plotDimensions, this));
            c.cursorCanvas.setContext();
        }

        // if we are showing the positions in unit coordinates, and no axes groups
        // were specified, create a default set.
        if (c.showTooltipUnitPosition){
            if (c.tooltipAxisGroups.length === 0) {
                var series = this.series;
                var s;
                var temp = [];
                for (var i=0; i<series.length; i++) {
                    s = series[i];
                    var ax = s.xaxis+','+s.yaxis;
                    if ($.inArray(ax, temp) == -1) {
                        temp.push(ax);
                    }
                }
                for (var i=0; i<temp.length; i++) {
                    c.tooltipAxisGroups.push(temp[i].split(','));
                }
            }
        }
    };
    
    // Group: methods
    //
    // method: $.jqplot.Cursor.zoomProxy
    // links targetPlot to controllerPlot so that plot zooming of
    // targetPlot will be controlled by zooming on the controllerPlot.
    // controllerPlot will not actually zoom, but acts as an
    // overview plot.  Note, the zoom options must be set to true for
    // zoomProxy to work.
    $.jqplot.Cursor.zoomProxy = function(targetPlot, controllerPlot) {
        var tc = targetPlot.plugins.cursor;
        var cc = controllerPlot.plugins.cursor;
        tc.zoomTarget = true;
        tc.zoom = true;
        tc.style = 'auto';
        tc.dblClickReset = false;
        cc.zoom = true;
        cc.zoomProxy = true;
              
        controllerPlot.target.bind('jqplotZoom', plotZoom);
        controllerPlot.target.bind('jqplotResetZoom', plotReset);

        function plotZoom(ev, gridpos, datapos, plot, cursor) {
            tc.doZoom(gridpos, datapos, targetPlot, cursor);
        } 

        function plotReset(ev, plot, cursor) {
            targetPlot.resetZoom();
        }
    };
    
    $.jqplot.Cursor.prototype.resetZoom = function(plot, cursor) {
        var axes = plot.axes;
        var cax = cursor._zoom.axes;
        if (!plot.plugins.cursor.zoomProxy && cursor._zoom.isZoomed) {
            for (var ax in axes) {
                axes[ax].reset();
                axes[ax]._ticks = [];
                axes[ax]._autoFormatString = cax[ax].tickFormatString;
            }
            plot.redraw();
            cursor._zoom.isZoomed = false;
        }
        else {
            var ctx = cursor.zoomCanvas._ctx;
            ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);
            ctx = null;
        }
        plot.target.trigger('jqplotResetZoom', [plot, cursor]);
    };
    
    $.jqplot.Cursor.resetZoom = function(plot) {
        plot.resetZoom();
    };
    
    $.jqplot.Cursor.prototype.doZoom = function (gridpos, datapos, plot, cursor) {
        var c = cursor;
        var axes = plot.axes;
        var zaxes = c._zoom.axes;
        var start = zaxes.start;
        var end = zaxes.end;
        var min, max, dp, span,
            newmin, newmax, curax, _numberTicks, ret;
        var ctx = plot.plugins.cursor.zoomCanvas._ctx;
        // don't zoom if zoom area is too small (in pixels)
        if ((c.constrainZoomTo == 'none' && Math.abs(gridpos.x - c._zoom.start[0]) > 6 && Math.abs(gridpos.y - c._zoom.start[1]) > 6) || (c.constrainZoomTo == 'x' && Math.abs(gridpos.x - c._zoom.start[0]) > 6) ||  (c.constrainZoomTo == 'y' && Math.abs(gridpos.y - c._zoom.start[1]) > 6)) {
            if (!plot.plugins.cursor.zoomProxy) {
                for (var ax in datapos) {
                    // make a copy of the original axes to revert back.
                    if (c._zoom.axes[ax] == undefined) {
                        c._zoom.axes[ax] = {};
                        c._zoom.axes[ax].numberTicks = axes[ax].numberTicks;
                        c._zoom.axes[ax].tickInterval = axes[ax].tickInterval;
                        // for date axes...
                        c._zoom.axes[ax].daTickInterval = axes[ax].daTickInterval;
                        c._zoom.axes[ax].min = axes[ax].min;
                        c._zoom.axes[ax].max = axes[ax].max;
                        c._zoom.axes[ax].tickFormatString = (axes[ax].tickOptions != null) ? axes[ax].tickOptions.formatString :  '';
                    }


                    if ((c.constrainZoomTo == 'none') || (c.constrainZoomTo == 'x' && ax.charAt(0) == 'x') || (c.constrainZoomTo == 'y' && ax.charAt(0) == 'y')) {   
                        dp = datapos[ax];
                        if (dp != null) {           
                            if (dp > start[ax]) { 
                                newmin = start[ax];
                                newmax = dp;
                            }
                            else {
                                span = start[ax] - dp;
                                newmin = dp;
                                newmax = start[ax];
                            }

                            curax = axes[ax];

                            _numberTicks = null;

                            // if aligning this axis, use number of ticks from previous axis.
                            // Do I need to reset somehow if alignTicks is changed and then graph is replotted??
                            if (curax.alignTicks) {
                                if (curax.name === 'x2axis' && plot.axes.xaxis.show) {
                                    _numberTicks = plot.axes.xaxis.numberTicks;
                                }
                                else if (curax.name.charAt(0) === 'y' && curax.name !== 'yaxis' && curax.name !== 'yMidAxis' && plot.axes.yaxis.show) {
                                    _numberTicks = plot.axes.yaxis.numberTicks;
                                }
                            }
                            
                            if (this.looseZoom && (axes[ax].renderer.constructor === $.jqplot.LinearAxisRenderer || axes[ax].renderer.constructor === $.jqplot.LogAxisRenderer )) { //} || axes[ax].renderer.constructor === $.jqplot.DateAxisRenderer)) {

                                ret = $.jqplot.LinearTickGenerator(newmin, newmax, curax._scalefact, _numberTicks);

                                // if new minimum is less than "true" minimum of axis display, adjust it
                                if (axes[ax].tickInset && ret[0] < axes[ax].min + axes[ax].tickInset * axes[ax].tickInterval) {
                                    ret[0] += ret[4];
                                    ret[2] -= 1;
                                }

                                // if new maximum is greater than "true" max of axis display, adjust it
                                if (axes[ax].tickInset && ret[1] > axes[ax].max - axes[ax].tickInset * axes[ax].tickInterval) {
                                    ret[1] -= ret[4];
                                    ret[2] -= 1;
                                }

                                // for log axes, don't fall below current minimum, this will look bad and can't have 0 in range anyway.
                                if (axes[ax].renderer.constructor === $.jqplot.LogAxisRenderer && ret[0] < axes[ax].min) {
                                    // remove a tick and shift min up
                                    ret[0] += ret[4];
                                    ret[2] -= 1;
                                }

                                axes[ax].min = ret[0];
                                axes[ax].max = ret[1];
                                axes[ax]._autoFormatString = ret[3];
                                axes[ax].numberTicks = ret[2];
                                axes[ax].tickInterval = ret[4];
                                // for date axes...
                                axes[ax].daTickInterval = [ret[4]/1000, 'seconds'];
                            }
                            else {
                                axes[ax].min = newmin;
                                axes[ax].max = newmax;
                                axes[ax].tickInterval = null;
                                axes[ax].numberTicks = null;
                                // for date axes...
                                axes[ax].daTickInterval = null;
                            }

                            axes[ax]._ticks = [];
                        }
                    }
                            
                }
                ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);
                plot.redraw();
                c._zoom.isZoomed = true;
                ctx = null;
            }
            plot.target.trigger('jqplotZoom', [gridpos, datapos, plot, cursor]);
        }
    };
    
    $.jqplot.preInitHooks.push($.jqplot.Cursor.init);
    $.jqplot.postDrawHooks.push($.jqplot.Cursor.postDraw);
    
    function updateTooltip(gridpos, datapos, plot) {
        var c = plot.plugins.cursor;
        var s = '';
        var addbr = false;
        if (c.showTooltipGridPosition) {
            s = gridpos.x+', '+gridpos.y;
            addbr = true;
        }
        if (c.showTooltipUnitPosition) {
            var g;
            for (var i=0; i<c.tooltipAxisGroups.length; i++) {
                g = c.tooltipAxisGroups[i];
                if (addbr) {
                    s += '<br />';
                }
                if (c.useAxesFormatters) {
                    var xf = plot.axes[g[0]]._ticks[0].formatter;
                    var yf = plot.axes[g[1]]._ticks[0].formatter;
                    var xfstr = plot.axes[g[0]]._ticks[0].formatString;
                    var yfstr = plot.axes[g[1]]._ticks[0].formatString;
                    s += xf(xfstr, datapos[g[0]]) + ', '+ yf(yfstr, datapos[g[1]]);
                }
                else {
                    s += $.jqplot.sprintf(c.tooltipFormatString, datapos[g[0]], datapos[g[1]]);
                }
                addbr = true;
            }
        }
        
        if (c.showTooltipDataPosition) {
            var series = plot.series; 
            var ret = getIntersectingPoints(plot, gridpos.x, gridpos.y);
            var addbr = false;
        
            for (var i = 0; i< series.length; i++) {
                if (series[i].show) {
                    var idx = series[i].index;
                    var label = series[i].label.toString();
                    var cellid = $.inArray(idx, ret.indices);
                    var sx = undefined;
                    var sy = undefined;
                    if (cellid != -1) {
                        var data = ret.data[cellid].data;
                        if (c.useAxesFormatters) {
                            var xf = series[i]._xaxis._ticks[0].formatter;
                            var yf = series[i]._yaxis._ticks[0].formatter;
                            var xfstr = series[i]._xaxis._ticks[0].formatString;
                            var yfstr = series[i]._yaxis._ticks[0].formatString;
                            sx = xf(xfstr, data[0]);
                            sy = yf(yfstr, data[1]);
                        }
                        else {
                            sx = data[0];
                            sy = data[1];
                        }
                        if (addbr) {
                            s += '<br />';
                        }
                        s += $.jqplot.sprintf(c.tooltipFormatString, label, sx, sy);
                        addbr = true;
                    }
                }
            }
            
        }
        c._tooltipElem.html(s);
    }
    
    function moveLine(gridpos, plot) {
        var c = plot.plugins.cursor;
        var ctx = c.cursorCanvas._ctx;
        ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);
        if (c.showVerticalLine) {
            c.shapeRenderer.draw(ctx, [[gridpos.x, 0], [gridpos.x, ctx.canvas.height]]);
        }
        if (c.showHorizontalLine) {
            c.shapeRenderer.draw(ctx, [[0, gridpos.y], [ctx.canvas.width, gridpos.y]]);
        }
        var ret = getIntersectingPoints(plot, gridpos.x, gridpos.y);
        if (c.showCursorLegend) {
            var cells = $(plot.targetId + ' td.jqplot-cursor-legend-label');
            for (var i=0; i<cells.length; i++) {
                var idx = $(cells[i]).data('seriesIndex');
                var series = plot.series[idx];
                var label = series.label.toString();
                var cellid = $.inArray(idx, ret.indices);
                var sx = undefined;
                var sy = undefined;
                if (cellid != -1) {
                    var data = ret.data[cellid].data;
                    if (c.useAxesFormatters) {
                        var xf = series._xaxis._ticks[0].formatter;
                        var yf = series._yaxis._ticks[0].formatter;
                        var xfstr = series._xaxis._ticks[0].formatString;
                        var yfstr = series._yaxis._ticks[0].formatString;
                        sx = xf(xfstr, data[0]);
                        sy = yf(yfstr, data[1]);
                    }
                    else {
                        sx = data[0];
                        sy = data[1];
                    }
                }
                if (plot.legend.escapeHtml) {
                    $(cells[i]).text($.jqplot.sprintf(c.cursorLegendFormatString, label, sx, sy));
                }
                else {
                    $(cells[i]).html($.jqplot.sprintf(c.cursorLegendFormatString, label, sx, sy));
                }
            }        
        }
        ctx = null;
    }
        
    function getIntersectingPoints(plot, x, y) {
        var ret = {indices:[], data:[]};
        var s, i, d0, d, j, r, p;
        var threshold;
        var c = plot.plugins.cursor;
        for (var i=0; i<plot.series.length; i++) {
            s = plot.series[i];
            r = s.renderer;
            if (s.show) {
                threshold = c.intersectionThreshold;
                if (s.showMarker) {
                    threshold += s.markerRenderer.size/2;
                }
                for (var j=0; j<s.gridData.length; j++) {
                    p = s.gridData[j];
                    // check vertical line
                    if (c.showVerticalLine) {
                        if (Math.abs(x-p[0]) <= threshold) {
                            ret.indices.push(i);
                            ret.data.push({seriesIndex: i, pointIndex:j, gridData:p, data:s.data[j]});
                        }
                    }
                } 
            }
        }
        return ret;
    }
    
    function moveTooltip(gridpos, plot) {
        var c = plot.plugins.cursor;  
        var elem = c._tooltipElem;
        switch (c.tooltipLocation) {
            case 'nw':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top - c.tooltipOffset - elem.outerHeight(true);
                break;
            case 'n':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;
                var y = gridpos.y + plot._gridPadding.top - c.tooltipOffset - elem.outerHeight(true);
                break;
            case 'ne':
                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top - c.tooltipOffset - elem.outerHeight(true);
                break;
            case 'e':
                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;
                break;
            case 'se':
                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;
                break;
            case 's':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true)/2;
                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;
                break;
            case 'sw':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;
                break;
            case 'w':
                var x = gridpos.x + plot._gridPadding.left - elem.outerWidth(true) - c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top - elem.outerHeight(true)/2;
                break;
            default:
                var x = gridpos.x + plot._gridPadding.left + c.tooltipOffset;
                var y = gridpos.y + plot._gridPadding.top + c.tooltipOffset;
                break;
        }
            
        elem.css('left', x);
        elem.css('top', y);
	    elem = null;
    }
    
    function positionTooltip(plot) { 
        // fake a grid for positioning
        var grid = plot._gridPadding; 
        var c = plot.plugins.cursor;
        var elem = c._tooltipElem;  
        switch (c.tooltipLocation) {
            case 'nw':
                var a = grid.left + c.tooltipOffset;
                var b = grid.top + c.tooltipOffset;
                elem.css('left', a);
                elem.css('top', b);
                break;
            case 'n':
                var a = (grid.left + (plot._plotDimensions.width - grid.right))/2 - elem.outerWidth(true)/2;
                var b = grid.top + c.tooltipOffset;
                elem.css('left', a);
                elem.css('top', b);
                break;
            case 'ne':
                var a = grid.right + c.tooltipOffset;
                var b = grid.top + c.tooltipOffset;
                elem.css({right:a, top:b});
                break;
            case 'e':
                var a = grid.right + c.tooltipOffset;
                var b = (grid.top + (plot._plotDimensions.height - grid.bottom))/2 - elem.outerHeight(true)/2;
                elem.css({right:a, top:b});
                break;
            case 'se':
                var a = grid.right + c.tooltipOffset;
                var b = grid.bottom + c.tooltipOffset;
                elem.css({right:a, bottom:b});
                break;
            case 's':
                var a = (grid.left + (plot._plotDimensions.width - grid.right))/2 - elem.outerWidth(true)/2;
                var b = grid.bottom + c.tooltipOffset;
                elem.css({left:a, bottom:b});
                break;
            case 'sw':
                var a = grid.left + c.tooltipOffset;
                var b = grid.bottom + c.tooltipOffset;
                elem.css({left:a, bottom:b});
                break;
            case 'w':
                var a = grid.left + c.tooltipOffset;
                var b = (grid.top + (plot._plotDimensions.height - grid.bottom))/2 - elem.outerHeight(true)/2;
                elem.css({left:a, top:b});
                break;
            default:  // same as 'se'
                var a = grid.right - c.tooltipOffset;
                var b = grid.bottom + c.tooltipOffset;
                elem.css({right:a, bottom:b});
                break;
        }
        elem = null;
    }
    
    function handleClick (ev, gridpos, datapos, neighbor, plot) {
        ev.preventDefault();
        ev.stopImmediatePropagation();
        var c = plot.plugins.cursor;
        if (c.clickReset) {
            c.resetZoom(plot, c);
        }
        var sel = window.getSelection;
        if (document.selection && document.selection.empty)
        {
            document.selection.empty();
        }
        else if (sel && !sel().isCollapsed) {
            sel().collapse();
        }
        return false;
    }
    
    function handleDblClick (ev, gridpos, datapos, neighbor, plot) {
        ev.preventDefault();
        ev.stopImmediatePropagation();
        var c = plot.plugins.cursor;
        if (c.dblClickReset) {
            c.resetZoom(plot, c);
        }
        var sel = window.getSelection;
        if (document.selection && document.selection.empty)
        {
            document.selection.empty();
        }
        else if (sel && !sel().isCollapsed) {
            sel().collapse();
        }
        return false;
    }
    
    function handleMouseLeave(ev, gridpos, datapos, neighbor, plot) {
        var c = plot.plugins.cursor;
        c.onGrid = false;
        if (c.show) {
            $(ev.target).css('cursor', c.previousCursor);
            if (c.showTooltip && !(c._zoom.zooming && c.showTooltipOutsideZoom && !c.constrainOutsideZoom)) {
                c._tooltipElem.hide();
            }
            if (c.zoom) {
                c._zoom.gridpos = gridpos;
                c._zoom.datapos = datapos;
            }
            if (c.showVerticalLine || c.showHorizontalLine) {
                var ctx = c.cursorCanvas._ctx;
                ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);
                ctx = null;
            }
            if (c.showCursorLegend) {
                var cells = $(plot.targetId + ' td.jqplot-cursor-legend-label');
                for (var i=0; i<cells.length; i++) {
                    var idx = $(cells[i]).data('seriesIndex');
                    var series = plot.series[idx];
                    var label = series.label.toString();
                    if (plot.legend.escapeHtml) {
                        $(cells[i]).text($.jqplot.sprintf(c.cursorLegendFormatString, label, undefined, undefined));
                    }
                    else {
                        $(cells[i]).html($.jqplot.sprintf(c.cursorLegendFormatString, label, undefined, undefined));
                    }
                
                }        
            }
        }
    }
    
    function handleMouseEnter(ev, gridpos, datapos, neighbor, plot) {
        var c = plot.plugins.cursor;
        c.onGrid = true;
        if (c.show) {
            c.previousCursor = ev.target.style.cursor;
            ev.target.style.cursor = c.style;
            if (c.showTooltip) {
                updateTooltip(gridpos, datapos, plot);
                if (c.followMouse) {
                    moveTooltip(gridpos, plot);
                }
                else {
                    positionTooltip(plot);
                }
                c._tooltipElem.show();
            }
            if (c.showVerticalLine || c.showHorizontalLine) {
                moveLine(gridpos, plot);
            }
        }

    }    
    
    function handleMouseMove(ev, gridpos, datapos, neighbor, plot) {
        var c = plot.plugins.cursor;
        if (c.show) {
            if (c.showTooltip) {
                updateTooltip(gridpos, datapos, plot);
                if (c.followMouse) {
                    moveTooltip(gridpos, plot);
                }
            }
            if (c.showVerticalLine || c.showHorizontalLine) {
                moveLine(gridpos, plot);
            }
        }
    }
            
    function getEventPosition(ev) {
        var plot = ev.data.plot;
        var go = plot.eventCanvas._elem.offset();
        var gridPos = {x:ev.pageX - go.left, y:ev.pageY - go.top};
        var dataPos = {xaxis:null, yaxis:null, x2axis:null, y2axis:null, y3axis:null, y4axis:null, y5axis:null, y6axis:null, y7axis:null, y8axis:null, y9axis:null, yMidAxis:null};
        var an = ['xaxis', 'yaxis', 'x2axis', 'y2axis', 'y3axis', 'y4axis', 'y5axis', 'y6axis', 'y7axis', 'y8axis', 'y9axis', 'yMidAxis'];
        var ax = plot.axes;
        var n, axis;
        for (n=11; n>0; n--) {
            axis = an[n-1];
            if (ax[axis].show) {
                dataPos[axis] = ax[axis].series_p2u(gridPos[axis.charAt(0)]);
            }
        }

        return {offsets:go, gridPos:gridPos, dataPos:dataPos};
    }    
    
    function handleZoomMove(ev) {
        var plot = ev.data.plot;
        var c = plot.plugins.cursor;
        // don't do anything if not on grid.
        if (c.show && c.zoom && c._zoom.started && !c.zoomTarget) {
            var ctx = c.zoomCanvas._ctx;
            var positions = getEventPosition(ev);
            var gridpos = positions.gridPos;
            var datapos = positions.dataPos;
            c._zoom.gridpos = gridpos;
            c._zoom.datapos = datapos;
            c._zoom.zooming = true;
            var xpos = gridpos.x;
            var ypos = gridpos.y;
            var height = ctx.canvas.height;
            var width = ctx.canvas.width;
            if (c.showTooltip && !c.onGrid && c.showTooltipOutsideZoom) {
                updateTooltip(gridpos, datapos, plot);
                if (c.followMouse) {
                    moveTooltip(gridpos, plot);
                }
            }
            if (c.constrainZoomTo == 'x') {
                c._zoom.end = [xpos, height];
            }
            else if (c.constrainZoomTo == 'y') {
                c._zoom.end = [width, ypos];
            }
            else {
                c._zoom.end = [xpos, ypos];
            }
            var sel = window.getSelection;
            if (document.selection && document.selection.empty)
            {
                document.selection.empty();
            }
            else if (sel && !sel().isCollapsed) {
                sel().collapse();
            }
            drawZoomBox.call(c);
            ctx = null;
        }
    }
    
    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        var c = plot.plugins.cursor;
        $(document).one('mouseup.jqplot_cursor', {plot:plot}, handleMouseUp);
        var axes = plot.axes;
        if (document.onselectstart != undefined) {
            c._oldHandlers.onselectstart = document.onselectstart;
            document.onselectstart = function () { return false; };
        }
        if (document.ondrag != undefined) {
            c._oldHandlers.ondrag = document.ondrag;
            document.ondrag = function () { return false; };
        }
        if (document.onmousedown != undefined) {
            c._oldHandlers.onmousedown = document.onmousedown;
            document.onmousedown = function () { return false; };
        }
        if (c.zoom) {
            if (!c.zoomProxy) {
                var ctx = c.zoomCanvas._ctx;
                ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);
                ctx = null;
            }
            if (c.constrainZoomTo == 'x') {
                c._zoom.start = [gridpos.x, 0];
            }
            else if (c.constrainZoomTo == 'y') {
                c._zoom.start = [0, gridpos.y];
            }
            else {
                c._zoom.start = [gridpos.x, gridpos.y];
            }
            c._zoom.started = true;
            for (var ax in datapos) {
                // get zoom starting position.
                c._zoom.axes.start[ax] = datapos[ax];
            }  
            $(document).bind('mousemove.jqplotCursor', {plot:plot}, handleZoomMove);              
        }
    }
    
    function handleMouseUp(ev) {
        var plot = ev.data.plot;
        var c = plot.plugins.cursor;
        if (c.zoom && c._zoom.zooming && !c.zoomTarget) {
            var xpos = c._zoom.gridpos.x;
            var ypos = c._zoom.gridpos.y;
            var datapos = c._zoom.datapos;
            var height = c.zoomCanvas._ctx.canvas.height;
            var width = c.zoomCanvas._ctx.canvas.width;
            var axes = plot.axes;
            
            if (c.constrainOutsideZoom && !c.onGrid) {
                if (xpos < 0) { xpos = 0; }
                else if (xpos > width) { xpos = width; }
                if (ypos < 0) { ypos = 0; }
                else if (ypos > height) { ypos = height; }
                
                for (var axis in datapos) {
                    if (datapos[axis]) {
                        if (axis.charAt(0) == 'x') {
                            datapos[axis] = axes[axis].series_p2u(xpos);
                        }
                        else {
                            datapos[axis] = axes[axis].series_p2u(ypos);
                        }
                    }
                }
            }
            
            if (c.constrainZoomTo == 'x') {
                ypos = height;
            }
            else if (c.constrainZoomTo == 'y') {
                xpos = width;
            }
            c._zoom.end = [xpos, ypos];
            c._zoom.gridpos = {x:xpos, y:ypos};
            
            c.doZoom(c._zoom.gridpos, datapos, plot, c);
        }
        c._zoom.started = false;
        c._zoom.zooming = false;
        
        $(document).unbind('mousemove.jqplotCursor', handleZoomMove);
        
        if (document.onselectstart != undefined && c._oldHandlers.onselectstart != null){
            document.onselectstart = c._oldHandlers.onselectstart;
            c._oldHandlers.onselectstart = null;
        }
        if (document.ondrag != undefined && c._oldHandlers.ondrag != null){
            document.ondrag = c._oldHandlers.ondrag;
            c._oldHandlers.ondrag = null;
        }
        if (document.onmousedown != undefined && c._oldHandlers.onmousedown != null){
            document.onmousedown = c._oldHandlers.onmousedown;
            c._oldHandlers.onmousedown = null;
        }

    }
    
    function drawZoomBox() {
        var start = this._zoom.start;
        var end = this._zoom.end;
        var ctx = this.zoomCanvas._ctx;
        var l, t, h, w;
        if (end[0] > start[0]) {
            l = start[0];
            w = end[0] - start[0];
        }
        else {
            l = end[0];
            w = start[0] - end[0];
        }
        if (end[1] > start[1]) {
            t = start[1];
            h = end[1] - start[1];
        }
        else {
            t = end[1];
            h = start[1] - end[1];
        }
        ctx.fillStyle = 'rgba(0,0,0,0.2)';
        ctx.strokeStyle = '#999999';
        ctx.lineWidth = 1.0;
        ctx.clearRect(0,0,ctx.canvas.width, ctx.canvas.height);
        ctx.fillRect(0,0,ctx.canvas.width, ctx.canvas.height);
        ctx.clearRect(l, t, w, h);
        // IE won't show transparent fill rect, so stroke a rect also.
        ctx.strokeRect(l,t,w,h);
        ctx = null;
    }
    
    $.jqplot.CursorLegendRenderer = function(options) {
        $.jqplot.TableLegendRenderer.call(this, options);
        this.formatString = '%s';
    };
    
    $.jqplot.CursorLegendRenderer.prototype = new $.jqplot.TableLegendRenderer();
    $.jqplot.CursorLegendRenderer.prototype.constructor = $.jqplot.CursorLegendRenderer;
    
    // called in context of a Legend
    $.jqplot.CursorLegendRenderer.prototype.draw = function() {
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null;
        }
        if (this.show) {
            var series = this._series, s;
            // make a table.  one line label per row.
            var elem = document.createElement('div');
            this._elem = $(elem);
            elem = null;
            this._elem.addClass('jqplot-legend jqplot-cursor-legend');
            this._elem.css('position', 'absolute');
        
            var pad = false;
            for (var i = 0; i< series.length; i++) {
                s = series[i];
                if (s.show && s.showLabel) {
                    var lt = $.jqplot.sprintf(this.formatString, s.label.toString());
                    if (lt) {
                        var color = s.color;
                        if (s._stack && !s.fill) {
                            color = '';
                        }
                        addrow.call(this, lt, color, pad, i);
                        pad = true;
                    }
                    // let plugins add more rows to legend.  Used by trend line plugin.
                    for (var j=0; j<$.jqplot.addLegendRowHooks.length; j++) {
                        var item = $.jqplot.addLegendRowHooks[j].call(this, s);
                        if (item) {
                            addrow.call(this, item.label, item.color, pad);
                            pad = true;
                        } 
                    }
                }
            }
            series = s = null;
            delete series;
            delete s;
        }
        
        function addrow(label, color, pad, idx) {
            var rs = (pad) ? this.rowSpacing : '0';
            var tr = $('<tr class="jqplot-legend jqplot-cursor-legend"></tr>').appendTo(this._elem);
            tr.data('seriesIndex', idx);
            $('<td class="jqplot-legend jqplot-cursor-legend-swatch" style="padding-top:'+rs+';">'+
                '<div style="border:1px solid #cccccc;padding:0.2em;">'+
                '<div class="jqplot-cursor-legend-swatch" style="background-color:'+color+';"></div>'+
                '</div></td>').appendTo(tr);
            var td = $('<td class="jqplot-legend jqplot-cursor-legend-label" style="vertical-align:middle;padding-top:'+rs+';"></td>');
            td.appendTo(tr);
            td.data('seriesIndex', idx);
            if (this.escapeHtml) {
                td.text(label);
            }
            else {
                td.html(label);
            }
            tr = null;
            td = null;
        }
        return this._elem;
    };
    
})(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {
    // class $.jqplot.EnhancedLegendRenderer
    // Legend renderer which can specify the number of rows and/or columns in the legend.
    $.jqplot.EnhancedLegendRenderer = function(){
        $.jqplot.TableLegendRenderer.call(this);
    };
    
    $.jqplot.EnhancedLegendRenderer.prototype = new $.jqplot.TableLegendRenderer();
    $.jqplot.EnhancedLegendRenderer.prototype.constructor = $.jqplot.EnhancedLegendRenderer;
    
    // called with scope of legend.
    $.jqplot.EnhancedLegendRenderer.prototype.init = function(options) {
        // prop: numberRows
        // Maximum number of rows in the legend.  0 or null for unlimited.
        this.numberRows = null;
        // prop: numberColumns
        // Maximum number of columns in the legend.  0 or null for unlimited.
        this.numberColumns = null;
        // prop: seriesToggle
        // false to not enable series on/off toggling on the legend.
        // true or a fadein/fadeout speed (number of milliseconds or 'fast', 'normal', 'slow') 
        // to enable show/hide of series on click of legend item.
        this.seriesToggle = 'normal';
        // prop: disableIEFading
        // true to toggle series with a show/hide method only and not allow fading in/out.  
        // This is to overcome poor performance of fade in some versions of IE.
        this.disableIEFading = true;
        $.extend(true, this, options);
        
        if (this.seriesToggle) {
            $.jqplot.postDrawHooks.push(postDraw);
        }
    };
    
    // called with scope of legend
    $.jqplot.EnhancedLegendRenderer.prototype.draw = function() {
        var legend = this;
        if (this._elem) {
            this._elem.emptyForce();
            this._elem = null;
        }
        if (this.show) {
            var series = this._series;
			var s;
            var ss = 'position:absolute;';
            ss += (this.background) ? 'background:'+this.background+';' : '';
            ss += (this.border) ? 'border:'+this.border+';' : '';
            ss += (this.fontSize) ? 'font-size:'+this.fontSize+';' : '';
            ss += (this.fontFamily) ? 'font-family:'+this.fontFamily+';' : '';
            ss += (this.textColor) ? 'color:'+this.textColor+';' : '';
            ss += (this.marginTop != null) ? 'margin-top:'+this.marginTop+';' : '';
            ss += (this.marginBottom != null) ? 'margin-bottom:'+this.marginBottom+';' : '';
            ss += (this.marginLeft != null) ? 'margin-left:'+this.marginLeft+';' : '';
            ss += (this.marginRight != null) ? 'margin-right:'+this.marginRight+';' : '';
            this._elem = $('<table class="jqplot-table-legend" style="'+ss+'"></table>');
            if (this.seriesToggle) {
                this._elem.css('z-index', '3');
            }
        
            var pad = false, 
                reverse = false,
                nr, nc;
            if (this.numberRows) {
                nr = this.numberRows;
                if (!this.numberColumns){
                    nc = Math.ceil(series.length/nr);
                }
                else{
                    nc = this.numberColumns;
                }
            }
            else if (this.numberColumns) {
                nc = this.numberColumns;
                nr = Math.ceil(series.length/this.numberColumns);
            }
            else {
                nr = series.length;
                nc = 1;
            }
                
            var i, j, tr, td1, td2, lt, rs, div, div0, div1;
            var idx = 0;
            // check to see if we need to reverse
            for (i=series.length-1; i>=0; i--) {
                if (nc == 1 && series[i]._stack || series[i].renderer.constructor == $.jqplot.BezierCurveRenderer){
                    reverse = true;
                }
            }    
                
            for (i=0; i<nr; i++) {
                tr = $(document.createElement('tr'));
                tr.addClass('jqplot-table-legend');
                if (reverse){
                    tr.prependTo(this._elem);
                }
                else{
                    tr.appendTo(this._elem);
                }
                for (j=0; j<nc; j++) {
                    if (idx < series.length && series[idx].show && series[idx].showLabel){
                        s = series[idx];
                        lt = this.labels[idx] || s.label.toString();
                        if (lt) {
                            var color = s.color;
                            if (!reverse){
                                if (i>0){
                                    pad = true;
                                }
                                else{
                                    pad = false;
                                }
                            }
                            else{
                                if (i == nr -1){
                                    pad = false;
                                }
                                else{
                                    pad = true;
                                }
                            }
                            rs = (pad) ? this.rowSpacing : '0';

                            td1 = $(document.createElement('td'));
                            td1.addClass('jqplot-table-legend jqplot-table-legend-swatch');
                            td1.css({textAlign: 'center', paddingTop: rs});

                            div0 = $(document.createElement('div'));
                            div0.addClass('jqplot-table-legend-swatch-outline');
                            div1 = $(document.createElement('div'));
                            div1.addClass('jqplot-table-legend-swatch');
                            div1.css({backgroundColor: color, borderColor: color});

                            td1.append(div0.append(div1));

                            td2 = $(document.createElement('td'));
                            td2.addClass('jqplot-table-legend jqplot-table-legend-label');
                            td2.css('paddingTop', rs);
                    
                            if (this.escapeHtml){
                                td2.text(lt);
                            }
                            else {
                                td2.html(lt);
                            }
                            if (reverse) {
                                if (this.showLabels) {td2.prependTo(tr);}
                                if (this.showSwatches) {td1.prependTo(tr);}
                            }
                            else {
                                if (this.showSwatches) {td1.appendTo(tr);}
                                if (this.showLabels) {td2.appendTo(tr);}
                            }
                            
                            if (this.seriesToggle) {


                                var speed;
                                if (typeof(this.seriesToggle) == 'string' || typeof(this.seriesToggle) == 'number') {
                                    if (!$.jqplot.use_excanvas || !this.disableIEFading) {
                                        speed = this.seriesToggle;
                                    }
                                } 
                                if (this.showSwatches) {
                                    td1.bind('click', {series:s, speed:speed}, handleToggle);
                                    td1.addClass('jqplot-seriesToggle');
                                }
                                if (this.showLabels)  {
                                    td2.bind('click', {series:s, speed:speed}, handleToggle);
                                    td2.addClass('jqplot-seriesToggle');
                                }
                            }
                            
                            pad = true;
                        }
                    }
                    idx++;
                }
                
                td1 = td2 = div0 = div1 = null;   
            }
        }
        return this._elem;
    };

    var handleToggle = function (ev) {
        ev.data.series.toggleDisplay(ev);
        if (ev.data.series.canvas._elem.hasClass('jqplot-series-hidden')) {
            $(this).addClass('jqplot-series-hidden');
            $(this).next('.jqplot-table-legend-label').addClass('jqplot-series-hidden');
            $(this).prev('.jqplot-table-legend-swatch').addClass('jqplot-series-hidden');

        }
        else {
            $(this).removeClass('jqplot-series-hidden');
            $(this).next('.jqplot-table-legend-label').removeClass('jqplot-series-hidden');
            $(this).prev('.jqplot-table-legend-swatch').removeClass('jqplot-series-hidden');
        }
    };
    
    // called with scope of plot.
    var postDraw = function () {
        if (this.legend.renderer.constructor == $.jqplot.EnhancedLegendRenderer && this.legend.seriesToggle && this.legend._elem){
            var e = this.legend._elem.detach();
            this.eventCanvas._elem.after(e);
        }
    };
})(jQuery);
/**
 * jqPlot
 * Pure JavaScript plotting plugin using jQuery
 *
 *     "This code is unrestricted: you are free to use it however you like."
 * 
 */
(function($) {  
    /**
     * Class: $.jqplot.DateAxisRenderer
     * A plugin for a jqPlot to render an axis as a series of date values.
     * This renderer has no options beyond those supplied by the <Axis> class.
     * It supplies it's own tick formatter, so the tickOptions.formatter option
     * should not be overridden.
     * 
     * 
     * To use this renderer, include the plugin in your source
     * > <script type="text/javascript" language="javascript" src="plugins/jqplot.dateAxisRenderer.js"></script>
     * 
     * and supply the appropriate options to your plot
     * 
     * > {axes:{xaxis:{renderer:$.jqplot.DateAxisRenderer}}}
     * 
     * Dates can be passed into the axis in almost any recognizable value and 
     * will be parsed.  They will be rendered on the axis in the format
     * specified by tickOptions.formatString.  e.g. tickOptions.formatString = '%Y-%m-%d'.
     * 
     * Accecptable format codes 
     * are:
     * 
     * > Code    Result                  Description
     * >             == Years ==
     * > %Y      2008                Four-digit year
     * > %y      08                  Two-digit year
     * >             == Months ==
     * > %m      09                  Two-digit month
     * > %#m     9                   One or two-digit month
     * > %B      September           Full month name
     * > %b      Sep                 Abbreviated month name
     * >             == Days ==
     * > %d      05                  Two-digit day of month
     * > %#d     5                   One or two-digit day of month
     * > %e      5                   One or two-digit day of month
     * > %A      Sunday              Full name of the day of the week
     * > %a      Sun                 Abbreviated name of the day of the week
     * > %w      0                   Number of the day of the week (0 = Sunday, 6 = Saturday)
     * > %o      th                  The ordinal suffix string following the day of the month
     * >             == Hours ==
     * > %H      23                  Hours in 24-hour format (two digits)
     * > %#H     3                   Hours in 24-hour integer format (one or two digits)
     * > %I      11                  Hours in 12-hour format (two digits)
     * > %#I     3                   Hours in 12-hour integer format (one or two digits)
     * > %p      PM                  AM or PM
     * >             == Minutes ==
     * > %M      09                  Minutes (two digits)
     * > %#M     9                   Minutes (one or two digits)
     * >             == Seconds ==
     * > %S      02                  Seconds (two digits)
     * > %#S     2                   Seconds (one or two digits)
     * > %s      1206567625723       Unix timestamp (Seconds past 1970-01-01 00:00:00)
     * >             == Milliseconds ==
     * > %N      008                 Milliseconds (three digits)
     * > %#N     8                   Milliseconds (one to three digits)
     * >             == Timezone ==
     * > %O      360                 difference in minutes between local time and GMT
     * > %Z      Mountain Standard Time  Name of timezone as reported by browser
     * > %G      -06:00              Hours and minutes between GMT
     * >             == Shortcuts ==
     * > %F      2008-03-26          %Y-%m-%d
     * > %T      05:06:30            %H:%M:%S
     * > %X      05:06:30            %H:%M:%S
     * > %x      03/26/08            %m/%d/%y
     * > %D      03/26/08            %m/%d/%y
     * > %#c     Wed Mar 26 15:31:00 2008  %a %b %e %H:%M:%S %Y
     * > %v      3-Sep-2008          %e-%b-%Y
     * > %R      15:31               %H:%M
     * > %r      3:31:00 PM          %I:%M:%S %p
     * >             == Characters ==
     * > %n      \n                  Newline
     * > %t      \t                  Tab
     * > %%      %                   Percent Symbol 
     */
    $.jqplot.DateAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
        this.date = new $.jsDate();
    };

    var second = 1000;
    var minute = 60 * second;
    var hour = 60 * minute;
    var day = 24 * hour;
    var week = 7 * day;

    // these are less definitive
    var month = 30.4368499 * day;
    var year = 365.242199 * day;

    var daysInMonths = [31,28,31,30,31,30,31,30,31,30,31,30];
    // array of consistent nice intervals.  Longer intervals
    // will depend on days in month, days in year, etc.
    var niceFormatStrings = ['%M:%S.%#N', '%M:%S.%#N', '%M:%S.%#N', '%M:%S', '%M:%S', '%M:%S', '%M:%S', '%H:%M:%S', '%H:%M:%S', '%H:%M', '%H:%M', '%H:%M', '%H:%M', '%H:%M', '%H:%M', '%a %H:%M', '%a %H:%M', '%b %e %H:%M', '%b %e %H:%M', '%b %e %H:%M', '%b %e %H:%M', '%v', '%v', '%v', '%v', '%v', '%v', '%v'];
    var niceIntervals = [0.1*second, 0.2*second, 0.5*second, second, 2*second, 5*second, 10*second, 15*second, 30*second, minute, 2*minute, 5*minute, 10*minute, 15*minute, 30*minute, hour, 2*hour, 4*hour, 6*hour, 8*hour, 12*hour, day, 2*day, 3*day, 4*day, 5*day, week, 2*week];

    var niceMonthlyIntervals = [];

    function bestDateInterval(min, max, titarget) {
        // iterate through niceIntervals to find one closest to titarget
        var badness = Number.MAX_VALUE;
        var temp, bestTi, bestfmt;
        for (var i=0, l=niceIntervals.length; i < l; i++) {
            temp = Math.abs(titarget - niceIntervals[i]);
            if (temp < badness) {
                badness = temp;
                bestTi = niceIntervals[i];
                bestfmt = niceFormatStrings[i];
            }
        }

        return [bestTi, bestfmt];
    }
    
    $.jqplot.DateAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();
    $.jqplot.DateAxisRenderer.prototype.constructor = $.jqplot.DateAxisRenderer;
    
    $.jqplot.DateTickFormatter = function(format, val) {
        if (!format) {
            format = '%Y/%m/%d';
        }
        if(val === "")
        {
            return "";
        }
        return $.jsDate.strftime(val, format);
    };
    
    $.jqplot.DateAxisRenderer.prototype.init = function(options){
        // prop: tickRenderer
        // A class of a rendering engine for creating the ticks labels displayed on the plot, 
        // See <$.jqplot.AxisTickRenderer>.
        this.tickOptions.formatter = $.jqplot.DateTickFormatter;
        // prop: tickInset
        // Controls the amount to inset the first and last ticks from 
        // the edges of the grid, in multiples of the tick interval.
        // 0 is no inset, 0.5 is one half a tick interval, 1 is a full
        // tick interval, etc.
        this.tickInset = 0;
        // prop: drawBaseline
        // True to draw the axis baseline.
        this.drawBaseline = true;
        // prop: baselineWidth
        // width of the baseline in pixels.
        this.baselineWidth = null;
        // prop: baselineColor
        // CSS color spec for the baseline.
        this.baselineColor = null;
        this.daTickInterval = null;
        this._daTickInterval = null;
        
        $.extend(true, this, options);
        
        var db = this._dataBounds,
            stats, 
            sum,
            s,
            d,
            pd,
            sd,
            intv;
        
        // Go through all the series attached to this axis and find
        // the min/max bounds for this axis.
        for (var i=0; i<this._series.length; i++) {
            stats = {intervals:[], frequencies:{}, sortedIntervals:[], min:null, max:null, mean:null};
            sum = 0;
            s = this._series[i];
            d = s.data;
            pd = s._plotData;
            sd = s._stackData;
            intv = 0;
            
            for (var j=0; j<d.length; j++) { 
                if (this.name == 'xaxis' || this.name == 'x2axis') {
                    d[j][0] = new $.jsDate(d[j][0]).getTime();
                    pd[j][0] = new $.jsDate(d[j][0]).getTime();
                    sd[j][0] = new $.jsDate(d[j][0]).getTime();
                    if ((d[j][0] != null && d[j][0] < db.min) || db.min == null) {
                        db.min = d[j][0];
                    }
                    if ((d[j][0] != null && d[j][0] > db.max) || db.max == null) {
                        db.max = d[j][0];
                    }
                    if (j>0) {
                        intv = Math.abs(d[j][0] - d[j-1][0]);
                        stats.intervals.push(intv);
                        if (stats.frequencies.hasOwnProperty(intv)) {
                            stats.frequencies[intv] += 1;
                        }
                        else {
                            stats.frequencies[intv] = 1;
                        }
                    }
                    sum += intv;
                    
                }              
                else {
                    d[j][1] = new $.jsDate(d[j][1]).getTime();
                    pd[j][1] = new $.jsDate(d[j][1]).getTime();
                    sd[j][1] = new $.jsDate(d[j][1]).getTime();
                    if ((d[j][1] != null && d[j][1] < db.min) || db.min == null) {
                        db.min = d[j][1];
                    }
                    if ((d[j][1] != null && d[j][1] > db.max) || db.max == null) {
                        db.max = d[j][1];
                    }
                    if (j>0) {
                        intv = Math.abs(d[j][1] - d[j-1][1]);
                        stats.intervals.push(intv);
                        if (stats.frequencies.hasOwnProperty(intv)) {
                            stats.frequencies[intv] += 1;
                        }
                        else {
                            stats.frequencies[intv] = 1;
                        }
                    }
                }
                sum += intv;              
            }

            if (s.renderer.bands) {
                if (s.renderer.bands.hiData.length) {
                    var bd = s.renderer.bands.hiData;
                    for (var j=0, l=bd.length; j < l; j++) {
                        if (this.name === 'xaxis' || this.name === 'x2axis') {
                            bd[j][0] = new $.jsDate(bd[j][0]).getTime();
                            if ((bd[j][0] != null && bd[j][0] > db.max) || db.max == null) {
                                db.max = bd[j][0];
                            }                        
                        }              
                        else {
                            bd[j][1] = new $.jsDate(bd[j][1]).getTime();
                            if ((bd[j][1] != null && bd[j][1] > db.max) || db.max == null) {
                                db.max = bd[j][1];
                            }
                        }
                    }
                }
                if (s.renderer.bands.lowData.length) {
                    var bd = s.renderer.bands.lowData;
                    for (var j=0, l=bd.length; j < l; j++) {
                        if (this.name === 'xaxis' || this.name === 'x2axis') {
                            bd[j][0] = new $.jsDate(bd[j][0]).getTime();
                            if ((bd[j][0] != null && bd[j][0] < db.min) || db.min == null) {
                                db.min = bd[j][0];
                            }                       
                        }              
                        else {
                            bd[j][1] = new $.jsDate(bd[j][1]).getTime();
                            if ((bd[j][1] != null && bd[j][1] < db.min) || db.min == null) {
                                db.min = bd[j][1];
                            }
                        }
                    }
                }
            }
            
            var tempf = 0,
                tempn=0;
            for (var n in stats.frequencies) {
                stats.sortedIntervals.push({interval:n, frequency:stats.frequencies[n]});
            }
            stats.sortedIntervals.sort(function(a, b){
                return b.frequency - a.frequency;
            });
            
            stats.min = $.jqplot.arrayMin(stats.intervals);
            stats.max = $.jqplot.arrayMax(stats.intervals);
            stats.mean = sum/d.length;
            this._intervalStats.push(stats);
            stats = sum = s = d = pd = sd = null;
        }
        db = null;
        
    };
    
    // called with scope of an axis
    $.jqplot.DateAxisRenderer.prototype.reset = function() {
        this.min = this._options.min;
        this.max = this._options.max;
        this.tickInterval = this._options.tickInterval;
        this.numberTicks = this._options.numberTicks;
        this._autoFormatString = '';
        if (this._overrideFormatString && this.tickOptions && this.tickOptions.formatString) {
            this.tickOptions.formatString = '';
        }
        this.daTickInterval = this._daTickInterval;
    };
    
    $.jqplot.DateAxisRenderer.prototype.createTicks = function(plot) {
        // we're are operating on an axis here
        var ticks = this._ticks;
        var userTicks = this.ticks;
        var name = this.name;
        // databounds were set on axis initialization.
        var db = this._dataBounds;
        var iv = this._intervalStats;
        var dim = (this.name.charAt(0) === 'x') ? this._plotDimensions.width : this._plotDimensions.height;
        var interval;
        var min, max;
        var pos1, pos2;
        var tt, i;
        var threshold = 30;
        var insetMult = 1;
        
        var fontSize = "10px";
        if (this.tickOptions.fontData && (''+this.tickOptions.fontData.size).indexOf('px') !== -1)
        {
            fontSize = this.tickOptions.fontData.size;
        }
        else
        {
            var chartHeight = plot.target.height();
            if (chartHeight <= 300)
            {
                fontSize = "7px";
            }
            if (chartHeight <= 200)
            {
                fontSize = "5px";
            }
        }
		if(navigator.userAgent.indexOf("Firefox"))
		{
            this.tickOptions.fontFamily = "'Arial','Tahoma','Verdana','SimSun','Microsoft Yahei'";
		}
         if(!this.tickOptions.fontSize) {this.tickOptions.fontSize= fontSize;}
        
        if(plot.options.axes[this.name].numberTicks)
        {
            this.numberTicks = plot.options.axes[this.name].numberTicks;
        }

        var tickInterval = this.tickInterval;
        
        // if we already have ticks, use them.
        // ticks must be in order of increasing value.
        
        min = ((this.min != null) ? new $.jsDate(this.min).getTime() : db.min);
        max = ((this.max != null) ? new $.jsDate(this.max).getTime() : db.max);
        
		if (min === max)
        {
            max = new $.jsDate(max).add(1, 'day').getTime();
        }

        // see if we're zooming.  if we are, don't use the min and max we're given,
        // but compute some nice ones.  They will be reset later.

        var cursor = plot.plugins.cursor;

        if (cursor && cursor._zoom && cursor._zoom.zooming) {
            this.min = null;
            this.max = null;
        }

        var range = max - min;

        if (this.tickOptions == null || !this.tickOptions.formatString) {
            this._overrideFormatString = true;
        }
        
        if (userTicks.length) {
            function findValue(index, ticksArr)
            {
                var diff,
                    tLength = ticksArr.length - 1;
                
                if(ticksArr[tLength] !== "" && ticksArr[tLength - 1] !== "")
                {
                    diff = ticksArr[tLength] - ticksArr[tLength - 1];
                    return ticksArr[tLength] - tLength * diff;
                }
                return "";
            }
            // ticks could be 1D or 2D array of [val, val, ,,,] or [[val, label], [val, label], ...] or mixed
            for (i=0; i<userTicks.length; i++){
                var ut = userTicks[i] || "";
                var t = new this.tickRenderer(this.tickOptions);
                if (ut.constructor == Array) {
                    t.value = new $.jsDate(ut[0]).getTime();
                    t.label = ut[1];
                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    t.setTick(t.value, this.name);
                    this._ticks.push(t);
                }
                
                else {
                    if(ut === "")
                    {
                        t.value = findValue(i, userTicks);
                        t.label = ' ';
                    }
                    else
                    {
                        t.value = new $.jsDate(ut).getTime();
                    }

                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    t.setTick(t.value, this.name);
                    this._ticks.push(t);
                }
            }
            this.numberTicks = userTicks.length;
            this.min = this._ticks[0].value;
            this.max = this._ticks[this.numberTicks-1].value;
            this.daTickInterval = [(this.max - this.min) / (this.numberTicks - 1)/1000, 'seconds'];
        }


        // if user specified min and max are null, we set those to make best ticks.
        else if (this.min == null && this.max == null) {
            var opts = $.extend(true, {}, this.tickOptions, {name: this.name, value: null});
            // want to find a nice interval 
            var nttarget,
                titarget;

            // if no tickInterval or numberTicks options specified,  make a good guess.
            if (!this.tickInterval && !this.numberTicks) {
                var tdim = Math.max(dim, threshold+1);
                // how many ticks to put on the axis?
                // date labels tend to be long.  If ticks not rotated,
                // don't use too many and have a high spacing factor.
                // If we are rotating ticks, use a lower factor.
                var spacingFactor = 115;
                if (this.tickRenderer === $.jqplot.CanvasAxisTickRenderer && this.tickOptions.angle) {
                    spacingFactor = 115 - 40 * Math.abs(Math.sin(this.tickOptions.angle/180*Math.PI));
                }

                nttarget =  Math.ceil((tdim-threshold)/spacingFactor + 1);
                titarget = (max - min) / (nttarget - 1);
            }

            // If tickInterval is specified, we'll try to honor it.
            // Not gauranteed to get this interval, but we'll get as close as
            // we can.
            // tickInterval will be used before numberTicks, that is if
            // both are specified, numberTicks will be ignored.
            else if (this.tickInterval) {
                titarget = this.tickInterval;
            }

            // if numberTicks specified, try to honor it.
            // Not gauranteed, but will try to get close.
            else if (this.numberTicks) {
                nttarget = this.numberTicks;
                titarget = (max - min) / (nttarget - 1);
            }

            // If we can use an interval of 2 weeks or less, pick best one
            if (true) {
                var ret = bestDateInterval(min, max, titarget);
                var tempti = ret[0];
                if(typeof nttarget !== "undefined" && typeof titarget !== "undefined")
                {
                    tempti = titarget;
                    this.min = min;
                    this.max = max;
                }
                else
                {
                    min = Math.floor(min/tempti) * tempti;
                    min = new $.jsDate(min);
                    min = min.getTime() + min.getUtcOffset();

                    nttarget = Math.ceil((max - min) / tempti) + 1;
                    this.min = min;
                    this.max = min + (nttarget - 1) * tempti;
                }
                this._autoFormatString = ret[1];
                
                // if max is less than max, add an interval
                if (this.max < max) {
                    this.max += tempti;
                    nttarget += 1;
                }
                this.tickInterval = tempti;
                this.numberTicks = nttarget;

                var valuesArray = [],tempRend = new this.tickRenderer(opts),prevtt = null;
                if (this._overrideFormatString && this._autoFormatString != '') {
                        tempRend.formatString = this._autoFormatString;
                    }
                //Find out duplicate ticks
                for (var i=0; i<nttarget; i++) {
                    var vall = this.min + i * tempti;
                    vall = tempRend.formatter(tempRend.formatString,vall);
                    if (prevtt === null)
                    {
                        prevtt = vall;
                        valuesArray.push(vall);
                    }
                    else
                    {
                        if (prevtt !== vall)
                        {
                            valuesArray.push(vall);
                            prevtt = vall;
                        }
                    }
                }
                tempRend = null;
                if (valuesArray.length > 1)
                {
                    //Change number ticks here
                    this.numberTicks = valuesArray.length;
                    nttarget = this.numberTicks;
                    titarget = (max - min) / (nttarget - 1);
                    ret = bestDateInterval(min, max, titarget);
                    tempti = ret[0];
                    if(typeof nttarget !== "undefined" && typeof titarget !== "undefined")
                    {
                        tempti = titarget;
                        this.min = min;
                        this.max = max;
                    }
                    else
                    {
                        min = Math.floor(min/tempti) * tempti;
                        min = new $.jsDate(min);
                        min = min.getTime() + min.getUtcOffset();

                        nttarget = Math.ceil((max - min) / tempti) + 1;
                        this.min = min;
                        this.max = min + (nttarget - 1) * tempti;
                    }
                    this._autoFormatString = ret[1];
                    
                    // if max is less than max, add an interval
                    if (this.max < max) {
                        this.max += tempti;
                        nttarget += 1;
                    }
                    this.tickInterval = tempti;
                    this.numberTicks = nttarget;
                }
                
                for (var i=0; i<nttarget; i++) 
                {
                    opts.value = this.min + i * tempti;
                    t = new this.tickRenderer(opts);
                    
                    if (this._overrideFormatString && this._autoFormatString != '') {
                        t.formatString = this._autoFormatString;
                    }
                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    this._ticks.push(t);
                }

                insetMult = this.tickInterval;
            }

            // should we use a monthly interval?
            else if (titarget <= 9 * month) {

                this._autoFormatString = '%v';

                // how many months in an interval?
                var intv = Math.round(titarget/month);
                if (intv < 1) {
                    intv = 1;
                }
                else if (intv > 6) {
                }

                // figure out the starting month and ending month.
                var mstart = new $.jsDate(min).setDate(1).setHours(0,0,0,0);

                // See if max ends exactly on a month
                var tempmend = new $.jsDate(max);
                var mend = new $.jsDate(max).setDate(1).setHours(0,0,0,0);

                if (tempmend.getTime() !== mend.getTime()) {
                    mend = mend.add(1, 'month');
                }

                var nmonths = mend.diff(mstart, 'month');


                this.min = mstart.getTime();
                this.max = mend.getTime();
                this.max = mstart.clone().add((nttarget - 1) * intv, 'month').getTime();
                this.numberTicks = nttarget;

                for (var i=0; i<nttarget; i++) {
                    if (i === 0) {
                        opts.value = mstart.getTime();
                    }
                    else {
                        opts.value = mstart.add(intv, 'month').getTime();
                    }
                    t = new this.tickRenderer(opts);
                    
                    if (this._overrideFormatString && this._autoFormatString != '') {
                        t.formatString = this._autoFormatString;
                    }
                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    this._ticks.push(t);
                }

                insetMult = intv * month;
            }

            // use yearly intervals
            else {

                this._autoFormatString = '%v';

                // how many years in an interval?
                var intv = Math.round(titarget/year);
                if (intv < 1) {
                    intv = 1;
                }

                // figure out the starting and ending years.
                var mstart = new $.jsDate(min).setMonth(0, 1).setHours(0,0,0,0);
                var mend = new $.jsDate(max).add(1, 'year').setMonth(0, 1).setHours(0,0,0,0);

                var nyears = mend.diff(mstart, 'year');

                nttarget = Math.ceil(nyears/intv) + 1;

                this.min = mstart.getTime();
                this.max = mstart.clone().add((nttarget - 1) * intv, 'year').getTime();
                this.numberTicks = nttarget;

                for (var i=0; i<nttarget; i++) {
                    if (i === 0) {
                        opts.value = mstart.getTime();
                    }
                    else {
                        opts.value = mstart.add(intv, 'year').getTime();
                    }
                    t = new this.tickRenderer(opts);
                    
                    if (this._overrideFormatString && this._autoFormatString != '') {
                        t.formatString = this._autoFormatString;
                    }
                    if (!this.showTicks) {
                        t.showLabel = false;
                        t.showMark = false;
                    }
                    else if (!this.showTickMarks) {
                        t.showMark = false;
                    }
                    this._ticks.push(t);
                }

                insetMult = intv * year;
            }
        }

        
        else {      
            if (name == 'xaxis' || name == 'x2axis') {
                dim = this._plotDimensions.width;
            }
            else {
                dim = this._plotDimensions.height;
            }
            
            // if min, max and number of ticks specified, user can't specify interval.
            if (this.min != null && this.max != null && this.numberTicks != null) {
                this.tickInterval = null;
            }
            
            // if user specified a tick interval, convert to usable.
            if (this.tickInterval != null)
            {
                // if interval is a number or can be converted to one, use it.
                // Assume it is in SECONDS!!!
                if (Number(this.tickInterval)) {
                    this.daTickInterval = [Number(this.tickInterval), 'seconds'];
                }
                // else, parse out something we can build from.
                else if (typeof this.tickInterval == "string") {
                    var parts = this.tickInterval.split(' ');
                    if (parts.length == 1) {
                        this.daTickInterval = [1, parts[0]];
                    }
                    else if (parts.length == 2) {
                        this.daTickInterval = [parts[0], parts[1]];
                    }
                }
            }
            
            // if min and max are same, space them out a bit
            if (min == max) {
                var adj = 24*60*60*500;  // 1/2 day
                min -= adj;
                max += adj;
            }

            range = max - min;
            
            var optNumTicks = 2 + parseInt(Math.max(0, dim-100)/100, 10);
            
            
            var rmin, rmax;
            
            rmin = (this.min != null) ? new $.jsDate(this.min).getTime() : min - range/2*(this.padMin - 1);
            rmax = (this.max != null) ? new $.jsDate(this.max).getTime() : max + range/2*(this.padMax - 1);
            this.min = rmin;
            this.max = rmax;
            range = this.max - this.min;
            
            if (this.numberTicks !== null && this._numberTicks !== this.numberTicks)
            {
                //This code is added, when number ticks not specified in axis, then interval,number ticks and max should not change
                this._numberTicks = this.numberTicks;
            }
            
            if (this.numberTicks == null){
                if (!this._numberTicks)
                {
                    //This code is added, when number ticks not specified in axis, then interval,number ticks and max should not change
                    // if tickInterval is specified by user, we will ignore computed maximum.
                    // max will be equal or greater to fit even # of ticks.
                    if (this.daTickInterval != null) {
                        var nc = new $.jsDate(this.max).diff(this.min, this.daTickInterval[1], true);
                        this.numberTicks = Math.ceil(nc/this.daTickInterval[0]) +1;
                        this.max = new $.jsDate(this.min).add((this.numberTicks-1) * this.daTickInterval[0], this.daTickInterval[1]).getTime();
                    }
                    else if (dim > 200) {
                        this.numberTicks = parseInt(3+(dim-200)/100, 10);
                    }
                    else {
                        this.numberTicks = 2;
                    }
                }
                else
                {
                    this.numberTicks = this._numberTicks;
                }
            }
            
            insetMult = range / (this.numberTicks-1)/1000;

                this.daTickInterval = [insetMult, 'seconds'];
            


            for (var i=0; i<this.numberTicks; i++){
                var min = new $.jsDate(this.min);
                tt = min.add(i*this.daTickInterval[0], this.daTickInterval[1]).getTime();
                var t = new this.tickRenderer(this.tickOptions);
                if (!this.showTicks) {
                    t.showLabel = false;
                    t.showMark = false;
                }
                else if (!this.showTickMarks) {
                    t.showMark = false;
                }
                t.setTick(tt, this.name);
                this._ticks.push(t);
            }
        }

        if (this.tickInset) {
            this.min = this.min - this.tickInset * insetMult;
            this.max = this.max + this.tickInset * insetMult;
        }

        if (this._daTickInterval == null) {
            this._daTickInterval = this.daTickInterval;    
        }

        ticks = null;
    };
   
})(jQuery);


/* Copyright Huawei Technologies Co., Ltd. Copyright 2011-2012,  All rights reserved
 * Version     : tiny-TRP-201304220816-
 * Created     : 
 * Description : tiny and web components
 */


(function () {
	/**
	 * [calculate expression value in scope
	 * @param  {[type]} scope  [description]
	 * @param  {[type]} $parse [description]
	 * @param  {[type]} expr   [description]
	 * @return {[type]}        [description]
	 */
	function calculateExpress(scope,attrs,attname,$parse,expr){
		var parentGet = $parse(expr);
			if(parentGet){
				value =  parentGet(scope.$parent);
				if(value!==undefined){
					return value;
				}else{
					return  null;
				}
			}else{
				return null;
		}	
	}
	function isLegitExpression($parse,expression){
		try{
			$parse(expression);
			return true;
		}catch(e){
			return false;
		}
	}
	var tinyUtilModule = angular.module('tiny.util', [])
	.factory("$calculateExpress",['$parse',function($parse){
		return function(attname,scope){
			var parentGet = $parse(attname);
			if(parentGet){
				value =  parentGet(scope.$parent);
				if(value!==undefined){
					return value;
				}else{
					return  null;
				}
			}else{
				return null;
		}	
		}
	}])
	.factory("$isLegitExpression",['$parse',function($parse){
		return function(expression){
			return isLegitExpression($parse,expression);
		}
	}])
	.factory("$tinyGetWidgetAttr",['$parse',function($parse){
		return function(attname,scope, attrs,parsev){
			//1:calculateExpress value
			//2.1:use Express value eval in scope.$parent 
			//2.2:if Express value eval in scope.$parent  has value ,return 
			//2.3:return  Express value
			//3.1:use textvalue eval in scope.$parent 
			//3.2:if textvalue eval in scope.$parent  has value ,return
			//3.3:return textvalue
			var textvalue,parentvalue,value,exprvalue,
			textvalue = attrs[attname];
			//prejudge textvalue is a right expression , like  5%,5- all are not correct expression ,angular run will throw exception 
			if(!isLegitExpression($parse,textvalue)){
				return textvalue;
			}

                    	try
                    	{
                        	exprvalue = calculateExpress(scope,attrs,attname,$parse,textvalue);
                    	}
                    	catch(e)
                    	{
                        	//angular expression error returns value as it is
                        	return textvalue;
                    	}
                        if(exprvalue === 0)
                        {
                            return exprvalue;
                        }

			if(exprvalue && !(/\s/g.test(exprvalue)))
            {
                // below line need to change. We have to avoid empty if block.
			}
            else
            {
                exprvalue = textvalue;
			}

            try
            {
                parentvalue = scope.$parent.$eval(exprvalue);
            }
            catch(e)
            {
                return exprvalue;
            }
            if(parentvalue || "" == parentvalue)
            {
                return parentvalue;
            }
            else
            {
                return exprvalue;
            }
		};
	}]).
	factory("$tinyGetWidgetAttrFunc",['$parse',function($parse){
		return function(attname,scope, attrs){
			//1:calculateExpress value
			//2.1:use Express value eval in scope.$parent 
			//2.2:if Express value eval in scope.$parent  has value ,return 
			//2.3:return  Express value
			//3.1:use textvalue eval in scope.$parent 
			//3.2:if textvalue eval in scope.$parent  has value ,return
			//3.3:return textvalue
			var textvalue,parentvalue,value,exprvalue,
			textvalue = attrs[attname];
			if(!isLegitExpression($parse,textvalue)){
				return null;
			}

			exprvalue = calculateExpress(scope,attrs,attname,$parse,textvalue);
			if(typeof(exprvalue)==="function"){
				return exprvalue;
			}else{
				parentvalue = scope.$parent.$eval(textvalue);	
				if(typeof(parentvalue)==="function"){
					return parentvalue;
				}else{
					return null;
				}
			}
		};
	}]);
})();

(function($)
{
	$.fn.jangleFeatureDetection = function( )
	{
		// JS properites to check
		var props = [ 'transformProperty', 'WebkitTransform', 'MozTransform',
				'OTransform', 'msTransform' ];
        var jb = navigator.userAgent.toLowerCase();
        if (/msie/.test(jb))
        {
            $(this).css({"font-family":"'Arial','Tahoma','Verdana','SimSun','Microsoft Yahei'"});
        }
		// element to test
		elStyle = this[0] ? this[0].style : {};

		// test for CSS transform support
		for ( var i in props)
		{
			if (elStyle[props[i]] !== undefined)
			{
				return true;
			}
		}

		return false;
	};

	$.fn.jangleCSSTransform = function(deg)
	{
		// css transform init
		var styleTransform,

		// CSS vendor prefixes and JS properites
		prefixes = [ '-khtml-', '-moz-', '-ms-', '-o-', '-webkit-' ];

		for ( var i = 0; i <= prefixes.length; i++)
		{
			styleTransform = prefixes[i] ? prefixes[i] + 'transform'
					: 'transform';

			this.css(styleTransform, 'rotate(' + deg + 'deg)');

			// jQuery issue with -ms- prefix - http://bugs.jquery.com/ticket/8346
			if (prefixes[i] === '-ms-')
			{
				$(this).css({
					msTransform : 'rotate(' + deg + 'deg)'
				});
			}
		}

		return this;
	};

	$.fn.jangleIETransform = function(deg)
	{
		// crazy math algorithm voodoo - see http://msdn.microsoft.com/en-us/library/ms533014%28VS.85%29.aspx
		// and http://www.boogdesign.com/b2evo/index.php/element-rotation-ie-matrix-filter?blog=2
		var rotation = Math.PI * (deg < 0 ? deg + 360 : deg) / 180, cos = Math
				.cos(rotation), sin = Math.sin(rotation),

		// ie matrix offsets
		setOffsets = function(img)
		{ // set IE origin to match other browsers - http://blog.siteroller.net/cross-browser-css-rotation
			if (img.style.position !== 'absolute' &&
            img.style.position !== 'fixed')
			{
				img.style.position = 'relative';
				img.style.top = (img.clientHeight - img.offsetHeight) / 2;
				img.style.left = (img.clientWidth - img.offsetWidth) / 2;
			}
		};

		return this.each(function( )
		{
			this.style.filter = "progid:DXImageTransform.Microsoft.Matrix(M11=" +
            cos + ",M12=" + (-sin) + ",M21=" + sin + ",M22=" + cos +
            ",SizingMethod='auto expand')";
			setOffsets(this);
		});
	};

	$.fn.jangle = function(options)
	{
		// set defaults
		var defaults = {
			continuous : false, // account for current angle
			degrees : 0, // initialize degrees
			duration : 0, // length of time (in m/s) the animation takes
			interval : 100
		// length of time (in m/s) each rotation occurs
		},

		cssTransforms = this.jangleFeatureDetection();

		// overwrite default options with those set OR copy defaults
		settings = typeof options === 'object' ? $.extend(defaults, options)
				: defaults; 

		// make sure properties are integers or keep as is
		settings.degrees = (parseInt(options, 10) || settings.degrees) % 360; // set degrees if 'options' is an integer

		this[cssTransforms ? 'jangleCSSTransform' : 'jangleIETransform']
				(settings.degrees);

		// don't be the weakest link (preserve chainability)
		return this;
	};
})(jQuery);

/*
 * jqconflict.js - This file is added to avoid jQuery version conflicts
 *
 */
if (typeof tiny === 'undefined')
{
    tiny = {};
}
if (typeof tiny.charts === 'undefined')
{
    tiny.charts = {};
} 

(function($) {
    tiny.charts.legendrenderer = function(streamchart) {
        var self = this;
        var streamchartRef = streamchart;

        self.getContainer = function() {
            var id = 'temp_legendid';
            if (!document.getElementById(id)) {
                var tmp = $(document.createElement('div'));
                tmp.attr('id', id);
                tmp.css({
                    visibility : 'hidden',
                    position : 'absolute'
                });
                document.body.appendChild(tmp[0]);
            }
            return $(document.getElementById(id));
        };

        self.LegendRendererDrawCallBack = function(offsets, plot) {
            this.seriesToggle = false;
            var legend = this;
            if (this._elem) {
                this._elem.emptyForce();
                this._elem = null;
            }
            if (this.show) {
                var series = this._series;
                var s;
                var ss = 'position:absolute;';
                ss += (this.background) ? 'background:' + this.background + ';' : '';
                ss += (this.border) ? 'border:' + this.border + ';' : '';
                ss += (this.fontSize) ? 'font-size:' + this.fontSize + ';' : '';
                ss += (this.fontFamily) ? 'font-family:' + this.fontFamily + ';' : '';
                ss += (this.textColor) ? 'color:' + this.textColor + ';' : '';
                ss += (this.marginTop !== null) ? 'margin-top:' + this.marginTop + ';' : '';
                ss += (this.marginBottom !== null) ? 'margin-bottom:' + this.marginBottom + ';' : '';
                ss += (this.marginLeft !== null) ? 'margin-left:' + this.marginLeft + ';' : '';
                ss += (this.marginRight !== null) ? 'margin-right:' + this.marginRight + ';' : '';
                ss = ss + ' border-collapse: collapse;table-layout: fixed';
                this._elem = $('<table class="jqplot-table-legend tiny-table-legend" style="' + ss + '"><tbody style="border-collapse: collapse;"></tbody></table>');
                if (this.seriesToggle) {
                    this._elem.css('z-index', '3');
                }

                var pad = false, nr, nc;

                var count = 0;
                var i, j, tr, td1, td2, lt, rs, div, div0, div1, sId, maxlegendTextWidth = this._plotDimensions.width - 60;
                //60 deducted in maxlegend width,because margin for legend left
                // and right is considedered.
                var idx = 0;
                if (this.location === 'e' || this.location === 'w') {
                    maxlegendTextWidth = (40 * maxlegendTextWidth / 100);
                }

                var legendOptions = plot.options.legendOptions;
                var legendObject = legendOptions.legendObject;
                var legendRowSpacing = legendObject.rowSpacing;
                if (plot.options.islinechart) {
                    if (legendObject.seriesToggle) {
                        this.seriesToggle = true;
                    }
                }
                if (legendRowSpacing === null || isNaN(legendRowSpacing) || legendRowSpacing <= 0) {
                    legendRowSpacing = null;
                }
                // The number of columns is not specifed by the user, hence try
                // to auto calculate the number of columns and align the legend
                // accordingly.
                if (this.numberColumns === -1) {
                    // If the location is not in south or north, no need to have
                    // the auto column calculation, there will be only one column
                    if (this.location !== 's' && this.location !== 'n') {
                        this.numberColumns = 1;
                    } else {
                        if (!legendObject.auto) {
                            var tempLabel = null;
                            var cusLegendItemList = legendObject.cusLegendItemList;
                            var index = 0;

                            var legendItemList = legendObject.legendItemList;
                            var legendItemMaxWidth = 0;
                            if (legendItemList && legendItemList.length > 0) {
                                for ( index = 0; index < legendItemList.length; index++) {
                                    var legendSeriesId = legendItemList[index].getSeriesId();
                                    if (legendItemList[index].renderer) {
                                        this.escapeHTML = false;
                                        var mtd = legendItemList[index].renderer;
                                        tempLabel = mtd(index);

                                        // Find the width of the possible biggest
                                        // label
                                        var tempcont = self.getContainer();
                                        var singleCharWidth = 11;
                                        tempcont.html(tempLabel);
                                        var legendContentLen = tempcont.width() + 20;
                                        // 20 added for the swatch space.
                                        if (legendItemMaxWidth < legendContentLen) {
                                            legendItemMaxWidth = legendContentLen;
                                        }
                                        tempcont = null;
                                    }
                                }
                                // Divide the total space of the chart with the
                                // max possible legend label to find the max
                                // possible columns
                                var tempColCount = maxlegendTextWidth / legendItemMaxWidth;
                                this.numberColumns = Math.floor(tempColCount);
                            } else if (cusLegendItemList && cusLegendItemList.length > 0) {
                                for ( index = 0; index < cusLegendItemList.length; index++) {
                                    var customImage;
                                    if (cusLegendItemList[index]) {
                                        this.escapeHTML = false;
                                        tempLabel = cusLegendItemList[index].getInnerText();
                                        customImage = cusLegendItemList[index].getImage();

                                        // Find the width of the possible biggest
                                        // label
                                        var tempcont = $('<div style="visibility:hidden;position:absolute;"><table><tr>' + '</tr></table></div>');
                                        if (customImage) {
                                            var imaggg = new Image();
                                            imaggg.src = customImage;
                                            var tempDiv = $('<td><div></div></td>');
                                            tempDiv.append(imaggg);
                                            tempDiv.css('margin-right', '10px');
                                            tempcont.append(tempDiv);
                                        }
                                        var tempLblTd = $('<td>' + tempLabel + '</td>');
                                        tempcont.append(tempLblTd);
                                        $('body').append(tempcont);
                                        var legendContentLen = tempcont.width();
                                        if (legendItemMaxWidth < legendContentLen) {
                                            legendItemMaxWidth = legendContentLen;
                                        }
                                        tiny.garbageCollect(tempcont, true);
                                        tempcont = null;
                                    }
                                }
                                // Divide the total space of the chart with the
                                // max possible legend label to find the max
                                // possible columns
                                var tempColCount = maxlegendTextWidth / legendItemMaxWidth;
                                this.numberColumns = Math.floor(tempColCount);
                            }

                        } else {
                            var tempMaxLegendLabel = '';
                            // Find the biggest label for the legend (counting
                            // the number of label characters)
                            for (var cnt = 0; cnt < series.length; cnt++) {
                                if (series[cnt].showLabel) {
                                    s = series[cnt];
                                    lt = this.labels[cnt] || s.label.toString();
                                    var tempLbl = lt + '';
                                    if (tempMaxLegendLabel.length < tempLbl.length) {
                                        tempMaxLegendLabel = tempLbl;
                                    }
                                }
                            }
                            // Find the width of the possible biggest label
                            var tempcont = self.getContainer();
                            var singleCharWidth = 11;
                            tempcont.html(tempMaxLegendLabel);
                            var legendContentLen = tempcont.width() + 20;
                            // 20 added for the swatch space.
                            tiny.garbageCollect(tempcont, true);
                            tempcont = null;
                            // Divide the total space of the chart with the max
                            // possible legend label to find the max possible
                            // columns
                            var tempColCount = maxlegendTextWidth / legendContentLen;
                            this.numberColumns = Math.floor(tempColCount);
                        }
                    }
                }
                if (this.numberColumns) {
                    nc = this.numberColumns;
                    nr = Math.ceil(series.length / this.numberColumns);
                } else {
                    nr = series.length;
                    nc = 1;
                }

                for ( i = 0; i < nr; i++) {
                    tr = $(document.createElement('tr'));
                    tr.addClass('jqplot-table-legend');
                    tr.appendTo(this._elem);
                    for ( j = 0; j < nc; j++) {
                        if (idx < series.length
                        && series[idx].showLabel) {
                            s = series[idx];
                            lt = this.labels[idx] || s.label.toString();
                            if (!legendObject.auto) {
                                var tempLabel = null;

                                var cusLegendItemList = legendObject.cusLegendItemList;
                                var index = 0;

                                var legendItemList = legendObject.legendItemList;
                                if (legendItemList) {
                                    for ( index = 0; index < legendItemList.length; index++) {
                                        var legendSeriesId = legendItemList[index].getSeriesId();

                                        if (legendOptions.seriesIdIndexMap && legendOptions.seriesIdIndexMap[legendSeriesId] == idx && legendItemList[index].getLegendItemRenderer()) {
                                            this.escapeHTML = false;
                                            var mtd = legendItemList[index].getLegendItemRenderer();
                                            tempLabel = mtd(idx);
                                            break;
                                        }
                                    }
                                }
                                var customLegendItemFound = false, customImage;

                                if (!tempLabel) {
                                    if (cusLegendItemList) {
                                        if (cusLegendItemList[idx]) {
                                            this.escapeHTML = false;
                                            tempLabel = cusLegendItemList[idx].getInnerText();
                                            customImage = cusLegendItemList[idx].getImage();
                                            customLegendItemFound = true;
                                            tr.attr('id', 'customItem' + cusLegendItemList[idx].id);
                                            if (!cusLegendItemList[idx].getDisplay()) {
                                                tr.hide();
                                            } else {
                                                tr.show();
                                            }
                                        }
                                    }
                                }
                                if (!tempLabel) {
                                    idx++;
                                    continue;
                                } else {
                                    lt = tempLabel;
                                }
                            }

                            if (lt) {
                                var color = s.color;
                                if (i > 0) {
                                    pad = true;
                                } else {
                                    pad = false;
                                }
                                rs = (pad) ? this.rowSpacing : '0';

                                td1 = $(document.createElement('td'));
                                td1.addClass('jqplot-table-legend ' + 'jqplot-table-legend-swatch');
                                td1.css({
                                    textAlign : 'center',
                                    paddingTop : rs
                                });
                                td1.attr('id', 'legend__swatch__' + s.seriesid);

                                div0 = $(document.createElement('div'));
                                div0.addClass('jqplot-table-legend-swatch-outline');
                                div1 = $(document.createElement('div'));
                                div1.addClass('jqplot-table-legend-swatch');
                                if (customLegendItemFound && customImage) {
                                    //do not add background color and border
                                    // color
                                } else {
                                    div1.css({
                                        backgroundColor : color,
                                        borderColor : color
                                    });
                                }
                                var ie8GradHandlerFilter = '';
                                function addColorStopsToGradient(seriesIndex, color) {
                                    function rgb(a) {
                                        var o = a.toLowerCase();
                                        return [parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16), parseInt(o.slice(4), 16)];
                                    }

                                    function shade(a, b) {
                                        var v = [], i;
                                        for ( i = 0; i < 3; i++) {
                                            v[i] = Math.round(a[i] * b);
                                            if (v[i] > 255) {
                                                v[i] = 255;
                                            }
                                            if (v[i] < 0) {
                                                v[i] = 0;
                                            }
                                        }
                                        return v;
                                    }

                                    function hex(a) {
                                        var f = _hex;
                                        return f(a[0]) + f(a[1]) + f(a[2]);
                                    }

                                    function _hex(a) {
                                        return ('0' + a.toString(16)).slice(-2);
                                    }

                                    function light(cc) {
                                        return '#' + hex(shade(rgb(cc), 0.7));
                                    }

                                    var seriesId;
                                    var startEndColorElements = [];
                                    for (var sId in legendOptions.seriesIdIndexMap) {
                                        if (legendOptions.seriesIdIndexMap[sId] === seriesIndex) {
                                            seriesId = sId;
                                            break;
                                        }
                                    }
                                    var seriesListArray = legendOptions.seriesList;
                                    var seriesSection = null;
                                    for (var i = 0; i < seriesListArray.length; i++) {
                                        if (seriesListArray[i].id === seriesId) {
                                            seriesSection = seriesListArray[i].section;
                                        }
                                    }
                                    var gradientCSS = '-linear-gradient(right,', colorArray = [];
                                    if (seriesSection && seriesSection.length > 0) {
                                        var seriesElement = seriesSection[0];
                                        if (seriesElement && seriesElement.gradient) {
                                            var colorStopVal = -1;
                                            for (var colorStop in seriesElement.gradient) {
                                                colorArray[colorArray.length] = parseFloat(colorStop);
                                            }
                                            colorArray.sort(function(a, b) {
                                                return b - a;
                                            });
                                            for (var k = 0; k < colorArray.length; k++) {
                                                gradientCSS += seriesElement.gradient[colorArray[k]] + ' ' + (100 - parseFloat(colorArray[k]) * 100) + '%,';
                                            }
                                            startEndColorElements[0] = seriesElement.gradient[colorArray[0]];
                                            startEndColorElements[1] = seriesElement.gradient[colorArray[colorArray.length - 1]];

                                        } else if (seriesElement && seriesElement.borderStyle) {
                                            gradientCSS += seriesElement.borderStyle + ' 100%,';
                                        } else {
                                            var tempgradient = {
                                                1 : plot.seriesDefGradColors[seriesIndex],
                                                0 : plot.seriesColors[seriesIndex]
                                            };
                                            for (var colorStop in tempgradient) {
                                                colorArray[colorArray.length] = parseFloat(colorStop);
                                            }
                                            colorArray.sort(function(a, b) {
                                                return b - a;
                                            });
                                            for (var k = 0; k < colorArray.length; k++) {
                                                gradientCSS += tempgradient[colorArray[k]] + ' ' + (100 - parseFloat(colorArray[k]) * 100) + '%,';
                                            }
                                            startEndColorElements[0] = tempgradient[colorArray[0]];
                                            startEndColorElements[1] = tempgradient[colorArray[colorArray.length - 1]];
                                        }
                                    } else {
                                        var tempgradient = {
                                            1 : plot.seriesDefGradColors[seriesIndex],
                                            0 : plot.seriesColors[seriesIndex]
                                        };
                                        for (var colorStop in tempgradient) {
                                            colorArray[colorArray.length] = parseFloat(colorStop);
                                        }
                                        colorArray.sort(function(a, b) {
                                            return b - a;
                                        });
                                        for (var k = 0; k < colorArray.length; k++) {
                                            gradientCSS += tempgradient[colorArray[k]] + ' ' + (100 - parseFloat(colorArray[k]) * 100) + '%,';
                                        }
                                        startEndColorElements[0] = tempgradient[colorArray[0]];
                                        startEndColorElements[1] = tempgradient[colorArray[colorArray.length - 1]];
                                    }
                                    gradientCSS = gradientCSS.substring(0, gradientCSS.length - 1);
                                    gradientCSS += ')';

                                    if (startEndColorElements.length > 0) {
                                        ie8GradHandlerFilter = 'progid:DXImageTransform.Microsoft.gradient(startColorstr="' + startEndColorElements[1] + '", endColorstr="' + startEndColorElements[0] + '",GradientType=1)';
                                        startEndColorElements = [];
                                    } else {
                                        ie8GradHandlerFilter = 'progid:DXImageTransform.Microsoft.gradient(startColorstr="' + color + '", endColorstr="' + color + '")';
                                    }

                                    return gradientCSS;
                                }

                                var grdientEleCss = addColorStopsToGradient(s.index, color);
                                if (customLegendItemFound && customImage) {
                                    var imaggg = new Image();
                                    imaggg.src = customImage;
                                    div1.append(imaggg);
                                    div1.css('margin-right', '10px');
                                } else {
                                    div1.css('background-image', '-webkit' + grdientEleCss);
                                    div1.css('background-image', '-moz' + grdientEleCss);
                                    div1.css('border', 'solid 1px ' + color);
                                    if (ie8GradHandlerFilter.length > 0) {
                                        div1.css('filter', ie8GradHandlerFilter);
                                        ie8GradHandlerFilter = '';
                                    }
                                }

                                td1.append(div0.append(div1));
                                if (!legendObject.auto) {
                                }

                                td2 = $(document.createElement('td'));
                                td2.addClass('jqplot-table-legend ' + 'jqplot-table-legend-label');
                                td2.css('paddingTop', rs);
                                td2.attr('id', 'legend__label__' + s.seriesid);

                                var legendActContent = lt;
                                var cont = self.getContainer();
                                // occupy width of 6
                                var singleCharWidth = 11;
                                cont.html(legendActContent);
                                var legendContentLen = cont.width();
                                var legedwid = maxlegendTextWidth / nc, truncLegendContent = '', titleText = '';
                                if (legendContentLen > legedwid) {
                                    truncLegendContent = legendActContent;
                                    var chrsfix = 50, tmp = '', newline = '&#11', tmp1;
                                    if (legendActContent.length > chrsfix) {
                                        if ($.browser.mozilla) {
                                            /**
                                             Tooltip in mozila browser not
                                            supporting new line character, so it
                                            handled in code
                                             */
                                            tmp = legendActContent.substring(0, chrsfix);
                                            tmp1 = legendActContent.substring(chrsfix, legendActContent.length);

                                            tmp = tmp + newline;
                                            if (tmp1.length > chrsfix) {
                                                while (tmp1.length > chrsfix) {
                                                    tmp = tmp + tmp1.substring(0, chrsfix);
                                                    tmp1 = tmp1.substring(chrsfix, tmp1.length);
                                                    tmp = tmp + newline;
                                                }
                                                tmp = tmp + tmp1.substring(0, chrsfix);
                                                tmp = tmp + newline;
                                            } else {
                                                tmp = tmp + tmp1;
                                            }
                                            legendActContent = tmp;
                                        }
                                    }
                                    titleText = ' title="' + legendActContent + '"';
                                } else {
                                    truncLegendContent = legendActContent;
                                }
                                cont = null;
                                lt = '<div style="text-align: left; overflow: hidden;text-overflow: ellipsis;white-space: nowrap;max-width:' + legedwid + 'px;' + '" ' + titleText + '>' + truncLegendContent;
                                lt += '</div>';
                                td2.html(lt);
                                td1.css('width', '20px');
                                //legend color will always be 20px width
                                if (i > 0 && legendRowSpacing) {
                                    var newcss = {
                                        'padding-top' : legendRowSpacing + 'px'
                                    };
                                    td1.css(newcss);
                                    td2.css(newcss);
                                }
                                if (legendContentLen > legedwid) {
                                    if (legendObject && (legendObject.itemSpacing <= 0 || typeof (legendObject.itemSpacing) === 'undefined')) {
                                        if ($.browser.msie && $.browser.version === '8.0') {
                                            legendObject.itemSpacing = 14;
                                        } else {
                                            legendObject.itemSpacing = 18;
                                        }
                                    }
                                }
                                if (this.showSwatches) {
                                    td1.appendTo(tr);
                                }
                                if (this.showLabels) {
                                    td2.appendTo(tr);
                                }

                                if (this.seriesToggle) {
                                    var speed;
                                    if ( typeof (this.seriesToggle) === 'string' || typeof (this.seriesToggle) === 'number') {
                                        if (!$.jqplot.use_excanvas || !this.disableIEFading) {
                                            speed = this.seriesToggle;
                                        }
                                    }
                                    if (this.showSwatches) {
                                        td1.bind('click', {
                                            series : s,
                                            speed : speed,
                                            td1 : td1,
                                            plot : plot
                                        }, handleToggle);
                                        td1.addClass('jqplot-seriesToggle');
                                    }
                                    if (this.showLabels) {
                                        td2.bind('click', {
                                            series : s,
                                            td1 : td1,
                                            plot : plot,
                                            speed : speed
                                        }, handleToggle);
                                        td2.addClass('jqplot-seriesToggle');
                                    }
                                }

                                pad = true;
                            }
                        }
                        idx++;
                    }

                    td1 = td2 = div0 = div1 = null;
                }
                tiny.garbageCollect(self.getContainer(), true);
            }
            return this._elem;
        };

        var handleToggle = function(ev) {
            ev.data.series.toggleDisplay(ev);
            var td1 = ev.data.td1;
            var div = td1.find('.jqplot-table-legend-swatch');
            var plot = ev.data.plot;

            if (ev.data.series.canvas._elem.hasClass('jqplot-series-hidden')) {
                $(this).addClass('jqplot-series-hidden');
                $(this).next('.jqplot-table-legend-label').addClass('jqplot-series-hidden');
                $(this).prev('.jqplot-table-legend-swatch').addClass('jqplot-series-hidden');
                if ($.browser.msie) {
                    td1.data('backgrounddata', div.css('filter'));
                    div.css('filter', 'none');
                    div.css('background', 'none');
                } else {
                    td1.data('backgrounddata', div.css('background-color'));
                    div.css('background', 'none');
                }

                // Since the canvas is being hidden as such, making the series
                // show =false is not required
                // series.show = false, and on rerender the axis, the axes are
                // packed with only visible series in consideration
                // Hence keep the series.show = true and make the marker and
                // highlighter to be false to avoid tooltip and marker
                // from coming in the chart without the series. Handle the same
                // in the else part also.
                ev.data.series.showHighlight = false;
                ev.data.series.showMarker = false;

            } else {
                var s = ev.data.series;
                if (s.canvas._elem.is(':hidden')) {
                    s.canvas._elem.removeClass('jqplot-series-hidden');
                    if (!self.oChart.isBigData && s.shadowCanvas && s.shadowCanvas._elem) {
                        s.shadowCanvas._elem.show();
                    }
                    s.canvas._elem.show();
                    s.canvas._elem.nextAll('.jqplot-point-label.jqplot-series-' + s.index).show();
                }
                s = null;

                $(this).removeClass('jqplot-series-hidden');
                $(this).next('.jqplot-table-legend-label').removeClass('jqplot-series-hidden');
                $(this).prev('.jqplot-table-legend-swatch').removeClass('jqplot-series-hidden');
                if ($.browser.msie) {
                    div.css('filter', td1.data('backgrounddata'));
                    div.css('background', td1.data('backgrounddata'));
                } else {
                    div.css('background', td1.data('backgrounddata'));
                }
                // See the explanation in the if part.
                ev.data.series.showHighlight = true;
                ev.data.series.showMarker = true;
                plot.drawSeries(ev.data.series.index);

            }
            plot.hiddenSeriesMap[ev.data.series.index] = ev.data.series.showHighlight;
            plot = null;
        };
    }
})(jQuery); 


(function($){
tiny.charts.axistickrenderer = function(streamchart,seriesIdIndexMap1,seriesList1,axeslist1)
{
    var self = this;
    var streamChartRef = streamchart;
    var seriesIdIndexMap = seriesIdIndexMap1;
    var seriesList = seriesList1;
    var axeslist = axeslist1;

    self.AxisTickRendererDrawCallBack = function(ctx,plot,tickIndex,totalTicks,hidSpan) 
    {
        if(this.unittick)
        {
            this.textColor =  this.textColor || '#3b3b3b';
            this.fontSize =   this.fontSize || '10px';
        }
        else
        {
            this.textColor = '#3b3b3b';
            this.fontSize = '10px';
        }
        var prefix = this.prefix,str,ismax = false,tickRendererUsed = false,needTickRenderer = true,titleSet = false;
        if (tickIndex !== undefined)
        {
            if (this.ylabels && this.ylabels[tickIndex] !== undefined)
            {
                needTickRenderer = false;
            }
        }
        if (plot.axes)
        {
            if (plot.axes[this.axis])
            {
                //Prefix value getting from Unit, Unit always show at max value of axis, For category axis 0.5 will be added, Fixed for horizontal bar chart
                if (plot.axes[this.axis].max === this.value || plot.axes[this.axis].max === (this.value+0.5))
                {
                    prefix = this.prefix;
                    if (prefix !== '')
                    {
                        ismax = true;
                    }
                }
                else
                {
                    prefix = '';
                    ismax = false;
                }
            }
        }
        if (this.label === null) {
            this.label = this.formatter(
                            this.formatString, this.value);
        }
        if (ismax)
        {
            if (this.axis.charAt(0) !== 'y' && plot.axes[this.axis].ticks.length > 0)
            {
                this.label = prefix + this.label;
            }
        }
        else
        {
            this.label = prefix + this.label;
        }
        if (plot.axes && needTickRenderer)
        {
            var axesList = axeslist;
            if (!axesList || axesList.length === 0)
            {
                return;
            }
            for (var i = 0; i < axesList.length; i++)
            {
                if (axesList[i].type === this.axis &&
                axesList[i].tickRenderer && !this.unittick)
                {
                    this.escapeHTML = false;
                    var mtd = axesList[i].tickRenderer;
                    var axisss = plot.axes[this.axis];
                    var retObj = {  
                                    min: axisss.min,
                                    max: axisss.max,
                                    unit: this.prefix || this.prefixValue,
                                    value:this.value,
                                    axis: this.axis
                                 };
                    if (tickIndex !== undefined)
                    {
                        retObj.index = tickIndex;
                    }
                    if (totalTicks !== undefined)
                    {
                        retObj.numberTicks = totalTicks;
                    }
                    this.label = mtd(retObj);
                    tickRendererUsed = true;
                }
            }
        }
        var style = {position: 'absolute'};
        if (Number(this.label)) {
            style.whitSpace = 'nowrap';
        }

        // Memory Leaks patch
        if (this._elem) {
            this._elem.emptyForce();
            tiny.garbageCollect( this._elem, true);
            this._elem = null;
        }

        this._elem = $(document.createElement('div'));
        this._elem.addClass('jqplot-' + this.axis + '-tick');
        if (plot.options.ishorizontalbar)
        {
            this._elem.css({'right':'auto','left':'0px'});
        }
        var valuess = this.label;
        
        if (needTickRenderer && !tickRendererUsed && plot.axes[this.axis] && !plot.axes[this.axis].tickOptions.userFormatString)
        {            
            if (((typeof this.changedTickValue) !== 'undefined'))
            {
                valuess = this.changedTickValue;
                var arr = (''+valuess).split(".");
                if (arr && arr.length>1)
                {
                    valuess = this.formatter('%.'+arr[1].length+'f', valuess);
                }
                else
                {
                    valuess = this.formatter('%d', valuess);
                }
            }
        }
        if (needTickRenderer && !tickRendererUsed && plot.axes[this.axis] && plot.axes[this.axis].tickOptions.displayLength !== undefined)
        {
            var dispLen = plot.axes[this.axis].tickOptions.displayLength;
            if (valuess.length > dispLen)
            {
                var actualStr = valuess;
                this._elem.attr('title',actualStr);
                valuess = actualStr.substring(0,dispLen) + '...';
                titleSet = true;
            }
        }
        if (tickIndex !== undefined)
        {
            if (this.ylabels && this.ylabels[tickIndex] !== undefined)
            {
                valuess = this.ylabels[tickIndex];
            }
        }
        this.label = (''+valuess).replace(/^\s+|\s+$/g, "");
        
        if (this.label === 'undefined' || this.label === undefined)
        {
            this.label = '';
        }
        
        if (!this.escapeHTML) {
            this._elem.html(this.label);
        }
        else {
            this._elem.text(this.label);
        }

        this._elem.css(style);

        if(!plot.options.isBigData)
        {
			  hidSpan.innerHTML = this._elem.text();
            var chartWidth40Percent = plot.target[0].offsetWidth * 0.4;
            if(plot.target[0].offsetWidth === 0)
            {
                chartWidth40Percent = plot.target.width()*0.4;
            }
            if (chartWidth40Percent < hidSpan.offsetWidth)
            {
                this._elem.css('width', chartWidth40Percent);
            }
        }
        this._elem.css('overflow', 'hidden');

        for (var s in this._styles) {
            this._elem.css(s, this._styles[s]);
        }
        if (this.fontFamily) {
            this._elem.css('font-family', this.fontFamily);
        }
        if (this.fontSize) {
            this._elem.css('font-size', this.fontSize);
        }
        if (this.textColor) {
            this._elem.css('color', this.textColor);
        }
        if (this._breakTick) {
            this._elem.addClass('jqplot-breakTick');
        }
        if (tickIndex !== undefined)
        {
            this._elem.attr('index',tickIndex);
        }
        if (totalTicks !== undefined)
        {
            this._elem.attr('numberTicks',totalTicks);
        }
        if (plot.options.ishorizontalbar && !titleSet)
        {
            //write code to handle title if the text is more than the minimum occupiable width            
            var cssobj = {'text-overflow':'ellipsis','overflow':'hidden','white-space':'pre'};
            this._elem.css(cssobj);
        }
        return this._elem;
    }
    
    self.CanvasAxisTickRendererDrawCallBack = function(ctx, plot,tickIndex,totalTicks) {
        if (!this.label) {
            this.label = this.formatter(this.formatString, this.value);
        }
        
        // Memory Leaks patch
        if (this._elem) {
            if ($.jqplot.use_excanvas && window.G_vmlCanvasManager.uninitElement !== undefined) {
                window.G_vmlCanvasManager.uninitElement(this._elem.get(0));
            }
            
            this._elem.emptyForce();
            this._elem = null;
        }

        // create a canvas here, but can't draw on it untill it is appended
        // to dom for IE compatability.

        var elem = plot.canvasManager.getCanvas(),tickRendererUsed = false,needTickRenderer = true;
        if (tickIndex !== undefined)
        {
            if (this.ylabels && this.ylabels[tickIndex] !== undefined)
            {
                needTickRenderer = false;
            }
        }
        if (plot.axes && needTickRenderer)
        {
            var axesList = axeslist;
            if (!axesList || axesList.length === 0)
            {
                return;
            }
            for (var i = 0; i < axesList.length; i++)
            {
                if (axesList[i].type === this.axis &&
                axesList[i].tickRenderer)
                {
                    this.escapeHTML = false;
                    var mtd = axesList[i].tickRenderer;
                    var axisss = plot.axes[this.axis];
                    
                    var retObj = {
                                    min: axisss.min,
                                    max: axisss.max,
                                    unit: this.prefix || this.prefixValue,
                                    value:this.value,
                                    axis: this.axis,
                                    formatter: this.formatter,
                                    formatString: this.formatString
                                 };
                    if (tickIndex !== undefined)
                    {
                        retObj.index = tickIndex;
                    }
                    if (totalTicks !== undefined)
                    {
                        retObj.numberTicks = totalTicks;
                    }
                    this.label = mtd(retObj);
                    tickRendererUsed = true;
                }
            }
        }
        var valuess = this.label;
        if (needTickRenderer && !tickRendererUsed && plot.axes[this.axis] && !plot.axes[this.axis].tickOptions.userFormatString)
        {            
            if (((typeof this.changedTickValue) !== 'undefined'))
            {
                valuess = this.changedTickValue;
                var arr = (''+valuess).split(".");
                if (arr && arr.length>1)
                {
                    valuess = this.formatter('%.'+arr[1].length+'f', valuess);
                }
                else
                {
                    valuess = this.formatter('%d', valuess);
                }
            }
        }
        var actualStr = valuess,showTooltip = false;
        if (needTickRenderer && !tickRendererUsed && plot.axes[this.axis] && plot.axes[this.axis].tickOptions.displayLength !== undefined)
        {
            var dispLen = plot.axes[this.axis].tickOptions.displayLength;
            if (valuess.length > dispLen)
            {
                showTooltip = true;
                valuess = actualStr.substring(0,dispLen) + '...';                
            }
        }
        if (tickIndex !== undefined)
        {
            if (this.ylabels && this.ylabels[tickIndex] !== undefined)
            {
                valuess = this.ylabels[tickIndex];
            }
        }
        this.label = (''+valuess).replace(/^\s+|\s+$/g, "");
        if (this.label === 'undefined' || this.label === undefined)
        {
            this.label = '';
        }
        this._textRenderer.setText(this.label, ctx);
        var w = this.getWidth(ctx);
        var h = this.getHeight(ctx);
        // canvases seem to need to have width and heigh attributes directly set.
        elem.width = w;
        elem.height = h;
        elem.style.width = w;
        elem.style.height = h;
        elem.style.textAlign = 'left';
        elem.style.position = 'absolute';
		
		elem = plot.canvasManager.initCanvas(elem);
		
        this._elem = $(elem);
        this._elem.css(this._styles);
        this._elem.addClass('jqplot-'+this.axis+'-tick');
        if (tickIndex !== undefined)
        {
            this._elem.attr('index',tickIndex);
        }
        if (totalTicks !== undefined)
        {
            this._elem.attr('numberTicks',totalTicks);
        }
        if (showTooltip)
        {
            this._elem.attr('title',actualStr);
        }
		
        elem = null;
        return this._elem;
    };
}
})(jQuery);

(function($){
tiny.PieLegendRender = function(streamchart)
{
    var self = this;
    var streamchartRef = streamchart;

    // called with context of legend
   self.getContainer = function()
	{
		var id = 'temp_legendid';
		if (!document.getElementById(id))
		{
			var tmp = $(document.createElement('div'));
			tmp.attr('id',id);
			tmp.css({visibility:'hidden',position:'absolute','font-size':'12px','font-family':'"Microsoft Yahei","Arial","Tahoma","Verdana","SimSun"'});
			document.body.appendChild(tmp[0]);
		}
		return $(document.getElementById(id));
	};
	
    self.pieLegendDrawCallback = function(offsets,plot)
    {
        var legend = this;
        if (this._elem)
        {
            tiny.garbageCollect(this._elem, true);
            this._elem.emptyForce();
            this._elem = null;
        }
        if (this.show)
        {
            var series = this._series;

            this._elem = $(document.createElement('table'));
            this._elem.addClass('jqplot-table-legend');
             this._elem.addClass('tiny-table-legend');

            var ss = {
            position: 'absolute'
            };
            this._elem.css(ss);
            ss['border'] = '0px solid #000';
            // Pie charts legends don't go by number of series, but by number of
            // data points
            // in the series. Refactor things here for that.

            var pad = false, nr, nc;
            var s = series[0];
            if (typeof plot.options.seriesColors == 'undefined')
            {
                var colorDefArray = [],color1 = '#CA3333',color2 = '#EA9E25',color3 = '#ACC666',color4 = '#61C44F',color5 = '#73BEE3',color6 = '#E7CB52';
                switch(s.data.length)
                {
                    case 1:
                        colorDefArray = [color5];
                        break;
                    case 2:
                        colorDefArray = [color2,color5];
                        break;
                    case 3:
                        colorDefArray = [color2,color4,color5];
                        break;
                    case 4:
                        colorDefArray = [color1,color2,color4,color5];
                        break;
                    case 5:
                        colorDefArray = [color1,color2,color4,color5,color6];
                        break;
                    case 6:
                        colorDefArray = [color1,color2,color3,color4,color5,color6];
                        break;
                    default:
                        colorDefArray = [color1,color2,color3,color4,color5,color6];
                        break;
                }
                var colorlen = colorDefArray.length;
                for (var k=colorlen;k<$.jqplot.config.defaultColors.length;k++)
                {
                    colorDefArray.push($.jqplot.config.defaultColors[k]);
                }
                if (colorDefArray.length>0)
                {
                    s.seriesColors = colorDefArray;
                }
            }
            var colorGenerator = new $.jqplot.ColorGenerator(s.seriesColors);

            if (s.show)
            {
                var pd = s.data;
                // If number of columns is not specified, set it as 1
                if(this.numberColumns === -1)
                {
                    this.numberColumns = 1;
                }
                if (this.numberColumns)
                 {
                    nc = this.numberColumns;
                    nr = Math.ceil(pd.length / this.numberColumns);
                }
                else
                {
                    nr = pd.length;
                    nc = 1;
                }
                var i, j;
                var tr, td1, td2;
                var lt, rs, color;
                var idx = 0;
                var div0, div1,maxlegendTextWidth = this._plotDimensions.width - 60; //60 deducted in maxlegend width,because margin for legend left and right is considedered.
                var count = 0;
                if (this.location === 'e' || this.location === 'w')
                {
                    maxlegendTextWidth = (40*maxlegendTextWidth/100);
                }
                for (i = 0; i < nr; i++)
                {
                tr = $(document.createElement('tr'));
                tr.addClass('jqplot-table-legend');
                tr.appendTo(this._elem);
                for (j = 0; j < nc; j++)
                {
                    if (idx < pd.length)
                    {
                        lt = this.labels[idx] || pd[idx][0].toString();
                        if (!streamchartRef.legend.auto)
                        {
                            var tempLabel = null;
                            var cusLegendItemList = streamchartRef.legend
                            .cusLegendItemList;
                            var index = 0;
                            if (cusLegendItemList)
                            {
                                if (cusLegendItemList[idx]
                                                )
                                {
                                    this.escapeHTML = false;
                                    tempLabel = cusLegendItemList[idx]
                                                    .getInnerText();
                                    }
                                }
                                if (!tempLabel)
                                {
                                    idx++;
                                    continue;
                                }
                                else
                                {
                                    lt = tempLabel;
                                }
                            }

                            color = colorGenerator.next();
                            if (i > 0)
                            {
                                pad = true;
                            }

                            else
                            {
                                pad = false;
                            }
                            rs = (pad) ? this.rowSpacing : '0';
                            td1 = $(document.createElement('td'));
                            td1
                                .addClass('jqplot-table-legend ' +
                                'jqplot-table-legend-swatch');
                                td1.css({
                                textAlign: 'center',
                                paddingTop: rs
                            });

                            div0 = $(document.createElement('div'));
                            div0.addClass('jqplot-table-legend-swatch-outline');
                            
                            if(s.seriesColors[idx])
                            {
                                div0.css({
                                    border:'1px solid '+s.seriesColors[idx],
                                    padding:  0
                                });
                            }
                            div1 = $(document.createElement('div'));
                            div1.addClass('jqplot-table-legend-swatch');
                            var ie8GradWorkAround = '';
                            function addColorStopsToGradient(color)
                            {
                                function rgb(a)
                                {
                                    var o = a.toLowerCase();
                                    return [ parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16),
                                            parseInt(o.slice(4), 16) ];
                                }
                                function shade(a, b)
                                {
                                    var v = [], i;
                                    for (i = 0; i < 3; i++)
                                    {
                                        v[i] = Math.round(a[i] * b);
                                        if (v[i] > 255)
                                        {
                                            v[i] = 255;
                                        }
                                        if (v[i] < 0)
                                        {
                                            v[i] = 0;
                                        }
                                    }
                                    return v;
                                }
                                function hex(a)
                                {
                                    var f = _hex;
                                    return f(a[0]) + f(a[1]) + f(a[2]);
                                }
                                function _hex(a)
                                {
                                    return ('0' + a.toString(16)).slice(-2);
                                }

                                function light(cc)
                                {
                                    return '#' + hex(shade(rgb(cc), 1.55));
                                }
                                var rgbValue = shade(rgb(color.substring(1)),1.25);
                                var rgbValuea = ' rgba('+rgbValue[0]+','+rgbValue[1]+','+rgbValue[2]+',0.7) ';
                                var rgbLightValue = shade(rgb(color.substring(1)), 1.55);
                                var rgbLightValuea = ' rgba('+rgbLightValue[0]+','+rgbLightValue[1]+','+rgbLightValue[2]+',0.7) ';
                                var lightColor = light(color.substring(1));
                                
                                rgbValue = '#' + hex(rgbValue);
                                rgbLightValue = '#' + hex(rgbLightValue);
                                
                                var gradientCSS = '-linear-gradient(bottom,';
                                gradientCSS += color + '  ' +' 0%, '+rgbLightValuea+' 100%)';
                                ie8GradWorkAround = 'progid:DXImageTransform.Microsoft.gradient(startColorstr="'+lightColor+'", endColorstr="'+color+'")';
                                return gradientCSS;
                            }
                             div1.css({
                                backgroundColor: color,
                                borderColor: color
                            }); 
                            var grdientEleCss = addColorStopsToGradient(color);
                            div1.css('background-image', '-webkit'+grdientEleCss);
                            div1.css('background-image', '-moz'+grdientEleCss);
                            if(ie8GradWorkAround.length>0)
                            {
                                div1.css('filter', ie8GradWorkAround);
                                ie8GradWorkAround = '';
                            }
                            td1.append(div0.append(div1));
                            if (!streamchartRef.legend.auto)
                            {
                                td1.hide();
                            }

                            td2 = $(document.createElement('td'));
                            td2
                                    .addClass('jqplot-table-legend ' +
                                    'jqplot-table-legend-label');
                            td2.css('paddingTop', rs);
                            td1.appendTo(tr);
                            td2.appendTo(tr);
							var legendActContent = lt;
							var cont = self.getContainer();
                            var singleCharWidth = 11;
                            cont.html(legendActContent);
                            var legendContentLen = cont.width();
                            cont = null;
                            
                            var legedwid = maxlegendTextWidth/nc,truncLegendContent = '',titleText = '';
                            if (legendContentLen > legedwid)
                            {
                                var truncChars = legedwid/singleCharWidth;
                                truncLegendContent = legendActContent.substring(0,truncChars) + '...';
                                titleText = ' title="' + legendActContent + '"';
                            }
                            else
                            {
                                truncLegendContent = legendActContent;
                            }
                            lt ='<div style="word-wrap: break-word;max-width:' + legedwid + 'px;" ' + titleText + '>' + truncLegendContent;
                            lt += '</div>';
                            td2.html(lt);
                            pad = true;
                            }
                            idx++;
                        }
                }
            }
			tiny.garbageCollect(self.getContainer() , true);
        }
        return this._elem;
    };
  }
})(jQuery);

tiny.dispose = function()
{
    var objectPropertiesToBeRemoved = this;
	setTimeout(function(){removeObjectProperties(objectPropertiesToBeRemoved);}, 0); 
}

function removeObjectProperties(objectPropertiesToBeRemoved)
{
	if(objectPropertiesToBeRemoved)
	{
		for (var property in objectPropertiesToBeRemoved)
    	{
            try
            {
        	    delete objectPropertiesToBeRemoved[property];
            }
            catch(ex)
            {
            }
    	}
	}
}

tiny.disposeObject = function(obj)
{
    var objectPropertiesToBeRemoved = obj;
    removeObjectProperties(objectPropertiesToBeRemoved);
}

tiny.garbageCollect = function(node, isJqueryObj)
{
    if(isJqueryObj)
    {
        node.children().each(function(a, elem)
        {
            tiny.garbageCollect($(elem), true);
        });
        tiny.garbageCollect(node.get(0));
        tiny.disposeObject(node);
    }
    if (node && node.parentNode)
    {
        node.parentNode.removeChild(node);
    }
    if (node != null)
    {
        try
        {
            var garbageBin = document.getElementById('tinyLeakGarbageBin');
            if (!garbageBin)
            {
                garbageBin = document.createElement('DIV');
                garbageBin.id = 'tinyLeakGarbageBin';
                garbageBin.style.display = 'none';
                document.body.appendChild(garbageBin);
            }

            garbageBin.appendChild(node);
            while(node.firstChild)
            {
                node.removeChild(node.firstChild);
            }
            node.style.width = "0px";
            node.style.height = "0px";
            garbageBin.innerHTML  = "";
            node = null;
        }
        catch (ex)
        {
        }
    }
}

tiny.removeListeners = function(plot)
{
    if (plot.pieGarbageLeak)
    {
        var len = plot.pieGarbageLeak.length,i;
        for (i=0;i<len;i++)
        {
            var listOb = plot.pieGarbageLeak[i];
            tiny.Event.removeListener(listOb.dom, listOb.type, listOb.func);
        }
        len = plot.pieGarbageLeak.length;
        for (i=0;i<len;i++)
        {
            var listOb = plot.pieGarbageLeak[i];
            tiny.garbageCollect(listOb.dom);
            tiny.disposeObject(listOb);
        }
    }
    plot.pieGarbageLeak = [];
}
tiny.getAllScopeElements = function(parentElem, className)
{
    return parentElem.children('.'+className);
}
tiny.removeAllScopeElements = function(parentElem, elements)
{
    for(var ty = 0; ty < elements.length; ty++)
    {
        var onj = elements[ty];
        tiny.garbageCollect($(onj)[0]);
        elements[ty] = null;

    }
}

/**
 * Checks the obejct is array or not.
 * @param {array} array - an array
 * @return {boolean} true if it is array, false otherwise
 */
tiny.isArray = function(array)
{
    if (array instanceof Array)
    {
        return true;
    }
    if (!array)
    {
        return false;
    }
    if (typeof array.length != "number")
    {
        return false;
    }
    if (array.length < 0)
    {
        return false;
    }

    if (array.length >= 0 && typeof(array) == "string")
    {
        return false;
    }
    return true;
}

/**
 * Checks the value is in the array or not.
 * @param  {array} array - an array
 * @param  {string} value - the value that is to be checked
 * @return {boolean} true if it is in the array, false otherwise
 */
tiny.isInArray = function(array, value)
{
    for (var i in array)
    {
        if (array[i] == value)
        {
            return true;
        }
    }
    return false;
}

/**
 * Removes specifed element from the array.
 * @param {array}  array - an array
 * @param {string} value - the element that is to be removed
 */
tiny.removeFromArray = function(array, value)
{
    if (tiny.isArray(array))
    {
        for (var i = array.length - 1; i >= 0; i--)
        {
            if (array[i] == value)
            {
                array.splice(i, 1);
            }
        }
    }
}

if (typeof tiny.charts.barrenderer === 'undefined')
{
    tiny.charts.barrenderer = {};
}
(function($){
tiny.charts.barrenderer = function(streamchart,seriesIdIndexMap1,seriesList1)
{
var self = this;
var streamChartRef = streamchart;
var seriesIdIndexMap = seriesIdIndexMap1;
var seriesList = seriesList1;
var colorArray = null;
var dataPoints = null;

self.BarRendererDrawCallBack = function(ctx, gridData, options,plot) {
        var i;
        // Ughhh, have to make a copy of options b/c it may be modified later.
        var opts = $.extend({}, options);
        var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;
        var showLine = (opts.showLine != undefined) ? opts.showLine : this.showLine;
        var fill = (opts.fill != undefined) ? opts.fill : this.fill;
        var xaxis = this.xaxis;
        var yaxis = this.yaxis;
        var xp = this._xaxis.series_u2p;
        var yp = this._yaxis.series_u2p;
        var pointx, pointy;
        // clear out data colors.
        this._dataColors = [];
        this._barPoints = [];
	/**
		The below code added for vertical barchart. When the bar-width attribute is configured.
		And the user resizes the window then the gap is not calculated or aligned properly
	*/
	if (this.barDirection == 'vertical')
	{
	    var axis = this._xaxis,valuesarray = [],maxBarWidth = -1;
	    var ticks = axis._ticks;
	    if (ticks)
	    {
		    var numticks = ticks.length;
		    for (var j=numticks; j>0; j--)
		    {
			var t = ticks[j-1];
			if (t.show) 
			{
				valuesarray.push(axis.u2p(t.value));
			}
		    }
		    if (valuesarray.length>2)
		    {
			maxBarWidth = (valuesarray[0]-valuesarray[2]);
			maxBarWidth = maxBarWidth * 0.85;//85 persent of the possible width
			if (this.barWidth > maxBarWidth)
			{
				this.barWidth = maxBarWidth;
			}
		    }
	    }
	}
        if (this.barWidth == null) {
            this.renderer.setBarWidth.call(this);
        }
        
        var temp = this._plotSeriesInfo = this.renderer.calcSeriesNumbers.call(this);
        var nvals = temp[0];
        var nseries = temp[1];
        var pos = temp[2];
		var points = [];
        
        if (this._stack) {
            this._barNudge = 0;
        }
        else {
            this._barNudge = (-Math.abs(nseries/2 - 0.5) + pos) * (this.barWidth + this.barPadding);
        }
        if (showLine) {
            var negativeColors = new $.jqplot.ColorGenerator(this.negativeSeriesColors);
            var positiveColors = new $.jqplot.ColorGenerator(this.seriesColors);
            var negativeColor = negativeColors.get(this.index);
            if (! this.useNegativeColors) {
                negativeColor = opts.fillStyle;
            }
            var positiveColor = opts.fillStyle;
			var base;
			var xstart; 
			var ystart;
            var validAxis;
            if (this.barDirection == 'vertical') {
                for (var i=0; i<gridData.length; i++) {
                    if (this.data[i][1] == null) {
                        continue;
                    }
                    for(var axesIndex = 0; axesIndex < streamChartRef.axes.axesList.length; axesIndex++)
                    {
                        if(streamChartRef.axes.axesList[axesIndex].type === this.yaxis)
                        {
                            validAxis = streamChartRef.axes.axesList[axesIndex];
                            break;
                        }
                    }
                    if(typeof validAxis !== 'undefined')
                    {
                        colorArray = validAxis.color;
                        dataPoints = validAxis.axisData;
                        var bordercolorArr = validAxis.bordercolor;
                    }
                  
                    var borderColorAsPerThreshhold ;
                    points = [];
                    base = gridData[i][0] + this._barNudge;
					ystart;
                    
                    // stacked
                    if (this._stack && this._prevGridData.length) {
                        ystart = this._prevGridData[i][1];
                    }
                    // not stacked and first series in stack
                    else {
                        if (this.fillToZero) {
                            ystart = this._yaxis.series_u2p(0);
                        }
                        else if (this.waterfall && i > 0 && i < this.gridData.length-1) {
                            ystart = this.gridData[i-1][1];
                        }
                        else if (this.waterfall && i == 0 && i < this.gridData.length-1) {
                            if (this._yaxis.min <= 0 && this._yaxis.max >= 0) {
                                ystart = this._yaxis.series_u2p(0);
                            }
                            else if (this._yaxis.min > 0) {
                                ystart = ctx.canvas.height;
                            }
                            else {
                                ystart = 0;
                            }
                        }
                        else if (this.waterfall && i == this.gridData.length - 1) {
                            if (this._yaxis.min <= 0 && this._yaxis.max >= 0) {
                                ystart = this._yaxis.series_u2p(0);
                            }
                            else if (this._yaxis.min > 0) {
                                ystart = ctx.canvas.height;
                            }
                            else {
                                ystart = 0;
                            }
                        }
                        else {
                            ystart = ctx.canvas.height;
                        }
                    }
                    if ((this.fillToZero && this._plotData[i][1] < 0) || (this.waterfall && this._data[i][1] < 0)) {
                        if (this.varyBarColor && !this._stack) {
                            if (this.useNegativeColors) {
                                opts.fillStyle = negativeColors.next();
                            }
                            else {
                                opts.fillStyle = positiveColors.next();
                            }
                        }
                        else {
                            opts.fillStyle = negativeColor;
                        }
                    }
                    else {
                        if (this.varyBarColor && !this._stack) {
                            opts.fillStyle = positiveColors.next();
                        }
                        else {
                            opts.fillStyle = positiveColor;
                        }
                    }
					
					if (!this.fillToZero || this._plotData[i][1] >= 0) { 
						points.push([base-this.barWidth/2, ystart]);
						points.push([base-this.barWidth/2, gridData[i][1]]);
						points.push([base+this.barWidth/2, gridData[i][1]]);
						points.push([base+this.barWidth/2, ystart]);
					}
					// for negative bars make sure points are always ordered clockwise
					else {              
						points.push([base-this.barWidth/2, gridData[i][1]]);
						points.push([base-this.barWidth/2, ystart]);
						points.push([base+this.barWidth/2, ystart]);
						points.push([base+this.barWidth/2, gridData[i][1]]);
					}
                    this._barPoints.push(points);
                    // now draw the shadows if not stacked.
                    // for stacked plots, they are predrawn by drawShadow
                    if (shadow && !this._stack) {
                        var sopts = $.extend(true, {}, opts);
                        // need to get rid of fillStyle on shadow.
                        delete sopts.fillStyle;
                        this.renderer.shadowRenderer.draw(ctx, points, sopts);
                    }
                    var clr = opts.fillStyle || this.color;
                    var gradcolor = clr;
                    if(typeof validAxis !== 'undefined')
                    {
                        dataPoints = validAxis.colorSectionDataArray;
                    }
                    if(colorArray)
                    {
                        var value = this._plotData[i][1];
                        if($.isArray(colorArray) && colorArray.length > 0)
                        {
                            var dataPointIndex = -1;
                            var maxDataPointIndex = -1;
                            var tempDataPoint = -1;
                            var tempMaxVal =null;
                            for ( var p = 0; p < dataPoints.length; p++)
                            {
                                if (value <= dataPoints[p] && (tempDataPoint===-1 || tempDataPoint>dataPoints[p]))
                                {
                                    dataPointIndex= p;
                                    tempDataPoint= dataPoints[p];
                                    
                                }
                                if(tempMaxVal <  dataPoints[p] || tempMaxVal=== null)
                                {
                                    tempMaxVal = dataPoints[p];
                                    maxDataPointIndex = p;
                                }
                            }
                            if(dataPointIndex === -1 && maxDataPointIndex>=0)
                            {
                                dataPointIndex = maxDataPointIndex;
                            }
                            if(dataPointIndex>=0)
                            {
                                var point3 = 0,point4 = 0,hpoint1 = 0,hpoint2 = 0,aj=0;
                                hpoint1 = Math.round(points[0][0]);
                                hpoint2 = Math.round(points[0][1]);
                                point3 = Math.round(points[2][0]);
                                point4 = Math.round(points[2][1]);
                                var colorgrd = ctx.createLinearGradient(hpoint1,point4, point3, point4);
                                var barColorArray = colorArray[dataPointIndex];
                                borderColorAsPerThreshhold = bordercolorArr[dataPointIndex];
                                if ($.isArray(barColorArray))
                                {
                                    for ( var k = 0; k < barColorArray.length; k++)
                                    {
                                        colorgrd.addColorStop(barColorArray[k][0],barColorArray[k][1]);
                                    }
                                    opts.fillStyle = colorgrd;
                                }
                                else
                                {
                                    opts.fillStyle = colorArray;
                                }
                            }
                        }
                    }
                    else if(gradcolor)
                    {
                        var gradref = self.GradientRenderer(gradcolor,ctx,points,this.barDirection, this.index, i,false,plot);
                        if(gradref)
                        {
                            opts.fillStyle = gradref;
                        }
                    }
                    this.renderer.shapeRenderer.draw(ctx, points, opts); 
                    
                    if (!this.fillToZero || this._plotData[i][1] >= 0) 
                    {
                        var border ;
                        if(borderColorAsPerThreshhold)
                        {
                            border = borderColorAsPerThreshhold;
                        }
                        else
                        {
                        var border = self.GradientRenderer(gradcolor,ctx,points,this.barDirection, this.index, i, true,plot);
                        }
                        if(border)
                        {
                            this.borderColor = border;
                        }
                        this._dataColors.push(this.borderColor);
                    	if(this.borderColor)
                    		{
	                    		var topts = $.extend(true, {strokeStyle: this.borderColor,strokeRect:true}, opts);                    
	                            var point1 = 0,point2 = 0,point3 = 0,point4 = 0,hpoint1 = 0,hpoint2 = 0;
	                            hpoint1 = Math.round(points[0][0]);
	                            hpoint2 = Math.round(points[0][1]);
	                            point1 = Math.round(points[1][0]);
	                            point2 = Math.round(points[1][1]);
	                            point3 = Math.round(points[2][0]);
	                            point4 = Math.round(points[2][1]);
	                            
	                            var dist1 = point3 - point1;
	                            var dist2 = point2 - point4;
	                            var bwidth = Math.round(Math.sqrt((dist1*dist1)+(dist2*dist2)));
	                            var hdist1 = point1 - hpoint1;
	                            var hdist2 = point2 - hpoint2;
	                            var hheight = Math.round(Math.sqrt((hdist1*hdist1)+(hdist2*hdist2)));
	                            topts.fillstyle = this.borderColor;
	                            this.renderer.shapeRenderer.draw(ctx, [hpoint1,point4,bwidth,hheight], topts);
                    		}
                    }
                    else
                    {
                        //Need to handle
                        this._dataColors.push(clr);
                    }
                }
            }
            
            else if (this.barDirection == 'horizontal'){
                for (var i=0; i<gridData.length; i++) {
                    if (!this.data[i] || this.data[i][0] == null ) {
                        continue;
                    }
                    if(streamChartRef.axes !=null)
                    {
                        for(var axesIndex = 0; axesIndex < streamChartRef.axes.axesList.length; axesIndex++)
                        {
                            if(streamChartRef.axes.axesList[axesIndex].type === this.yaxis)
                            {
                                validAxis = streamChartRef.axes.axesList[axesIndex];
                                break;
                            }
                        }
                    }
                    if(typeof validAxis !== 'undefined')
                    {
                        colorArray = validAxis.color;
                        dataPoints = validAxis.axisData;
                        var bordercolorArr = validAxis.bordercolor
                    }
                    var borderColorAsPerThreshhold ;
                    points = [];
                    base = gridData[i][1] - this._barNudge;
                    xstart;
                    
                    if (this._stack && this._prevGridData.length && this._prevGridData[i]) {
                        xstart = this._prevGridData[i][0];
                    }
                    // not stacked and first series in stack
                    else {
                        if (this.fillToZero) {
                            xstart = this._xaxis.series_u2p(0);
                        }
                        else if (this.waterfall && i > 0 && i < this.gridData.length-1) {
                            xstart = this.gridData[i-1][1];
                        }
                        else if (this.waterfall && i == 0 && i < this.gridData.length-1) {
                            if (this._xaxis.min <= 0 && this._xaxis.max >= 0) {
                                xstart = this._xaxis.series_u2p(0);
                            }
                            else if (this._xaxis.min > 0) {
                                xstart = 0;
                            }
                            else {
                                xstart = ctx.canvas.width;
                            }
                        }
                        else if (this.waterfall && i == this.gridData.length - 1) {
                            if (this._xaxis.min <= 0 && this._xaxis.max >= 0) {
                                xstart = this._xaxis.series_u2p(0);
                            }
                            else if (this._xaxis.min > 0) {
                                xstart = 0;
                            }
                            else {
                                xstart = ctx.canvas.width;
                            }
                        }
                        else {
                            xstart = 0;
                        }
                    }
                    var drawborder = true,lastser = plot.series[plot.series.length-1];
                    var lastserData = lastser.data;
                    if (this === lastser && lastserData[i][0] !== null)
                    {
                        if (plot.series.length === 1)
                        {
                            if (lastserData[i][0] <= this._xaxis.min)
                            {
                                drawborder = false;
                            }
                        }
                        else
                        {
                            if (lastserData[i][0] <= 0)
                            {
                                drawborder = false;
                            }
                        }
                        
                    }
                    if ((this.fillToZero && this._plotData[i][1] < 0) || (this.waterfall && this._data[i][1] < 0)) {
                        if (this.varyBarColor && !this._stack) {
                            if (this.useNegativeColors) {
                                opts.fillStyle = negativeColors.next();
                            }
                            else {
                                opts.fillStyle = positiveColors.next();
                            }
                        }
                    }
                    else {
                        if (this.varyBarColor && !this._stack) {
                            opts.fillStyle = positiveColors.next();
                        }
                        else {
                            opts.fillStyle = positiveColor;
                        }                    
                    }
                    

                    if (!this.fillToZero || this._plotData[i][0] >= 0) {
                        points.push([xstart, base + this.barWidth / 2]);
                        points.push([xstart, base - this.barWidth / 2]);
                        points.push([gridData[i][0], base - this.barWidth / 2]);
                        points.push([gridData[i][0], base + this.barWidth / 2]);
                    }
                    else {
                        points.push([gridData[i][0], base + this.barWidth / 2]);
                        points.push([gridData[i][0], base - this.barWidth / 2]);
                        points.push([xstart, base - this.barWidth / 2]);
                        points.push([xstart, base + this.barWidth / 2]);
                    }

                    this._barPoints.push(points);
                    // now draw the shadows if not stacked.
                    // for stacked plots, they are predrawn by drawShadow
                    if (shadow && !this._stack) {
                        var sopts = $.extend(true, {}, opts);
                        delete sopts.fillStyle;
                        this.renderer.shadowRenderer.draw(ctx, points, sopts);
                    }
                    var clr = opts.fillStyle || this.color;
                    gradcolor = clr;
                    if(typeof validAxis !== 'undefined')
                    {
                        dataPoints = validAxis.colorSectionDataArray;
                    }
                    if(colorArray)
                    {
                        var value = this._plotData[i][0];
                        if($.isArray(colorArray) && colorArray.length > 0)
                        {
                            var dataPointIndex = -1;
                            var maxDataPointIndex = -1;
                            var tempDataPoint = -1;
                            var tempMaxVal =null;
                            for ( var p = 0; p < dataPoints.length; p++)
                            {
                                if (value <= dataPoints[p] && (tempDataPoint===-1 || tempDataPoint>dataPoints[p]))
                                {
                                    dataPointIndex= p;
                                    tempDataPoint= dataPoints[p];
                                    
                                }
                                if(tempMaxVal <  dataPoints[p] || tempMaxVal=== null)
                                {
                                    tempMaxVal = dataPoints[p];
                                    maxDataPointIndex = p;
                                }
                            }
                            if(dataPointIndex === -1 && maxDataPointIndex>=0)
                            {
                                dataPointIndex = maxDataPointIndex;
                            }
                            if(dataPointIndex>=0)
                            {
                                var point3 = 0,point4 = 0,hpoint1 = 0,hpoint2 = 0,aj=0;
                                hpoint1 = Math.round(points[0][0]);
                                hpoint2 = Math.round(points[0][1]);
                                point3 = Math.round(points[2][0]);
                                point4 = Math.round(points[2][1]);
                                var colorgrd = ctx.createLinearGradient(point3, hpoint2, point3, point4);
                                var barColorArray = colorArray[dataPointIndex];
                                borderColorAsPerThreshhold = bordercolorArr[dataPointIndex];
                                if ($.isArray(barColorArray))
                                {
                                    for ( var k = 0; k < barColorArray.length; k++)
                                    {
                                        colorgrd.addColorStop(barColorArray[k][0],barColorArray[k][1]);
                                    }
                                    opts.fillStyle = colorgrd;
                                }
                                else
                                {
                                    opts.fillStyle = colorArray;
                                }
                            }
                        }
                    }
                    else if(gradcolor)
                    {
                        var gradref = self.GradientRenderer(gradcolor,ctx,points,this.barDirection, this.index, i,false,plot);
                        if(gradref)
                        {
                            opts.fillStyle = gradref;
                        }
                    }
                    if (drawborder)
                    {
                        this.renderer.shapeRenderer.draw(ctx, points, opts); 
                    }
                    
                    if (!this.fillToZero || this._plotData[i][0] >= 0) 
                    {
                        var border ;
                        if(borderColorAsPerThreshhold)
                        {
                            border = borderColorAsPerThreshhold;
                        }
                        else
                        {
                        var border = self.GradientRenderer(gradcolor,ctx,points,this.barDirection, this.index, i, true,plot);
                        }
                        if(border)
                        {
                            this.borderColor = border;
                        }
                        this._dataColors.push(this.borderColor);
                    	if(this.borderColor)
                    		{
	                    		var topts = $.extend(true, {strokeStyle: this.borderColor,strokeRect:true}, opts); 
	                    		topts.fillstyle = this.borderColor;                   
	                            var point1 = 0,point2 = 0,point3 = 0,point4 = 0,hpoint1 = 0,hpoint2 = 0;
	                            hpoint1 = Math.round(points[0][0]);
	                            hpoint2 = Math.round(points[0][1]);
	                            point1 = Math.round(points[1][0]);
	                            point2 = Math.round(points[1][1]);
	                            point3 = Math.round(points[2][0]);
	                            point4 = Math.round(points[2][1]);
	                            var dist1 = point3 - point1;
	                            var dist2 = point2 - point4;
	                            var bwidth = Math.round(Math.sqrt((dist1*dist1)+(dist2*dist2)));
                                //fixed for 24 and 31
                                if(dist1 < 0)
                                {
                                    bwidth = -bwidth;
                                }
	                            var hdist1 = point1 - hpoint1;
	                            var hdist2 = point2 - hpoint2;
	                            var hheight = Math.round(Math.sqrt((hdist1*hdist1)+(hdist2*hdist2)));
                                if (this._stack)
                                {
                                    if (drawborder)
                                    {
                                        this.renderer.shapeRenderer.draw(ctx, [hpoint1,point4,bwidth,hheight], topts); 
                                    } 
                                }
                                else
                                {
                                    if (this._xaxis.min !== this.data[i][0])
                                    {
                                        this.renderer.shapeRenderer.draw(ctx, [hpoint1,point4,bwidth,hheight], topts); 
                                    }
                                }
                    		}
                    }
                    else
                    {
                        //need to handle
                        this._dataColors.push(clr);
                    }
                }
            }
        }                
        
        
        
        if (this.highlightColors.length == 0 || this.highlightColors.length < this._dataColors.length) {
            this.highlightColors = $.jqplot.computeHighlightColors(this._dataColors);
        }
        
        else if (typeof(this.highlightColors) == 'string') {
            var temp = this.highlightColors;
            this.highlightColors = [];
            for (var i=0; i<this._dataColors.length; i++) {
                this.highlightColors.push(temp);
            }
        }
        
    };
    self.GradientRenderer = function(gradcolor,ctx,points, direction, seriesIndex, pointIndex, isBorder,plot)
    {
        function rgb(a)
        {
            var o = a.toLowerCase();
            return [ parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16),
                    parseInt(o.slice(4), 16) ];
        }
        
        function shade(a, b)
        {
            var v = [], i;
            for (i = 0; i < 3; i++)
            {
                v[i] = Math.round(a[i] * b);
                if (v[i] > 255)
                {
                    v[i] = 255;
                }
                if (v[i] < 0)
                {
                    v[i] = 0;
                }
            }
            return v;
        }
        
        function hex(a)
        {
            var f = _hex;
            return f(a[0]) + f(a[1]) + f(a[2]);
        }
        
        function _hex(a)
        {
            return ('0' + a.toString(16)).slice(-2);
        }

        function light(cc)
        {
            return '#' + hex(shade(rgb(cc), 0.7));
        }
        
        function addColorStopsToGradient(seriesIndex, gradient, color, pointIndex)
        {
            var seriesSectionElement =  getSeriesElement(seriesIndex, gradient, color, pointIndex)
            if (seriesSectionElement)
            {
                if(seriesSectionElement.gradient)
                {
                    for(var colorStop in seriesSectionElement.gradient)
                    {
                        gradient.addColorStop(parseFloat(colorStop,10), 
                                                seriesSectionElement.gradient[colorStop]);
                    }
                }
                else if(seriesSectionElement && seriesSectionElement.borderStyle)
                {
                    gradient.addColorStop(1, seriesSectionElement.borderStyle);
                }
                else
                {
                    gradient.addColorStop(1, plot.seriesDefGradColors[seriesIndex]);
                    gradient.addColorStop(0, plot.seriesColors[seriesIndex]);
                }
            }
            else
            {
                gradient.addColorStop(0, plot.seriesColors[seriesIndex]);
                gradient.addColorStop(1, plot.seriesDefGradColors[seriesIndex]);
            }
        }
        
        function getSeriesElement(seriesIndex, gradient, color, pointIndex)
        {
            var seriesId ,sId;
            for(sId in seriesIdIndexMap)
            {
                if(seriesIdIndexMap[sId]===seriesIndex)
                {
                    seriesId = sId;
                    break;
                }
            }
            var seriesListArray = seriesList.seriesList;
            var seriesSection = null;
            for (var i=0; i<seriesListArray.length; i++)
            {
                if(seriesListArray[i].id === seriesId)
                {
                    seriesSection = seriesListArray[i].section;
                }
            }
            var seriesSectionElement = null;
            if(seriesSection && seriesSection.length > 0)
            {
                seriesSectionElement = seriesSection[pointIndex] !== undefined? seriesSection[pointIndex] : seriesSection[pointIndex%seriesSection.length];
            }
            return seriesSectionElement;
        }
    
        if(gradcolor)
        {
            var len = gradcolor.length;                        
            if(len>0)
            {
                var point3 = 0,point4 = 0,hpoint1 = 0,hpoint2 = 0,aj=0;
                hpoint1 = Math.round(points[0][0]);
                hpoint2 = Math.round(points[0][1]);
                point3 = Math.round(points[2][0]);
                point4 = Math.round(points[2][1]);
                var grad ;
                if(isBorder)
                {
                    var seriesSectionElement = getSeriesElement(seriesIndex, grad, gradcolor, pointIndex);
                    if(seriesSectionElement && seriesSectionElement.borderStyle)
                    {
                        return seriesSectionElement.borderStyle;
                    }
                    else
                    {
                        return gradcolor;
                    }
                }                
                if (direction === 'horizontal')
                {
                    if (isNaN(hpoint2) || isNaN(point3) || isNaN(point4))
                    {
                        return gradcolor;
                    }
                    grad = ctx.createLinearGradient(point3,hpoint2,
                    point3, point4);
                    addColorStopsToGradient(seriesIndex, grad, gradcolor, pointIndex);
                }
                else
                {
                    if (isNaN(hpoint1) || isNaN(point3) || isNaN(point4))
                    {
                        return gradcolor;
                    }
                     grad = ctx.createLinearGradient(hpoint1,point4,
                    point3, point4);
                    addColorStopsToGradient(seriesIndex, grad, gradcolor, pointIndex);
                }
                return grad;
            }
        }
        return null;
    }
}
})(jQuery);

(function($){
tiny.charts.pointlabels = function(streamchart,seriesIdIndexMap1,seriesList1)
{
var self = this;
var streamChartRef = streamchart;
var seriesIdIndexMap = seriesIdIndexMap1;
var seriesList = seriesList1;

// called with scope of series
    self.BarRendererLabelCallBack = function(plot)
    {
        var list = plot.options.seriesOptions.seriesList.seriesList;
        if(list.length === 0){
            return;
        }
        debugger
        var p = this.plugins.pointLabels;
        if(plot.options.series[this.index].pointLabels){
        	p.show = plot.options.series[this.index].pointLabels.show == false ? false:true;
        }
        var labelIdx;
        var elem;
        var labels;
        var i;
        var pointData;
        if (p.seriesLabelIndex !== null)
        {
            labelIdx = p.seriesLabelIndex;
        }
        else if (this.renderer.constructor === $.jqplot.BarRenderer &&
        this.barDirection === 'horizontal')
        {
            labelIdx = 0;
        }
        else
        {
            labelIdx = (this._plotData.length === 0) ? 0 :
            this._plotData[0].length - 1;
        }
        p._labels = [];
        if (p.labels.length === 0 || p.labelsFromSeries)
        {
            if (p.stackedValue)
            {
                if (this._plotData.length && this._plotData[0].length)
                {
                    for (i = 0; i < this._plotData.length; i++)
                    {
                        // fixed for defect 51
                        if(typeof list[this.index] !== 'undefined')
                        {
                            labels = list[this.index].pointLabels;
                        }
                        if (labels)
                        {
                            elem = '<div';
                            if (labels.color)
                            {
                                elem = elem + ' style="font-size:10px;color:' +
                                        labels.color +
                                '"';
                            }
                            else
                            {

                                elem = elem +
                                       ' style="font-size:10px;color:#3b3b3b;"';
                            }
                            elem = elem + ' >';
                            if (labels.renderer)
                            {
                                var customPointLabel1 = labels.renderer(
                                        this.index, i,
                                        this._plotData[i][labelIdx]);
                                elem = elem + customPointLabel1 + '</div>';
                            }
                            else if (labels.field)

                            {
                                pointData = list[this.index].pointData;
                                if (pointData && $.isArray(pointData) &&
                                pointData[i] != undefined)
                                    {
                                    elem = elem + pointData[i] + '</div>';
                                    }

                            }
                            p._labels.push(elem);
                        }
                        else
                        {
                            p._labels.push(this._plotData[i][labelIdx]);
                        }
                    }
                }
            }
            else
            {
                var d = this._plotData;
                if (this.renderer.constructor === $.jqplot.BarRenderer &&
                this.waterfall)
                {
                    d = this._data;
                }
                if (d.length && d[0].length)
                {
                    for (i = 0; i < d.length; i++)
                    {
                        // fixed for defect 51
                        if(typeof list[this.index] !== 'undefined')
                        {
                            labels = list[this.index].pointLabels;
                        }
                        if (labels)
                        {
                            elem = '<div';
                            if (labels.color)
                            {
                                elem = elem + ' style="font-size:10px;color:' +
                                labels.color +
                                '"';
                            }
                            else
                            {

                                elem = elem +
                                ' style="font-size:10px;color:#3b3b3b;"';
                            }
                            elem = elem + ' >';
                            if (labels.renderer)
                            {

                                var customPointLabel = labels.renderer(
                                        this.index, i, d[i][labelIdx]);
                                elem = elem + customPointLabel + '</div>';
                            }
                            else if (labels.field)
                            {
                                pointData = list[this.index].pointData;
                                if (pointData && $.isArray(pointData) &&
                                pointData[i] != undefined)
                                    {
                                    elem = elem + pointData[i] + '</div>';
                                    }
                            }
                            p._labels.push(elem);
                        }
                        else
                        {
                            p._labels.push(d[i][labelIdx]);

                        }

                    }
                }
                d = null;
            }
        }
        else if (p.labels.length)
        {
            p._labels = p.labels;
        }
    };
}
})(jQuery);
(function($){
tiny.PieRender = function(streamchart,f,id, isPieAnimated)
{
    var self = this;

    var streamchartRef = streamchart;

    var streamchartID = id;

    self.pieDrawCallback = function(ctx, gd, options, plot)
    {
        var animator = null;
        self.SLICE_LENGTH = 5;
        plot.options.pieOptions.tempFX = [];
            
        self.drawPie = function(ctx, gd, options, plot)
        {
            var pieData = plot.series[0]._plotData;
            var eO = pieData.length;
            var sliceIndex = eO;
            var sum = 0;
            
            if(plot.options.pieOptions.tempIsPieInit && !isPieDataEmpty(pieData))
            {
                for(var i=0;i<sliceIndex;i++)
                {
                    sum = sum + parseFloat(pieData[i][1]);
                }
                
                plot.options.pieOptions.tempIsPieInit = false;
                var counterSlice = self.SLICE_LENGTH;
                animator = setInterval(function()
                {
                    var isLast = false;
                    
                    if(sliceIndex>=0)
                    {
                        if(counterSlice === 0)
                        {
                            //reset counter slice for next pie segment
                            sliceIndex--;
                            if(sliceIndex === -1)
                            {
                                //draw last
                                isLast = true;
                            }
                            if(!isLast)
                            {
                                var piedata = pieData[sliceIndex][1];
                                if(piedata === 0)
                                {
                                    counterSlice = 1;
                                }
                                else
                                {
                                    var radientValue = piedata*2*Math.PI;
                                    var calcFactor = radientValue/sum;
                                    var actualSliceReq = Math.floor(calcFactor/Math.PI*self.SLICE_LENGTH);
                                    if(actualSliceReq>1)
                                    {
                                        counterSlice = parseInt(actualSliceReq,10);
                                    }
                                    else
                                    {
                                        counterSlice = 1;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                    	clearInterval(animator);
                        return;
                    }
                    
                    if (ctx.canvas.height == 0) {
                        clearInterval(animator);
                        return;
                    }

                    self.drawSlice(ctx, gd, options, plot, sliceIndex,isLast,counterSlice);
                    if(isLast)
                    {
                        for(var q=0;q<plot.options.pieOptions.tempFX.length;q++)
                        {
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseover', pieMouseOverHandler);
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'click', pieMouseClickHandler);
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mousedown', pieMouseHandler);
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseout', pieMouseHandler);
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseup', pieMouseHandler);
                        }
                        
                        for(var q=0;q<plot.options.pieOptions.tempFX.length;q++)
                        {
                                plot.options.pieOptions.tempFX[q] = null;
                        }
                        plot.options.pieOptions.tempFX = null;
                        clearInterval(animator);
                        return;
                    }
                    counterSlice--; 
                }, 200/self.SLICE_LENGTH);
            }
            else
            {
                var isPieEmpty = isPieDataEmpty(pieData);
                if(isPieEmpty)
                {
                    self.drawEmptySlice(ctx, gd, options, plot, -1,true);
                }
                else
                {
                    self.drawSlice(ctx, gd, options, plot, -1,true);
                }
                for(var q=0;q<plot.options.pieOptions.tempFX.length;q++)
                {
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseover', pieMouseOverHandler);
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'click', pieMouseClickHandler);
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mousedown', pieMouseHandler);
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseout', pieMouseHandler);
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseup', pieMouseHandler);
                }
                
                for(var q=0;q<plot.options.pieOptions.tempFX.length;q++)
                {
                    plot.options.pieOptions.tempFX[q] = null;
                }
                plot.options.pieOptions.tempFX = null;
            }
        };
        function isPieDataEmpty(data)
        {
            var isPieEmpty = true;
            for(var i=0;i<data.length;i++)
            {
                if(data[i][1]>0)
                {
                    isPieEmpty = false;
                    break;
                }
            }
            return isPieEmpty;
        }
        
        var explosionsize = self.cd * 0.25;
        var tipparentID = "map_tip_"+plot.target[0].id;
        var tipChildID = tipparentID + "charttip";
        var pieImgID = plot.target[0].id+"pieImg";
        
        var tipLocation = [];
        function clickOnSlice(clickEvent)
        {
            if(plot.series[0].showHighlight === true)
            {
                 var index = plot.activeArea;
                 
                 plot.options.pieOptions.pieExplodeoptions.index = parseInt(index);
                 plot.options.pieOptions.pieExplodeoptions.size = explosionsize;
                 plot.drawSeries();
                 streamchartRef._legendAdjuster();
            }
           
        }
        function pieMouseHandler (e, w, q)
        {
            if(plot.series[0] && plot.series[0].show === false)
            {
                return;
            }
            var index = plot.activeArea;
            if (index !== undefined)
            {
                var seriesData = 
                {
                    pointIndex : plot.series[0]._plotData[parseInt(index)][0],
                    data : plot.series[0]._plotData[parseInt(index)][1],
		    dataIndex : parseInt(index)
                }
                self.callEvents(0, 'item'+e.type,seriesData,plot.options.seriesID,plot.options.seriesEvtList); 
            }
        }
        function pieMouseClickHandler (e, w, q)
        {
            if(plot.series[0] && plot.series[0].show === false)
            {
                return;
            }
            var index = 0;
            var seriesData = {
                                pointIndex : plot.series[0]._plotData[parseInt(plot.activeArea)][0],
                                data : plot.series[0]._plotData[parseInt(plot.activeArea)][1]
                             }
            self.callEvents(0, 'click', seriesData,plot.options.seriesID,plot.options.seriesEvtList);
            var widgetThis = plot.target.widget();
		    var tmpData = {
		    	x:seriesData.pointIndex,
		    	y:seriesData.data
		    };
		    widgetThis.trigger("click", [tmpData]); 
        }
        function pieMouseOverHandler(e, w, q)
        {
            if(plot.series[0] && plot.series[0].show === false)
            {
                return;
            }
            showTip(e, w, q);
            pieMouseHandler(e, w, q);
        }
        function showTip(e, w, q)
        {
            var index = 0;
            if (self.fL())
            {
                index = e.srcElement.getAttribute('tinyIndex');
            }
            else
            {
                index = e.target.getAttribute('tinyIndex');
            }
            plot.activeArea = index;
            if (plot.options.pieOptions.pieExplodeoptions.index === parseInt(index) && plot.options.pieOptions.pieExplodeoptions.size > 0)
            {
                return;
            }
            if(plot.series[0].showHighlight === true)
                {
                if(plot.options.pieOptions.isAnimate)
                {
                    clickOnSlice(e);
                }
                if(!plot.addedEvt)
                {
                    tiny.Event.addListener( $('map',plot.target)[0], 'mousemove', hideTip);
                    var obj = {'dom': $('map',plot.target)[0], 'type':'mousemove' , 'func':hideTip};
                    plot.pieGarbageLeak.push(obj);
                    plot.addedEvt = true;
                }
            
            $('div.PieTipParent').each(function(a,elm){
                tiny.garbageCollect(elm);
            });
            var seriesTipMap = plot.options.pieOptions.seriesTipMap;
            var serID = plot.options.seriesID;
            if (seriesTipMap && 
                    seriesTipMap[serID])
            {
                var str = null;

                if (seriesTipMap[serID].tip.renderer)
                {
                    str = seriesTipMap[serID].tip
                            .renderer(
                                    parseInt(index),
                                    plot.series[0]._plotData[parseInt(
                                    index)][0],
                                    plot.series[0]._plotData[parseInt(
                                    index)][1]);
                }
                else if (seriesTipMap[serID].data)
                {
                    var tipArr = seriesTipMap[serID].data;
                    if (tipArr[parseInt(index)])
                    {
                        str = '<div style="color:' +
                                seriesTipMap[serID].tip.color + '">' +
                                tipArr[parseInt(index)] + '</div>';
                    }
                }

               else {
                            var html = '';
                            var colCount = plot.target.find('.jqplot-table-legend tr:nth-child(1) td', $("#piechartdiv")).clone().length;
                            var temp = (parseInt(parseInt(index)) * 2 + 1);
                            var rowValue = (parseInt(temp / colCount) + 1);
                            var colValue = (parseInt(temp % colCount));
                            var actLegend = plot.target.find(".jqplot-table-legend tr:nth-child(" + rowValue + ") td:nth-child(" + colValue + ")").clone();
                            html = actLegend.html();
                            var divs = actLegend.find('div');
                            if (divs.length == 2) {
                                var attributesChange = {
                                    width : '8px',
                                    height : '8px'
                                };
                                $(divs[0]).css(attributesChange);
                                $(divs[1]).css(attributesChange);
                                html = actLegend.html();
                            }
                            var ret = "<table style='padding: 0 10px;margin-right: -6px;'><tr><td valign='middle'>";
                            ret += '<div style="" class="jqplot-table-legend jqplot-table-legend-swatch">' + html + '</div></td>';
                            ret += '<td><div style="padding-left:2px;"><div style="color:#000000;font-size:14px;font-weight:bold;">' + plot.series[0]._plotData[parseInt(index)][1] + '%</div>';
                            ret += '<div style="color:#3c3c3c;font-size:10px;">' + plot.series[0]._plotData[parseInt(index)][0] + '</div></div></td></tr></table>';
                            ret += '';
                            str = ret;
                }

                // Check if the tooltip string is null/undefined/empty
                if (str === undefined || str === null)
                {
                    return;
                }
                

                if (index >= 0)
                {
                    if (tipLocation[index])
                    {
                        var element = plot.target;
                        if(element.length!=0){
                        	plot.pieTip.setPosition(tipLocation[index].left -10+element.offset().left, tipLocation[index].top+element.offset().top);
                        }
                    }
                    else
                    {
                                                            
                        plot.pieTip.setPosition(e.pageX -20, e.pageY + 13);
                                                            
                    }
                }
                
                if (plot.pieTip)
                {
                    plot.pieTip.option("content",str);
                    plot.pieTip.show();
                }
            }

                }
        }
        
        function closePie()
        {
            plot.options.pieOptions.pieExplodeoptions = {index: -1, size: -1};
            plot.drawSeries();
        }
        
        function hideTipAndClosePie()
        {
             plot.pieTip.hide();
             
             if(plot.options.animate)
             {
                 closePie();            
             }
         }
        
        function hideTip(a, b, c)
        {
            if (self.fL())
             {
                if (a.srcElement.id === pieImgID)
                 {
                    hideTipAndClosePie();
                 }
             }
             else
             {
                 if (a.target.id === pieImgID)
                 {
                     hideTipAndClosePie();
                 }
             }
            plot.options.pieOptions.pieExplodeoptions.index = -1;

        }
        self.drawEmptySlice = function(ctx, gd, options, plot,count1,isLast,counterSlice)
        {
            var emptyDataMessage = 'No Data';
            if (window.tinyResourceManager && 
                window.tinyResourceManager.getResource) 
            {
                emptyDataMessage = window.tinyResourceManager.getResource("tiny.charts.pie.emptydata");

            }
            var x = ctx.canvas.width / 2;
            var y = ctx.canvas.height / 2;
            ctx.font ='12px Arial';
            ctx.fillText(emptyDataMessage, x-20,y);
            return;
        }
        
        self.drawSlice = function(ctx, gd, options, plot,count1,isLast,counterSlice)
        {
        var counterSliceAct = counterSlice?counterSlice:1;
       
        self.ba = {};
        var rand1 = (Math.floor(Math.random() * 100000) + 1);
        var rand2 = (Math.floor(Math.random() * 100000) + 1);
        var mapId = "piechart_" + rand1 + "_" + rand2;
        
        self.bc = ''+mapId;
        plot.bc   = self.bc;
        var randomColors = ['#ed1c24', '#fff200', '#00a651', '#005e20',
                '#2e3192', '#ec008c', '#898989', '#f26522', '#00aeef',
                '#959595', '#662d91', '#8c6239', '#197b30', '#8dc63f',
                '#a186be', '#736357', '#9e0b0f', '#959595', '#4390d3',
                '#5f5ab5', '#f06eaa', '#998675', '#790000', '#0054a6',
                '#003663', '#363636', '#32004b', '#7b0046', '#b1e467',
                '#aa83d5'];
        self.cb = 0;
        self.cc = 0;
        self.cd = 0;
        self.ds = ctx.canvas.width;
        self.dI = true;
        self.dt = ctx.canvas.height;
        self.ba = ctx.canvas;
        var bh = ctx;
        var pieData = plot.series[0]._plotData;
        var coords;
        var length;
        // opactity
        self.ca = 1;
        var eO = pieData.length;
        var start = 0;
        var fb = 0;
        var color;
        var hJ = [];
        var gV;
        var hg;

        var hM;
        var hN;
        var hm;
        var canvas;
        var HALFPI = 1.5707963267948966;
        self.mt = true;
        var hL = 1;
        var hK = 1;
        self.be = false;
        self.be = ['#99CDFB', '#3366FB', '#0000FA', '#F8CC00', '#F89900',
                '#F76600'];
        // x
        self.cb = ctx.canvas.width / 2;
        // Y
        self.cc = ctx.canvas.height / 2;
        self.centerY = self.cc;
	/**
		Here radius calculation and self.cd default value 75 are modified. 
		This code is modified because the pie is cut left and right side.
	*/
	var raduis = (self.cb > self.cc ? self.cc : self.cb);
	self.cd = raduis < 0 ? 0 : raduis;
        // angle
        self.bY = 60;

        var hO = self.cc;
        // depth
        var bZ = 15;
        self.explosion = 0;
        self.explode = plot.options.pieOptions.pieExplodeoptions;
        if (typeof plot.options.seriesColors == 'undefined')
        {
            //reset the series default colors
            // For pie charts override default UCD colors
            var colorDefArray = [],color1 = '#CA3333',color2 = '#EA9E25',color3 = '#ACC666',color4 = '#61C44F',color5 = '#73BEE3',color6 = '#E7CB52';
            switch(plot.series[0].data.length)
            {
                case 1:
                    colorDefArray = [color5];
                    break;
                case 2:
                    colorDefArray = [color2,color5];
                    break;
                case 3:
                    colorDefArray = [color2,color4,color5];
                    break;
                case 4:
                    colorDefArray = [color1,color2,color4,color5];
                    break;
                case 5:
                    colorDefArray = [color1,color2,color4,color5,color6];
                    break;
                case 6:
                    colorDefArray = [color1,color2,color3,color4,color5,color6];
                    break;
                default:
                    colorDefArray = [color1,color2,color3,color4,color5,color6];
                    break;
            }
            var colorlen = colorDefArray.length;
            for (var k=colorlen;k<$.jqplot.config.defaultColors.length;k++)
            {
                colorDefArray.push($.jqplot.config.defaultColors[k]);
            }
            if (colorDefArray.length>0)
            {
                plot.seriesColors = colorDefArray;
            }
        }
        self.customColors = plot.seriesColors;
        var hS = null;

        var tempcc = 0;
        var tempcb = 0;
        var tempcd = 0;
        var i;

        if (plot.options.pieOptions.isAnimate)
        {
            for (i = 0; i < pieData.length; i++)
            {
                plot.options.pieOptions.sliceListener[pieData[i][0]] = clickOnSlice;
            }
        }

        for (var eP = 0; eP < eO; eP++)
        {
            pieData[eP][1] = (pieData[eP][1]>=0)?pieData[eP][1]:0;
        }
        for (var eP = 0; eP < eO; eP++)
        {
            fb += pieData[eP][1];
        }
        self.fv = function()
        {
            var map = document.createElement('MAP');
            map.setAttribute('name', 'map_' + self.bc);
            map.setAttribute('id', 'map_' + self.bc);
            map.setAttribute('class', 'pie_map');
            plot.target[0].appendChild(map);
            return map;
        };
        self.hP = function()
        {
            var index = Math
                    .abs(Math.round(Math.random() * randomColors.length - 1));
            return randomColors[index];
        };

        self.fN = function(color, iP)
        {
            if (typeof color === 'undefined' || (
            color.length !== 4 && color.length !== 7))
            {
                return false;
            }
            if (color.length === 4)
            {
                color = ('#' + color.substring(1, 2)) + color.substring(1, 2) +
                color.substring(2, 3) + color.substring(2, 3) +
                color.substring(3, 4) + color.substring(3, 4);
            }
            var iQ = parseInt(color.substring(1, 7).substring(0, 2), 16);
            var iR = parseInt(color.substring(1, 7).substring(2, 4), 16);
            var hj = parseInt(color.substring(1, 7).substring(4, 6), 16);
            return 'rgba(' + iQ + ', ' + iR + ', ' + hj + ', ' + iP + ')';
        };

        self.fy = function(map)
        {
            plot.pieGarbageLeak.push({dom:map,type:'mousemove', func:hideTip});
            tiny.Event.addListener(map, 'mousemove', hideTip)
            var fz = '<img id="'+pieImgID+'" src="data:image/gif;base64,' +
                    'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAAB' +
                    'AAEAAAICRAEAOw==" width=' + self.ds + '" height="' +
                    self.dt + '" usemap="#map_' + self.bc +
                    '" style="border:0;position:absolute;left: ' +
                    self.ba.offsetLeft + 'px;top:' + self.ba.offsetTop +
                    'px;clip:\'rect(0, ' + self.ds + 'px, ' + self.dt +
                    'px, 0)\';filter:alpha(opacity=0);z-index:' +
                    (self.ba.style.zIndex + 10) + ';">';
            map.innerHTML += fz;
            fz = null;
        };

        self.makePieGradient = function(color, seriesIndex, cb, cc, radius)
        {
            var lingrad = bh.createRadialGradient(cb, cc, 0, cb, cc, radius);
            var colorh = color.substring(1);
            var startPercent = 1.25;
            var reducePercent = 0.10;
            var stopPercent = 1.15;
            var colorStep = Math.round((startPercent-stopPercent)/reducePercent);
            var ai = 0;
            var aIncrement = 0.13;
            var aIStop = 0.9;
            for(i=startPercent;i>=stopPercent;i=(i-reducePercent))
            {
                i = (i*100)/100.0;
                ai = ai+aIncrement;
                if(ai>=aIStop)
                {
                    break;
                }
                lingrad.addColorStop(ai, darker(colorh, i));
                ai = ai+aIncrement;
            }
            lingrad.addColorStop(aIStop, '#'+colorh);
            return lingrad;
        };
        
        self.makePieGradientBorder = function(color, seriesIndex, cb, cc, radius,start, end)
        {
            var colorh = color.substring(1);
            var convrgb = shade(rgb(colorh),1.45);
            var stc = 'rgba('+convrgb[0]+","+convrgb[1]+","+convrgb[2]+',0.6)';
            var lingrad = bh.createRadialGradient(cb, cc, 0, cb, cc, 2*radius);
            lingrad.addColorStop(0.4, stc);
            lingrad.addColorStop(0.6, 'rgba(230,230,230,0.8)');
            return lingrad;
        };

        bh.save();
        if (self.mt)
        {
            gV = self.cd * Math.cos(self.bY * Math.PI / 180);
            hL = gV / self.cd;
            hK = bZ * Math.sin(self.bY * Math.PI / 180) / hL;
            bh.scale(1, hL);
            self.cc += (self.cc - self.cc * hL) / hL;
        }
        var tempColor = [];
        var end = Math.PI * 2;
        start = 0;
        i = 0;
        /*
         * Draw the depth piece of the 270 to 90 degree in that order
         */
        for (eP = eO - 1; eP >= 0; eP--)
        {
            
            color = self.customColors[eP] ? self.customColors[eP] : self.hP();
            tempColor.push(color);
            if (eP > 0)
            {
                while (hJ[hJ.length - 1] === color || (
                eP === eO - 1 && hJ[0] === color))
                {
                    color = self.hP();
                }
            }
            hJ[hJ.length] = color;
            fillStyle = self.fN(color, self.ca);
            if (self.be !== false)
            {
                fillStyle = self.fN(randomColors[eP], self.ca);
            }
            fillStyle = hJ[i];
            if (pieData[eP][1] <= 0)
            {
                        i++;
                continue;
            }
            length = pieData[eP][1] * Math.PI * 2 / fb;
            start = end - length;
            if(start<0)
            {
                start = 0;
            }
            var x = 0;
            var y = 0;
            tempcc = self.cc;
            tempcb = self.cb;
            tempcd = self.cd;
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                var t = (start + (start + length)) / 2;
                var rprime = calcRPrime(start, (start + length),
                        self.explode.size, true, 2);
                x = (Math.cos(t) * rprime);
                y = (Math.sin(t) * rprime);

                self.cb = self.cb + x;
                self.cc = self.cc + y;

            }

            if(count1 === eP|| count1 === -1)
              {
                length = length/counterSliceAct;
                if (self.mt)
                { 
                    start = end - length;
                    if (start < 0)
                    {
                        start = 0;
                    }
                }
            if (self.mt && start <= Math.PI)
            {
                hg = length;
                hQ = self.cd * Math.cos(start);
                hR = self.cd * Math.sin(start);
                if (start + length > Math.PI)
                {
                    hS = -self.cd;
                    hT = 0;
                    hg = Math.PI - start;
                }
                else
                {
                    hS = self.cd * Math.cos(start + hg);
                    hT = self.cd * Math.sin(start + hg);
                }
            }
            if (start >= 0 && start <= 3.1415)
                 {
                bh.beginPath();
                bh.fillStyle = light(fillStyle.substring(1),
                            -0.5);

                 bh.arc(self.cb, self.cc + hK, self.cd, start, start + hg,
                        false);
                bh.lineTo(self.cb + hS, self.cc + hT + hK);
                 bh.arc(self.cb, self.cc, self.cd, start + hg, start, true);
                bh.fill();
                bh.closePath();
                }
            if (self.mt)
            {
                if (start >= Math.PI / 2 && start <= (Math.PI + (Math.PI / 2)))
                {
                    bh.beginPath();
                    bh.fillStyle = light(hJ[i].substring(1), -0.5);
                    var hhS = self.cd * Math.cos(start);
                    var hhT = self.cd * Math.sin(start);
                    bh.moveTo(self.cb, self.cc);
                    bh.lineTo(self.cb, self.cc + hK);
                    bh.lineTo(self.cb + hhS, self.cc + hhT + hK);
                    bh.lineTo(self.cb + hhS, self.cc + hhT);
                    bh.fill();
                    bh.closePath();
                }
            }
              }
            end = start;
            self.cc = tempcc;
            self.cb = tempcb;
            self.cd = tempcd;
            i++;
        }
        /*
         * Draw the depth piece of the 270 to 360 degree in that order
         */
         var estart = start;
        for (eP = 0; eP < eO; eP++)
        {
            if(pieData[eP][1] <= 0 )
            {
                continue;
            }
            length = pieData[eP][1] * Math.PI * 2 / fb;
            bh.beginPath();
            color = self.hP();
            tempColor.push(color);
            if (eP > 0)
            {
                while (hJ[hJ.length - 1] === color || (
                eP === eO - 1 && hJ[0] === color))
                {
                    color = self.hP();
                }
            }
            fillStyle = self.fN(color, self.ca);
            if (self.be !== false)
            {
                fillStyle = self.fN(randomColors[eP], self.ca);
            }
            fillStyle = hJ[hJ.length - eP - 1];
            var x = 0;
            var y = 0;
            tempcc = self.cc;
            tempcb = self.cb;
            tempcd = self.cd;
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                var t = (start + (start + length)) / 2;
                var rprime = calcRPrime(start, (start + length),
                        self.explode.size, true, 2);
                x = (Math.cos(t) * rprime);
                y = (Math.sin(t) * rprime);

                self.cb = self.cb + x;
                self.cc = self.cc + y;

            }
            if(count1 === eP || count1 === -1)
            {
              length = length/counterSliceAct;
                
            if (self.mt)
            {
                if(count1 === -1)
                {
                    // Draw at end 270-360
                    if ((start + length <= Math.PI * 2 && start + length >= (
                                    Math.PI + (Math.PI / 2))) || (
                                    start + length > Math.PI * 2))
                    {
                        bh.beginPath();
                        bh.fillStyle = light(hJ[hJ.length - eP - 1]
                                .substring(1), -0.5);
                        var hhS = self.cd * Math.cos(start + length);
                        var hhT = self.cd * Math.sin(start + length);
                        bh.moveTo(self.cb, self.cc);
                        bh.lineTo(self.cb, self.cc + hK);
                        var lineFrom = (self.cb + hhS)-4;//This -4 duduction added because color overlapping showing for some data
                        var lineTo = (self.cc + hhT + hK);
                        bh.lineTo(lineFrom, lineTo);
                        bh.lineTo(lineFrom, self.cc + hhT);
                        bh.fill();
                        bh.closePath();
                    }
                }
                else
                    {
                     if (count1 === eO-1)
                         {

                         bh.beginPath();
                         bh.fillStyle = light(hJ[hJ.length - eP - 1]
                                 .substring(1), -0.5);
                         var hhS = self.cd * Math.cos(start + length);
                         var hhT = self.cd * Math.sin(start + length);
                         bh.moveTo(self.cb, self.cc);
                         bh.lineTo(self.cb, self.cc + hK);
                         bh.lineTo(self.cb + hhS, self.cc + hhT + hK);
                         bh.lineTo(self.cb + hhS, self.cc + hhT);
                         bh.fill();
                         bh.closePath();
                     
                         }
                    }
                  

            }
              }

            start += length;
            self.cc = tempcc;
            self.cb = tempcb;
            self.cd = tempcd;
        }

        /*
         * Draw the depth piece of the 0 to 90 degree in that order
         */
         start = estart;
        for (eP = 0; eP < eO; eP++)
        {
            if(pieData[eP][1] <= 0 )
            {
            continue;
            }
            length = pieData[eP][1] * Math.PI * 2 / fb;
            bh.beginPath();
            color = self.hP();
            tempColor.push(color);
            if (eP > 0)
            {
                while (hJ[hJ.length - 1] === color || (
                eP === eO - 1 && hJ[0] === color))
                {
                    color = self.hP();
                }
            }
            fillStyle = self.fN(color, self.ca);
            if (self.be !== false)
            {
                fillStyle = self.fN(randomColors[eP], self.ca);
            }
            fillStyle = hJ[hJ.length - eP - 1];
            var x = 0;
            var y = 0;
            tempcc = self.cc;
            tempcb = self.cb;
            tempcd = self.cd;
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                var t = (start + (start + length)) / 2;
                var rprime = calcRPrime(start, (start + length),
                        self.explode.size, true, 2);
                x = (Math.cos(t) * rprime);
                y = (Math.sin(t) * rprime);

                self.cb = self.cb + x;
                self.cc = self.cc + y;

            }
            if(count1 === eP|| count1 === -1)
              {
              length = length/counterSliceAct;
                
            bh.fillStyle = self.makePieGradient(
                        fillStyle, eP, self.cb, self.cc, self.cd);
            bh
                    .arc(self.cb, self.cc, self.cd, start, start + length,
                            false);
            bh.lineTo(self.cb, self.cc);
            bh.fill();
            bh.closePath();

            if (self.mt && start < Math.PI)
            {
                hg = length;
                hQ = self.cd * Math.cos(start);
                hR = self.cd * Math.sin(start);
                if (start + length > Math.PI)
                {
                    hS = -self.cd;
                    hT = 0;
                    hg = Math.PI - start;
                }
                else
                {
                    hS = self.cd * Math.cos(start + hg);
                    hT = self.cd * Math.sin(start + hg);
                }
                if ((start + length >= 0 && start + length <= Math.PI / 2) || (
                    start >= 0 && start + length <= Math.PI))
                {
                    bh.beginPath();
                    bh.fillStyle = light(hJ[hJ.length - eP - 1].substring(1),
                            -0.5);
                    bh.arc(self.cb, self.cc + hK, self.cd, start, start + hg,
                            false);
                    bh.lineTo(self.cb + hS, self.cc + hT + hK);
                     bh.arc(self.cb, self.cc, self.cd, start + hg, start, true);
                    bh.fill();
                    bh.closePath();
                }
                
                // If the pie slice expand across more than 90
                // degree
                if (start > 0 && start < Math.PI / 2
                        && start + length > Math.PI)
                {
                    bh.beginPath();
                    bh.fillStyle = light(fillStyle.substring(1),
                            -0.5);

                    bh.arc(self.cb, self.cc + hK, self.cd, start,
                            start + hg, false);
                    bh.lineTo(self.cb + hS, self.cc + hT + hK);
                    bh.arc(self.cb, self.cc, self.cd, start + hg,
                            start, true);
                    bh.fill();
                    bh.closePath();
                }

                if (self.mt && count1 === -1)
                {
                    // Draw at end 0-90
                    if ((start + length >= 0 && start + length <= Math.PI / 2))
                    {
                        bh.beginPath();
                        bh.fillStyle = light(hJ[hJ.length - eP - 1]
                                .substring(1), -0.5);
                        bh.moveTo(self.cb, self.cc);
                        bh.lineTo(self.cb, self.cc + hK);
                        bh.lineTo(self.cb + hS, self.cc + hT + hK);
                        bh.lineTo(self.cb + hS, self.cc + hT);
                        bh.fill();
                        bh.closePath();
                    }
                }

            }
              }
            start += length;
            self.cc = tempcc;
            self.cb = tempcb;
            self.cd = tempcd;
        }
       
if(isLast)
    {
    
    
        var map = self.fv();
        self.fy(map);
        hM = Math.floor(self.cd / 20);
        start = 0;
        tipLocation.splice(0, tipLocation.length);
        if(!plot.pieGarbageLeak)
        {
            plot.pieGarbageLeak = [];
        }
        var ptLabels = $('#'+tipparentID +'_ptLabel ');
        ptLabels.each(function(idx, elem)
        {
            tiny.garbageCollect(elem);
        });

        for (eP = 0; eP < eO; eP++)
        {
            if(pieData[eP][1] <= 0 )
            {
            continue;
            }
            length = pieData[eP][1] * Math.PI * 2 / fb;

            hm = [self.cb, self.cc * hL];
            hg = start;
            hN = length / hM;

            var areaTempCb = self.cb;
            var areaTempCc = self.cc;
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                var t = (start + (start + length)) / 2;
                var rprime = calcRPrime(start, (start + length),
                        self.explode.size, true, 2);
                x = (Math.cos(t) * rprime);
                y = (Math.sin(t) * rprime);

                self.cb = self.cb + x;
                self.cc = self.cc + y;
            }

            for (gV = 0; gV <= hM; gV++, hg += hN)
            {
                hm.push(self.cb + self.cd * Math.cos(hg));
                hm.push((self.cc + self.cd * Math.sin(hg)) * hL);
            }
            self.cb = areaTempCb;
            self.cc = areaTempCc;
            var jb = navigator.userAgent.toLowerCase();
            if (/msie/.test(jb))
            {
                hm = hm.toString();
            }

            fx = fw(map, hm);
            if(!plot.options.pieOptions.tempFX)
            {
                plot.options.pieOptions.tempFX = [];
            }
            plot.options.pieOptions.tempFX.push(fx);
            var obj = {'dom':fx, 'type':'mouseover' , 'func':pieMouseOverHandler}
            plot.pieGarbageLeak.push(obj);
            obj = {'dom':fx, 'type':'click' , 'func':pieMouseClickHandler}
            plot.pieGarbageLeak.push(obj);
            obj = {'dom':fx, 'type':'mousedown' , 'func':pieMouseHandler};
            plot.pieGarbageLeak.push(obj);
            obj = {'dom':fx, 'type':'mouseout' , 'func':pieMouseHandler};
            plot.pieGarbageLeak.push(obj);
            obj = {'dom':fx, 'type':'mouseup' , 'func':pieMouseHandler};
            plot.pieGarbageLeak.push(obj);
            fx.setAttribute('tinyIndex', eP);
            if (plot.options.pieOptions.isAnimate)
            {
                if (typeof plot.options.pieOptions.sliceListener[pieData[eP][0]] !== 'undefined')
                {
                    obj = {dom:fx, type:'click',  func:function(){
                    }};
                    plot.pieGarbageLeak.push(obj);
                    tiny.Event.addListener(fx, 'click', function(){
                    });
                }
            }
            var avgang = ((start + length / 2));

            var pointLabelLocationFactor = 0.6;
            var defaultPointLabelVal = ((
                    pieData[eP][1] / fb) * 100).toFixed(2) + '%';
            var defaultPointLabelColor = '#000';

            var isRender = false;
            var pointLabels = plot.options.pieOptions.pointLabels;
            if (pointLabels)
            {
                var ptlabelRend = pointLabels;

                    if (ptlabelRend.renderer)
                    {
                        if (plot.series[0].data[eP])
                        {
                            defaultPointLabelVal = ptlabelRend
                                .renderer(eP,
                                        plot.series[0].data[eP][0],
                                        plot.series[0].data[eP][1]);
                        }
                        isRender = true;
                    }
                
                if (!isRender
                    && plot.options.seriesPointData
                    && plot.options.seriesPointData[eP])
                {
                    defaultPointLabelVal = plot.options.seriesPointData[eP];
                }
                defaultPointLabelColor = pointLabels.color ? pointLabels.color : defaultPointLabelColor;
                pointLabelLocationFactor = pointLabels.display === 'outside' ? 1.3 : pointLabelLocationFactor;

            }
            
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                self.explosion = self.explode.size;
            }
            else
            {
                self.explosion = 0;
            }
            var fact = (self.cd) * (
            pointLabelLocationFactor) + self.explosion + 2;
            var drawLine = true;
            if (!defaultPointLabelVal)
            {
                drawLine = false;
            }

            var x = self.cb + Math.cos(avgang) * fact + ctx.canvas.offsetLeft;
            var y = self.centerY + Math.sin(avgang) * fact *
            Math.cos(self.bY * Math.PI / 180) + ctx.canvas.offsetTop;
            var labelTop = 0, labelLeft = 0;
            var labelelem = null;
            var isOutside = false;
            if (pointLabels)
            {
                var divEl = document.createElement("DIV");
                divEl.className = "jqplot-pie-series jqplot-data-label";
                divEl.id = tipparentID +'_ptLabel ';
                divEl.style.position = "absolute";
                divEl.style.zIndex = 100;
                divEl.style.color = defaultPointLabelColor;
                divEl.style.fontSize = "12px";
                divEl.innerHTML = defaultPointLabelVal;
                labelelem = $(divEl);
                $(ctx.canvas).before(labelelem);
                divEl = null;
            }
            if (pointLabels
            && pointLabels.display === 'outside')
            {
                isOutside = true;
                var pointLabelTrackerSize = (self.cd*0.15);
                if (pointLabelTrackerSize < 5)
                {
                    pointLabelTrackerSize = 5;
                }
                if (pointLabelTrackerSize > 25)
                {
                    pointLabelTrackerSize = 25;
                }
                if (drawLine)
                {
                    bh.beginPath();
                    bh.strokeStyle = '#e4e4e4';
                }
                var depthCorrection = 0;
                if ((avgang >= 0 && avgang <= Math.PI / 2)
                        || (avgang >= 0 && avgang <= Math.PI))
                {
                    depthCorrection = hK;
                }
                if (drawLine)
                {
                    bh.moveTo(self.cb + (self.cd + self.explosion)
                            * Math.cos(avgang), self.cc
                            + (self.cd + self.explosion) * Math.sin(avgang)
                            + depthCorrection);
                    bh.lineTo(self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang), self.cc
                            + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.sin(avgang) + depthCorrection);
                }
                if ((avgang >= 0 && avgang <= Math.PI / 2)
                        || (avgang >= (3 * Math.PI) / 2 && avgang <= Math.PI * 2))
                {
                    var tempX = self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang) + 5;
                   var tempY = self.cc
                            + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.sin(avgang) + depthCorrection
                    if (drawLine)
                    {
                        bh.lineTo(tempX, tempY);
                    }
                    x = self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang) + 5
                            + (labelelem.width() / 2);
                    labelLeft = x;
                    labelTop = ctx.canvas.offsetTop + (tempY/2) - (labelelem.height() / 2);
                }
                else
                {
                    var tempX = self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang) - 5;
                    var tempY = self.cc + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.sin(avgang) + depthCorrection
                    if (drawLine)
                    {
                        bh.lineTo(tempX, tempY);
                    }
                    x = self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang) -5 - labelelem.width()/2;
                    labelLeft = x;
                    labelTop = ctx.canvas.offsetTop + (tempY/2) - (labelelem.height() / 2);
                }
                if (avgang >= 0 && avgang <= Math.PI)
                {
                    y += labelelem.height() / 2;
                }
                else
                {
                    y -= labelelem.height() / 2;
                }
                if (drawLine)
                {
                    bh.stroke();
                    bh.closePath();
                }
                var fact1 = (self.cd) * (0.6) + self.explosion + 2;

                var x1 = self.cb + Math.cos(avgang) * fact1
                        + ctx.canvas.offsetLeft;
                var y1 = self.centerY + Math.sin(avgang) * fact1
                        * Math.cos(self.bY * Math.PI / 180)
                        + ctx.canvas.offsetTop;
                tipLocation[eP] = {
                    left : Math.round(x1),
                    top : Math.round(y1)
                };
            }
            else
            {

                tipLocation[eP] = {
                    left: Math.round(x),
                    top: Math.round(y)
                };
                if (pointLabels)
                {
                    x -= labelelem.width() /2;
                    y -= labelelem.height() / 2;
                }
            }
            if (pointLabels
            && pointLabels.display === 'outside' && plot.legend.placement === "outsideGrid"
            && (plot.legend.location === "w"
                    || plot.legend.location === "nw" || plot.legend.location === "sw"))
            {
                x = x + plot.legend.getWidth();
                labelLeft = labelLeft + plot.legend._elem[0].offsetWidth + 10;
            }
            x = Math.round(x);
            y = Math.round(y);
            if(!isOutside)
            {
                labelLeft = x;
                labelTop = y;
            }
            if (pointLabels)
            {
                labelelem.css({
                    left: labelLeft,
                    top: labelTop
                });
            }

            start += length;
            labelelem = null;
        }
        self.cc = hO;
        

        self.fL = function()
        {
            var jb = navigator.userAgent.toLowerCase();
            return (!/^opera/.test(jb) && /msie/.test(jb));
        };

        
        self.cc = hO;
        self.ba = null;
    }
     bh.restore();
        }
        self.drawPie(ctx, gd, options, plot);
        bh = null;
    };
  
    function fw(map, coords)
    {
        var fx = document.createElement('AREA');
        fx.setAttribute('id', self.bc);
        fx.setAttribute('class', 'piearea');
        fx.setAttribute('shape', 'poly');
        fx.setAttribute('coords', coords);
        fx.setAttribute('href', 'javascript:void(0);');
        map.appendChild(fx);
        map = null;
        return fx;
    }

    function rgb(a)
    {
        var o = a.toLowerCase();
        return [parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16),
                parseInt(o.slice(4), 16)];
    }
    function shade(a, b)
    {
        var v = [], i;
        for (i = 0; i < 3; i++)
        {
            v[i] = Math.round(a[i] * b);
            if (v[i] > 255)
            {
                v[i] = 255;
            }
            if (v[i] < 0)
            {
                v[i] = 0;
            }
        }
        return v;
    }
    function hex(a)
    {
        var f = _hex;
        return f(a[0]) + f(a[1]) + f(a[2]);
    }
    function _hex(a)
    {
        return ('0' + a.toString(16)).slice(-2);
    }

    function light(cc)
    {
        return '#' + hex(shade(rgb(cc), 0.8));
    }
    function darker(cc, value)
    {
        return '#' + hex(shade(rgb(cc), value));
    }
    function calcRPrime(ang1, ang2, sliceMargin, fill, lineWidth)
    {
        var rprime = 0;
        var ang = ang2 - ang1;
        var absang = Math.abs(ang);
        var sm = sliceMargin;
        if (fill === false)
        {
            sm += lineWidth;
        }

        if (sm > 0 && absang > 0.01 )
        {
            if (absang <= Math.PI)
            {
                rprime = parseFloat(sm) / 2.0 / calcRadiusAdjustment(absang);
            }
            else
            {
                rprime = parseFloat(sm) / 2.0;
            }
        }
        // Dont allow it grow more
        if (rprime > 35)
        {
            rprime = 30;
        }
        return rprime;
    }
    function calcRadiusAdjustment(ang)
    {
        return Math.cos((ang - (ang - Math.PI) / 8 / Math.PI) / 2.0);
    }
}

tiny.PieRender.prototype.callEvents = function(seriesIndex, typeName, seriesData,seriesID,seriesIdIndexMap)
{
};
})(jQuery);

tiny.util = tiny.util || {};
tiny.util.EventListenerList = function()
{
	var listenerList = {};
	
	this.add = function(typeName, listener)
	{
		if(!listener)
		{
			return;
		}
		if(!listenerList[typeName])
		{
			listenerList[typeName] = [];
		}
		listenerList[typeName][listenerList[typeName].length] = listener;
	};
	
	this.remove = function(typeName, listener)
	{
		if(!listener || !listenerList[typeName])
		{
			return;
		}
		
		for(var i = 0, l = listenerList[typeName].length; i < l; ++i)
		{
			if(listenerList[typeName][i] === listener)
			{
				listenerList[typeName].splice(i,1);
				if(listenerList[typeName].length === 0)
				{
					delete listenerList[typeName];
				}
				return true;
			}
		}
		return false;
	};
	this.removeChartListener = function(typeName, listener)
	{
		if(!listener || !listenerList[typeName])
		{
			return;
		}
		
		for(var i = 0, l = listenerList[typeName].length; i < l; ++i)
		{
			if(listenerList[typeName][i].handler === listener.handler)
			{
				listenerList[typeName].splice(i,1);
				if(listenerList[typeName].length == 0)
				{
					delete listenerList[typeName];
				}
				return true;
			}
		}
		return false;
	};
    this.removeListener = function(typeName, listener)
	{
		if(!listener || !listenerList[typeName])
		{
			return;
		}
		
		for(var i = 0, l = listenerList[typeName].length; i < l; ++i)
		{
			if(listenerList[typeName][i].handler === listener.handler)
			{
				listenerList[typeName].splice(i,1);
				if(listenerList[typeName].length == 0)
				{
					delete listenerList[typeName];
				}
				return true;
			}
		}
		return false;
	};
	this.getListeners = function(typeName)
	{
		var result = [];
		if(!listenerList[typeName])
        {
            return result;
        }
		for(var i = 0, j = listenerList[typeName].length; i < j; i++)
		{
			result[result.length] = listenerList[typeName][i];
		}
		
		return result;
		
	};
	
};

/**
 * Event class manage event
 */
tiny.Event = function()
{

   this.observers = false;

  /**
   * Observe a event, attach a function to the element. If element is attached multi function,
   * it can also execute each of function according to the attaching order.
   * @param {object} element - window or document element
   * @param {string} name - event name of element to be attached
   * @param {string} func - function name to be attached
   */
   this.addListener = function(element, name, func)
   {
        if ((element == null) || (typeof(element) != "object") || (typeof(name) != "string") || (typeof(func) != "function"))
        {
            return;
        }

        for (var id in this.observers)
        {
            if (this.observers[id][0] === element && this.observers[id][1] === name && this.observers[id][2] === func)
            {
                return;
            }
        }

        var useCapture = false;

        if (name == 'keypress'
            && (navigator.appVersion.match(/Konqueror|Safari|KHTML/) || element.attachEvent))
        {
            name = 'keydown';
        }

        var addUnLoad = false;
        if (element == window && (name=="unload"||name=='unload') && func!= this.unloadCache)
        {
            this.removeListener(window, "unload", this.unloadCache);
            addUnLoad = true;
        }

        this._observeAndCache(element, name, func, useCapture);
        if (addUnLoad)
        {
            this.addListener(window, "unload", this.unloadCache);
        }
    }

     /**
     * Remove Listener of event, If element is attached multi function, it can only stop the specify function.
     * @param {object} element - window or document element
     * @param {string} name - event name of element to be stopped
     * @param {string} func - function name to be stopped
     */
    this.removeListener = function(element, name, func)
    {
        if ((element == null) || (typeof(element) != "object") || (typeof(name) != "string") || (typeof(func) != "function"))
        {
           return;
        }
        var useCapture = false;
        if (name == 'keypress'
           && (navigator.appVersion.match(/Konqueror|Safari|KHTML/) || element.detachEvent))
        {
           name = 'keydown';
        }

        try
        {
            if (element.removeEventListener)
            {
                element.removeEventListener(name, func, useCapture);
            }
            else if (element.detachEvent)
            {
                element.detachEvent('on' + name, func);
            }

            for (var id in this.observers)
            {
                if (this.observers[id][0] === element && this.observers[id][1] === name && this.observers[id][2] === func)
                {
                    this.observers.splice(id, 1);
                    return;
               }
            }
        }
        catch(ex)
        {
        }
    }

  this.event = function(event)
  {
      return event || window.event;
  }

 
  this.element = function(event)
  {
      return event.target || event.srcElement;
  }


  this.isLeftClick = function(event)
  {
      return ((event.which && event.which==1) || (event.button && event.button==1));
  }


  this.pointerX = function(event)
  {
      return (event.pageX
          || (event.clientX + (document.documentElement.scrollLeft || document.body.scrollLeft)));
  }


  this.pointerY = function(event)
  {
      return (event.pageY
          || (event.clientY + (document.documentElement.scrollTop || document.body.scrollTop)));
  }

 
  this.charCode = function(event)
  {
      return (event.charCode) ? event.charCode : ((event.keyCode) ? event.keyCode : event.which);
  }

 
  this.stop = function(event)
  {
      if (event.preventDefault)
      {
          event.preventDefault();
          event.stopPropagation();
      }
      else
      {
          event.returnValue = false;
          event.cancelBubble = true;
      }
  }


    this._observeAndCache = function(element, name, func, useCapture)
    {
        if (!this.observers)
        {
            this.observers = [];
        }
        if (element.addEventListener)
        {
            this.observers.push([element, name, func, useCapture]);
            element.addEventListener(name, func, useCapture);
        }
        else if (element.attachEvent)
        {
            this.observers.push([element, name, func, useCapture]);
            element.attachEvent('on' + name, func);
        }
    }

    var _eventObj = this;

    /**
     * Unload the event cache of page, it would be stop all of the event observe in current page.
     */
    this.unloadCache = function()
    {
        if (!_eventObj.observers)
        {
            return;
        }

        for (var i = _eventObj.observers.length-1; i >= 0; i--)
        {
            _eventObj.stopObserving.apply(_eventObj, _eventObj.observers[i]);
        }
        _eventObj.observers = false;
    }

  
    this.addContextMenu = function(element)
    {
        if (element == null || (typeof(element) != "object"))
        {
            return;
        }

        this.addListener(element, "contextmenu", stopContextMenuEvtFunc);
    }

    this.removeContextMenu = function(element)
    {
        if (element == null || (typeof(element) != "object"))
        {
            return;
        }

        this.removeListener(element, "contextmenu", stopContextMenuEvtFunc);
    }

    this._stopContextMenuEvtHandle = function(event)
    {
        var evt = this.event(event);
        this.stop(evt);
    }


}
tiny.Event = new tiny.Event();


(function($){
tiny.CylindricalGuage = function(id, series, ctx, eventTriggerHandler,plot)
{
	var self = this;
	this.series = series;
	this.id = series.tinyId;

	this.type = 'cylindricalguage';
	this.config = {
		'radius' : 47,
		'height' : 140,
		'squeeze' : 0.29,
		'color' : 0x00,
		'factor' : 1,
		'fluidColor' : 'ca5555',
		'borderColor' : '#D2D2D2',
		'xoffset' : 2,
		'yoffset' : 20,
		'borderThickness' : 2,
		'threshold' : this.series.tinyThreshold
	};
    this.cylinderEventTriggerHandler = eventTriggerHandler;
	var diameter = 2 * this.config.radius;
    
    var canvasWidth = ctx.canvas.width;
    diameter = canvasWidth;
    this.config.radius = canvasWidth/2;
    var canvasHeight = ctx.canvas.height;
    this.config.height = canvasHeight-(diameter/2);
    
	var drawX = 0;
	this.config.xoffset = ctx.canvas.width / 2 - diameter / 2;
	this.config.yoffset = diameter/6;

	if (series.label)
	{
		series._labelElem = $('<div class="jqplot-meterGauge-label" style="position:absolute;">'
				+ series.label + '</div>');
		series.canvas._elem.after(series._labelElem);
        var cw = ctx.canvas.width;
        var maxlablewid = cw-10,isIE = $.browser.msie,isShowtooltip = false;            
            var cssobj = {'text-overflow':'ellipsis','max-width':maxlablewid+'px','overflow':'hidden' ,'height':'30px','white-space':'pre'};
            series._labelElem.css(cssobj);
            if (parseInt(series._labelElem[0].scrollWidth) > parseInt(series._labelElem[0].clientWidth))
            {
                series._labelElem.css('z-index','21');
                series._labelElem.attr('title',series.label);
            }
        series._labelElem.css({
			'left' : ctx.canvas.width / 2 
					- (series._labelElem.outerWidth(true) / 2),
			'top' : ctx.canvas.height
            });
	}

	this.config.bLower = this.config.squeeze * this.config.radius;
	this.config.bUpper = this.config.bLower / this.config.factor;
	this.config.hMin = this.config.bLower + this.config.bUpper;
    plot.cylinderref = self;
	var length = $('#' + series.tinyId + ' .jqplot-series-shadowCanvas').length;
	if (length > 1)
	{
		$($('#' + series.tinyId + ' .jqplot-series-shadowCanvas')[0]).remove();
		$($('#' + series.tinyId + ' .jqplot-series-canvas')[0]).remove();
	}
	this.fbody_canvas = $('#' + series.tinyId + ' .jqplot-series-shadowCanvas')[0];
	$(this.fbody_canvas).css('z-index', 20);
	this.fTop_canvas = $('#' + series.tinyId + ' .jqplot-series-canvas')[0];
	$(this.fTop_canvas).css('z-index', 20);

	this.animation = new Animation;

    this.dispose = function()
    {
        self.fTop_canvas = null;
        self.fbody_canvas = null;
        self.series._labelElem = null;
    }

};

CanvasRenderingContext2D.prototype.lineStyle = function(width, color, alpha)
{
	if (color)
		this.strokeStyle = color;
	if (width)
		this.lineWidth = width;
	if (alpha)
		this.globalAlpha = alpha;
};

/**
 * Draw cylinder
 * 
 * @param canvas
 *            object
 */
tiny.CylindricalGuage.prototype.drawCylinder = function(borderContext)
{
	var borderColor = this.config.borderColor;
	var borderThickness = this.config.borderThickness;
	var xoffset = this.config.xoffset;
	var yoffset = this.config.yoffset;
	var fluidColor = this.config.fluidColor;

	var length = $('#' + this.series.tinyId + ' .jqplot-event-canvas').length;
	if (length > 1)
	{
		$($('#' + this.series.tinyId + ' .jqplot-event-canvas')[0]).remove();
	}
	var cylinderTop_canvas = $('#' + this.series.tinyId
			+ ' .jqplot-event-canvas')[0];
	$(cylinderTop_canvas).css('z-index', 18);
	var cylinderTop = cylinderTop_canvas.getContext("2d");
	var grd = cylinderTop.createLinearGradient(this.config.xoffset,
			this.config.yoffset, this.config.xoffset + 2 * this.config.radius,
			this.config.yoffset);
	grd.addColorStop(0, 'rgba(220,220,220,0.5)');
	grd.addColorStop(0.01, 'rgba(249,249,249,0.5)');
	grd.addColorStop(0.23, 'rgba(237,237,237,0.5)');
	grd.addColorStop(0.56, 'rgba(249,249,249,0.5)');
	grd.addColorStop(0.76, 'rgba(237,237,237,0.5)');
	grd.addColorStop(0.99, 'rgba(249,249,249,0.5)');
	grd.addColorStop(1, 'rgba(220,220,220,0.5)');
	cylinderTop.fillStyle = grd;

	cylinderTop.beginPath();
	cylinderTop.lineStyle(2, '#e2e2e2', 1);
	cylinderTop.moveTo(xoffset, yoffset);
	
	startAng = Math.PI;
	directionSign = 1;
	var xcenter = this.config.radius + xoffset;
	var ycenter = yoffset;
	cylinderTop.save();
	cylinderTop.shadowColor = '#FFFFFF';
	cylinderTop.shadowBlur = 20;
	cylinderTop.shadowOffsetX = 2;
	cylinderTop.shadowOffsetY = 2;
	this.drawCurve(cylinderTop, startAng, directionSign, xcenter, ycenter,
			false);

	

	startAng = 0;
	directionSign = 1;
	xcenter = this.config.radius + xoffset;
	ycenter = yoffset;
	this
			.drawCurve(cylinderTop, startAng, directionSign, xcenter, ycenter,
					true);
	cylinderTop.fill();
	cylinderTop.stroke();
	cylinderTop.closePath();
	cylinderTop.restore();

	
	var threshold = this.config.threshold;
	threshold = ((threshold > 100) || (threshold < 0)) ? 50 : threshold;
	var thresholdHeight = Math.round(this.config.height * threshold / 100);

	cylinderTop.beginPath();
	cylinderTop.lineStyle(2, '#e1e1e2', .35);
	cylinderTop.moveTo(xoffset, yoffset + this.config.height - thresholdHeight);
	
	startAng = Math.PI;
	directionSign = 1;
	xcenter = this.config.radius + xoffset;
	ycenter = yoffset + this.config.height - thresholdHeight;
	this.drawDashedCurve(cylinderTop, startAng, directionSign, xcenter,
			ycenter, false);

	

	startAng = 0;
	directionSign = 1;
	this.drawDashedCurve(cylinderTop, startAng, directionSign, xcenter,
			ycenter, true);
	cylinderTop.stroke();
	cylinderTop.closePath();
	cylinderTop.restore();

	

	cylinderTop.beginPath();
	cylinderTop.lineStyle(1, borderColor, 1);
	cylinderTop.moveTo(xoffset, yoffset + this.config.height - thresholdHeight);
	
	startAng = Math.PI;
	directionSign = 1;
	xcenter = this.config.radius + xoffset;
	ycenter = yoffset + this.config.height - thresholdHeight;
	this.drawCurve(cylinderTop, startAng, directionSign, xcenter, ycenter,
			false);

	

	startAng = 0;
	directionSign = 1;
	this
			.drawCurve(cylinderTop, startAng, directionSign, xcenter, ycenter,
					true);
	cylinderTop.fill();
	cylinderTop.closePath();
	cylinderTop.restore();

	

	borderContext.beginPath();
	var seriesXoffset = xoffset + parseInt($('#' + this.series.tinyId + ' .jqplot-series-shadowCanvas').css('left'));
	var seriesYoffset = yoffset + parseInt($('#' + this.series.tinyId + ' .jqplot-series-shadowCanvas').css('top'));
	borderContext.moveTo(seriesXoffset, seriesYoffset);
	var grd = borderContext.createLinearGradient(seriesXoffset,
			seriesYoffset, seriesXoffset + 2 * this.config.radius,
			seriesYoffset);
	grd.addColorStop(0, '#dcdcdc');
	grd.addColorStop(0.01, '#ffffff');
	grd.addColorStop(0.04, '#f5f4f4');
	grd.addColorStop(0.13, '#ededed');
	grd.addColorStop(0.37, '#fefefe');
	grd.addColorStop(0.76, '#ededed');
	grd.addColorStop(0.93, '#f8f7f7');
	grd.addColorStop(0.99, '#ffffff');
	grd.addColorStop(1, '#e9e9e9');
	borderContext.fillStyle = grd;
	startAng = Math.PI;
	directionSign = -1;
	xcenter = this.config.radius + seriesXoffset;
	ycenter = seriesYoffset;
	this.drawCurve(borderContext, startAng, directionSign, xcenter, ycenter,
			true);
	borderContext.lineStyle(borderThickness, borderColor, 5);
	borderContext.lineTo(2 * this.config.radius + seriesXoffset, this.config.height
			+ seriesYoffset);
	borderContext.lineStyle(borderThickness, borderColor, 0);
	startAng = 0;
	directionSign = -1;
	xcenter = this.config.radius + seriesXoffset;
	ycenter = this.config.height + seriesYoffset;
	this.drawCurve(borderContext, startAng, directionSign, xcenter, ycenter,
			true);
	borderContext.lineStyle(borderThickness, borderColor, 5);
	borderContext.lineTo(seriesXoffset, seriesYoffset);
	borderContext.fill();
	borderContext.closePath();

	
	grd = borderContext.createLinearGradient(this.config.xoffset,
			this.config.yoffset, this.config.xoffset + 2 * this.config.radius,
			this.config.yoffset);
	grd.addColorStop(0, '#f1f1f1');
	grd.addColorStop(0.04, '#e1e1e1');
	grd.addColorStop(0.13, '#e6e6e6');
	grd.addColorStop(0.37, '#f8f8f8');
	grd.addColorStop(0.76, '#dfdfdf');
	grd.addColorStop(0.93, '#eaeaea');
	grd.addColorStop(1, '#f3f3f3');
	borderContext.fillStyle = grd;
	borderContext.beginPath();
	borderContext.moveTo(xoffset, yoffset + this.config.height);
	
	startAng = Math.PI;
	directionSign = -1;
	xcenter = this.config.radius + xoffset;
	ycenter = yoffset + this.config.height;
	borderContext.save();
	borderContext.shadowColor = '#FFFFFF';
	borderContext.shadowBlur = 20;
	borderContext.shadowOffsetX = 2;
	borderContext.shadowOffsetY = 2;
	this.drawCurve(borderContext, startAng, directionSign, xcenter, ycenter,
			true);
	
	startAng = 0;
	directionSign = -1;
	this.drawCurve(borderContext, startAng, directionSign, xcenter, ycenter,
			true);
	borderContext.fill();
	borderContext.closePath();
	borderContext.restore();
	
	var length = $('#' + this.series.tinyId + ' .jqplot-base-canvas').length
	if (length > 1)
	{
		$($('#' + this.series.tinyId + ' .jqplot-base-canvas')[0]).remove();
	}
	var lightEffect_canvas = $('#' + this.series.tinyId
			+ ' .jqplot-base-canvas')[0];
	lightEffect_canvas.height = yoffset + this.config.height
			+ this.config.bLower;
	$(lightEffect_canvas).css(
			'left',
			$('#' + this.series.tinyId + ' .jqplot-series-shadowCanvas').css(
					'left'));
	$(lightEffect_canvas).css(
			'top',
			$('#' + this.series.tinyId + ' .jqplot-series-shadowCanvas').css(
					'top'));
	$(lightEffect_canvas).css('z-index', 21);
	var lightEffect = lightEffect_canvas.getContext("2d");
	lightEffect.beginPath();
	lightEffect.globalAlpha = 0.3;
	lightEffect.moveTo(xoffset, yoffset);
	var grd = lightEffect.createLinearGradient(this.config.xoffset,
			this.config.yoffset, this.config.xoffset + 2 * this.config.radius,
			this.config.yoffset);
	grd.addColorStop(0.09, 'rgba(237,237,237,0)');
	grd.addColorStop(0.10, '#ffffff');
	grd.addColorStop(0.15, '#ffffff');
	grd.addColorStop(0.18, '#ffffff');
	grd.addColorStop(0.2, '#ffffff');
	grd.addColorStop(0.21, 'rgba(220,220,220,0)');
	lightEffect.fillStyle = grd;
	
	startAng = Math.PI;
	directionSign = -1;
	xcenter = this.config.radius + xoffset;
	ycenter = yoffset;
	this
			.drawCurve(lightEffect, startAng, directionSign, xcenter, ycenter,
					true);
	
	lightEffect.lineStyle(borderThickness, borderColor, 5);
	lightEffect.lineTo(2 * this.config.radius + xoffset, this.config.height
			+ yoffset);
	lightEffect.lineStyle(borderThickness, borderColor, 0);
	
	startAng = 0;
	directionSign = 1;
	xcenter = this.config.radius + xoffset;
	ycenter = this.config.height + yoffset;
	this
			.drawCurve(lightEffect, startAng, directionSign, xcenter, ycenter,
					true);
	
	lightEffect.lineStyle(borderThickness, borderColor, 5);
	lightEffect.lineTo(xoffset, yoffset);
	lightEffect.fill();
	lightEffect.closePath();

	

	borderContext.beginPath();
	borderContext.lineStyle(7, '#e2e2e2', 0.75);

	var grd = borderContext.createLinearGradient(this.config.xoffset,
			this.config.yoffset, this.config.xoffset + 2 * this.config.radius,
			this.config.yoffset);
	grd.addColorStop('0', '#e7e7e9');
	grd.addColorStop('.5', '#bcbdc0');
	grd.addColorStop('.6', '#bcbdc0');
	grd.addColorStop('1', '#e7e7e9');
	if (!isIE() && $.browser.version !== '7.0')
	{
		borderContext.strokeStyle = grd;
	}
	
	borderContext.moveTo(xoffset, this.config.height + this.config.yoffset);

	
	startAng = Math.PI;
	directionSign = -1;
	xcenter = this.config.radius + xoffset;
	ycenter = this.config.height + this.config.yoffset;
	this.drawCurve(borderContext, startAng, directionSign, xcenter, ycenter,
			false);
	borderContext.stroke();
	borderContext.closePath();
	

};

var isIE = function( )
{
	var jb = navigator.userAgent.toLowerCase();
    	var IE_VERSION = 0;
        if (/msie/.test(jb))
        {
            IE_VERSION = +navigator.userAgent.match(/MSIE ([\d.]+)?/)[1];
        }
	return (!/^opera/.test(jb) && /msie/.test(jb) && IE_VERSION === 8);
};

/**
 * Draw fluid
 * 
 * @param name
 */
tiny.CylindricalGuage.prototype.drawFluid = function(fbody_canvas, fTop_canvas,
		height, val, heightFloat)
{
	clearCanvas(fbody_canvas);
	clearCanvas(fTop_canvas);
	var fluidColor = this.config.fluidColor;
	var topHighlightThickness = 1;
	var rFluid = this.config.radius;
	var xoffset = this.config.xoffset;
	var yoffset = this.config.yoffset;
	var fbody = fbody_canvas.getContext("2d");
	var fTop = fTop_canvas.getContext("2d");
	
	fbody.beginPath();
	fbody.lineStyle(0, '#F2F2F2', 0);
	var grd = fbody.createLinearGradient(this.config.xoffset,
			this.config.yoffset, this.config.xoffset + 2 * this.config.radius,
			this.config.yoffset);
	var value = Math.round(((height) * 100) / this.config.height);
    var valFloat = parseFloat(((heightFloat) * 100) / this.config.height, 10)
    var valueData = this.series.data[0][1];
    this.series.heightvalue = valueData;
	var dataLen = this.series.intervals.length;
	var valArr = [];
	for ( var i = 0; i < dataLen; i++)
	{
		valArr.push(this.series.intervals[i][0]);
	}
	valArr.sort(function(a, b)
	{
		return a - b
	});
	var colorVal;
	for ( var i = 0; i < dataLen; i++)
	{
		if (valueData <= valArr[i])
		{
			colorVal = valArr[i];
			break;
		}
	}
    	var colorIndex = 0;
	for ( var i = 0; i < dataLen; i++)
	{
		if (this.series.intervals[i][0] === colorVal)
		{
			colorIndex = i;
			break;
		}
	}
    if (this.series.intervals.length)
    {
        var colorArray = this.series.intervals[colorIndex][2];
        var gradColor = this.series.intervals[colorIndex][4];
        if ($.isArray(colorArray))
        {
            for ( var k = 0; k < colorArray.length; k++)
            {
                grd.addColorStop(colorArray[k][0],
                        colorArray[k][1]);
            }
            fbody.fillStyle = grd;
            fTop.fillStyle = grd;
        }
        else
        {
            grd.addColorStop(0,colorArray);
            grd.addColorStop(0.4,gradColor);
            grd.addColorStop(0.7,colorArray);
            grd.addColorStop(1,colorArray);
            fbody.fillStyle = grd;
            fTop.fillStyle = grd;
        }
	}
    else
    {
        return;
    }

	$('#' + this.series.tinyId + ' .jqplot-meterGauge-value').remove();
    	var elem = null;
        
        var percentageValue = (this.series.max - this.series.min) * valFloat / 100 +  this.series.min;
        var cylinderValue,tipvalue = '';
        if (this.series.labelRenderer)
        {
            var labelRendererMap = 
            {
                'max':this.series.max,
                'min':this.series.min,
                'unit':this.series.tinyunit,
                'currentDataValue': percentageValue,
                'actualDataValue':this.series.dataVal,
                'percentageValue': value
            };
            var cylinderValue = this.series.labelRenderer(labelRendererMap);
            elem = $('<div id="meterGaugeValue'+this.id+'" class="jqplot-meterGauge-value" style="position:absolute;z-index:25;">'
                        + cylinderValue
                        + '</div>');
            tipvalue = cylinderValue;
        }
        else
        {
            cylinderValue = value;
            if (this.series.tinyunit)
            {
                elem = $('<div id="meterGaugeValue'+this.id+'" class="jqplot-meterGauge-value" style="position:absolute;z-index:25;">'
                        + cylinderValue
                        + '<span class=tiny-meter-unit style="font-size:18px;z-index:25;">'
                        + this.series.tinyunit + '</span></div>');
                tipvalue = cylinderValue + this.series.tinyunit;
            }
            else
            {
                elem = $('<div id="meterGaugeValue'+this.id+'" class="jqplot-meterGauge-value" style="position:absolute;;z-index:25;">'
                        + cylinderValue + '</div>');
                tipvalue = cylinderValue;
            }
        }
        elem.css('max-width',(2*this.config.radius-10)+'px');
        elem.css('white-space','nowrap');
	this.series.canvas._elem.after(elem);
	if (parseInt(elem[0].scrollWidth) > parseInt(elem[0].clientWidth)) 
	{
	    elem.css('z-index','71');
	    elem.attr('title',tipvalue);
	}

	elem.css({
		'left' : (fbody.canvas.width/2 -  elem.outerWidth(true)/2+10),
		'top' : this.config.yoffset + this.config.height
				- Math.round(this.config.height * value / 100)
				- (elem.outerHeight(true)) + 25
	});

	var xcenter, ycenter, directionSign, startAng;
	
	fbody.moveTo(xoffset, this.config.height + yoffset - height);
	
	startAng = Math.PI;
	directionSign = 1;
	xcenter = rFluid + xoffset;
	ycenter = this.config.height + yoffset - height;
	this.drawCurve(fbody, startAng, directionSign, xcenter, ycenter, false);
	
	fbody.lineTo(2 * rFluid + xoffset, this.config.height + yoffset);
	
	startAng = 0;
	directionSign = 1;
	xcenter = rFluid + xoffset;
	ycenter = this.config.height + yoffset;
	this.drawCurve(fbody, startAng, directionSign, xcenter, ycenter, true);
	
	fbody.lineTo(xoffset, this.config.height + yoffset - height);
	fbody.fill();
	fbody.closePath();

	
	fTop.beginPath();
	fTop.moveTo(2 * rFluid + xoffset, this.config.height + yoffset - height);
	startAng = 0;
	directionSign = 1;
	xcenter = rFluid + xoffset;
	ycenter = this.config.height + yoffset - height;
	this.drawCurve(fTop, startAng, directionSign, xcenter, ycenter, true);
	startAng = Math.PI;
	this.drawCurve(fTop, startAng, directionSign, xcenter, ycenter, true);
	fTop.fill();
	fTop.closePath();
	
	fTop.lineStyle(topHighlightThickness, '#F2F2F2', 0.7);
	fTop.beginPath();
	fTop.moveTo(xoffset, this.config.height + yoffset - height);
	startAng = Math.PI;
	directionSign = -1;
	xcenter = rFluid + xoffset;
	ycenter = this.config.height + yoffset - height;
	this.drawCurve(fTop, startAng, directionSign, xcenter, ycenter, true);
	fTop.moveTo(xoffset, this.config.height + yoffset - height);
	startAng = Math.PI;
	directionSign = 1;
	this.drawCurve(fTop, startAng, directionSign, xcenter, ycenter, true);
	fTop.stroke();
	fTop.closePath();
};

/**
 * Update fluid position
 */
tiny.CylindricalGuage.prototype.updateFluid = function(newHeightPercent, newHeightPercentFloat, animate,plot)
{
    var min = 0;
    var max = 100;
    if (plot)
    {
        if (plot.series[0])
        {
            min = plot.series[0].min;
            max = plot.series[0].max;
        }
    }
    var range = max - min;
    newHeightPercent = (newHeightPercent > max) ? max
			: newHeightPercent;
    newHeightPercent = (newHeightPercent < min) ? min
			: newHeightPercent;
    newHeightPercent =  ((newHeightPercent - min) / range) * 100;
	var newHeight = Math.round(this.config.height * newHeightPercent / 100);
    
    newHeightPercentFloat = (newHeightPercentFloat > max) ? max
			: newHeightPercentFloat;
    newHeightPercentFloat = (newHeightPercentFloat < min) ? min
			: newHeightPercentFloat;
    newHeightPercentFloat =  ((newHeightPercentFloat - min) / range) * 100;
    var newHeightFloat = parseFloat(this.config.height * newHeightPercentFloat / 100, 10).toFixed(2);
    
	if (newHeight < 0)
	{
		return;
	}
	var that = this;
	if (animate)
	{
		this.series.plot.isAnimateOn = true;
		this.animation.setOptions(
				{
					compute : function(delta)
					{
						that.drawFluid(that.fbody_canvas, that.fTop_canvas,
								newHeight * delta, delta, newHeightFloat * delta);
					},
					complete : function( )
					{
						that.series.plot.isAnimateOn = false;
						createCylinderMap(that.series.plot);
					},
                    			duration: 1800
				}).start();
	}
	else
	{
		this.series.plot.isAnimateOn = false;
		this.drawFluid(this.fbody_canvas, this.fTop_canvas, newHeight,null, newHeightFloat);
		createCylinderMap(that.series.plot);
	}
};
var cylinderTip;
var showTip = function(selfd)
{
	var plot = selfd;
	var title = '';
	var tipData = '';
	if (plot.series.tinytip)
	{
		if (plot.series.tinytip.title)
		{
			title = plot.series.tinytip.title;
		}
		if (plot.series.tinytip.data)
		{
			tipData = plot.series.tinytip.data(plot.series.data[0][1]);
		}
	}
    	var elem = $("#meterGaugeValue"+plot.id);
       
    var top;
    if (plot.series.tinyType ==='cylinder')   
    {    
        var max = (plot.series.max) ? plot.series.max : 100;
        var min = (plot.series.min) ? plot.series.min : 0;
        
        var range = max - min;
        var newHeightPercent = plot.series.data[0][1];
        newHeightPercent = (newHeightPercent > max) ? max
                : newHeightPercent;
        newHeightPercent = (newHeightPercent < min) ? min
                : newHeightPercent;
        newHeightPercent =  ((newHeightPercent - min) / range) * 100;
        top = plot.config.yoffset + plot.config.height
			- Math.round(plot.config.height * newHeightPercent / 200)
			- (elem.outerHeight(true));
    }
    else
    {
        top = plot.config.yoffset + plot.config.height
			- Math.round(plot.config.height * plot.series.data[0][1] / 200)
			- (elem.outerHeight(true));
    }
        
	var left = plot.config.xoffset + (plot.config.radius * 2) + 7;
	cylinderTip = $('<div style="position:absolute;z-index:40;"><DIV class=iemp_tips_pop_main><DIV class="iemp_tips_pop_tit iemp_tips_pop_tit_cin cylindricaltinyChartTipTitle" style="margin-left: 14px; margin-right: 3px; ">'
			+ title
			+ '</DIV><DIV class=iemp_tips_pop_arrow></DIV><DIV class=iemp_tips_pop_ml><DIV class=iemp_tips_pop_mr><DIV class="tiny-tips_pop_mc cylindricaltinyChartTipData">'
			+ tipData
			+ '</DIV></DIV></DIV></DIV><DIV class=iemp_tips_pop_b><SPAN class=iemp_tips_pop_b_l></SPAN><DIV class=iemp_tips_pop_b_c><DIV class=iemp_tips_pop_b_cin></DIV></DIV><SPAN class=iemp_tips_pop_b_r></SPAN></div>');
	$(plot.fbody_canvas).after(cylinderTip);
    
    	var dataLen = plot.series.intervals.length;
	var valArr = [];
	for ( var i = 0; i < dataLen; i++)
	{
		valArr.push(plot.series.intervals[i][0]);
	}
	valArr.sort(function(a, b)
	{
		return a - b
	});
	var colorVal,colorIndex = 0,value = plot.series.heightvalue;
	for ( var i = 0; i < dataLen; i++)
	{
		if (value <= valArr[i])
		{
			colorVal = valArr[i];
			break;
		}
	}
	for ( var i = 0; i < dataLen; i++)
	{
		if (plot.series.intervals[i][0] === colorVal)
		{
			colorIndex = i;
			break;
		}
	}
    
    
	$('.iemp_tips_pop_tit').css('background-color',
			plot.series.tinyBorderClr[colorIndex]);
	cylinderTip.css({
		'left' : left,
		'top' : top
	});

}

var hideTip = function( )
{
	if (cylinderTip)
	{
		cylinderTip.remove();
		cylinderTip = null;
	}
}

var createCylinderMap = function(plot)
{
	var elem = plot.cylinderref;
	var left = elem.config.xoffset + 10;
	var top = elem.config.yoffset - 2;
	var h = elem.config.height +elem.config.yoffset;
	var w = elem.config.radius*2;
    var parentID = "map_"+plot.target[0].id;

	var map = document.createElement('MAP');
	map.setAttribute('name', 'map_');
	map.setAttribute('id', parentID);
	$(elem.fbody_canvas).after(map);

    eD(map, 'mouseover', function( )
	{
        if (elem.series.tinytip)
        {
            showTip(elem);
        }
	});
	eD(map, 'mouseout', function( )
	{
        if (elem.series.tinytip)
        {
            hideTip(elem);
        }
	});

	var fz = '<img id="pieImg'+parentID+'" src="data:image/gif;base64,'
			+ 'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAAB'
			+ 'AAEAAAICRAEAOw==" width=' + w + '" height="' + h
			+ '" usemap="#' + parentID
			+ '" style="border:0;position:absolute;left: ' + left + 'px;top:'
			+ top + 'px;clip:\'rect(0, ' + 12 + 'px, ' + 34
			+ 'px, 0)\';filter:alpha(opacity=0);z-index:' + (70) + ';">';
	map.innerHTML += fz;
        
        var mouseOver = function(event)
        {
            elem.cylinderEventTriggerHandler('mouseover', event);
        }
        var mouseOut = function(event)
        {
            elem.cylinderEventTriggerHandler('mouseout', event);
        }
        var mouseClick = function(event)
        {
            
            elem.cylinderEventTriggerHandler('click', event);
        }
        
        eD(map, 'mouseover', mouseOver);
        eD(map, 'mouseout', mouseOut);
        eD(map, 'click', mouseClick);
        
    }
    
    
var eD = function(eE, eF, eG)
{
	if (eE.attachEvent)
	{
        $(eE).bind(eF,eG);
		return true;
	}
	else if (eE.addEventListener)
	{
		eE.addEventListener(eF, eG, false);
		return true;
	}
	return false;
};

var clearCanvas = function(canvas)
{
	var context = canvas.getContext("2d");
	context.clearRect(0, 0, canvas.width, canvas.height);
};

tiny.CylindricalGuage.prototype.drawTest = function(plot)
{
	var length = $('#' + this.series.tinyId + ' .jqplot-grid-canvas').length
	if (length > 1)
	{
		$($('#' + this.series.tinyId + ' .jqplot-grid-canvas')[0]).remove();
	}
	var borderCanvas = $('#' + this.series.tinyId + ' .jqplot-grid-canvas')[0]; 
	var borderContext = borderCanvas.getContext("2d");
	this.drawCylinder(borderContext);
	if (this.series.plot.animate === true)
	{
		this.updateFluid(this.series.data[0][1], this.series.dataVal, true, plot);
	}
	else
	{
		this.updateFluid(this.series.data[0][1], this.series.dataVal, false, plot);
	}
};

var getDarkColor = function(sourceHexColor, intensity)
{
	intensity = ((intensity > 1) || (intensity < 0)) ? 1 : intensity;
	var sourceclrRGB = parseInt(sourceHexColor, 16);
	var r = Math.floor(sourceclrRGB / 65536);
	var g = Math.floor((sourceclrRGB - r * 65536) / 256);
	var b = sourceclrRGB - r * 65536 - g * 256;
	var darkColor = (r * intensity) << 16 | (g * intensity) << 8
			| (b * intensity);
	return darkColor.toString(16);
};

var getLightColor = function(sourceHexColor, intensity)
{
	// 0 intensity returns white
	if (intensity == 0)
	{
		return "FFFFFF";
	}
	// Check whether the intensity is in right range
	intensity = ((intensity > 1) || (intensity < 0)) ? 1 : intensity;
	// Format the color in RGB notation
	var sourceclrRGB = parseInt(sourceHexColor, 16);
	// Now, get the r,g,b values separated out of the specified color
	var r = Math.floor(sourceclrRGB / 65536);
	var g = Math.floor((sourceclrRGB - r * 65536) / 256);
	var b = sourceclrRGB - r * 65536 - g * 256;
	// Now, get the lighter color based on the Intesity Specified
	var lightColor = (256 - ((256 - r) * intensity)) << 16
			| (256 - ((256 - g) * intensity)) << 8
			| (256 - ((256 - b) * intensity));
	return lightColor.toString(16);
};

var getRGB = function(sourceHexColor)
{
	var sourceclrRGB = parseInt(sourceHexColor, 16);
	var r = Math.floor(sourceclrRGB / 65536);
	var g = Math.floor((sourceclrRGB - r * 65536) / 256);
	var b = sourceclrRGB - r * 65536 - g * 256;
	var rgb = {
		'red' : r,
		'green' : g,
		'blue' : b
	};
	return rgb;
};

/**
 * Draw curve @ 180 degree
 * @param context
 *            Canavas context
 * @param startAng
 *            Starting angle in radians
 * @param direction
 *            anti - clockwise(+1) or clockwise(-1)
 * @param xcenter
 *            abscissa of ellipse center
 * @param ycenter
 *            ordinate of ellipse center
 * @param topCurve
 *            flag for drawing part of ellipse contained in upper (ellipse);
 *            (for perspective)
 */
tiny.CylindricalGuage.prototype.drawCurve = function(context, startAng, direction,
		xcenter, ycenter, topCurve)
{
	var sa = this.config.radius;
	var sb = this.config.radius * this.config.squeeze;
	if (topCurve)
	{
		sb /= this.config.factor;
	}
	var xcontrol, ycontrol, xend, yend, t;
	for ( var j = 1; j <= 4; ++j)
	{
		t = startAng + direction * Math.PI / 4 * j;
		xend = xcenter + sa * Math.cos(t);
		yend = ycenter + sb * Math.sin(t);
		xcontrol = xcenter
				+ sa
				* Math
						.cos((2 * (startAng + direction * Math.PI / 4 * (j - 1)) + direction
								* Math.PI / 4) / 2) / Math.cos(Math.PI / 4 / 2);
		ycontrol = ycenter
				+ sb
				* Math
						.sin((2 * (startAng + direction * Math.PI / 4 * (j - 1)) + direction
								* Math.PI / 4) / 2) / Math.cos(Math.PI / 4 / 2);
		context.quadraticCurveTo(xcontrol, ycontrol, xend, yend);

	}
};
tiny.CylindricalGuage.prototype.drawDashedCurve = function(context, startAng,
		direction, xcenter, ycenter, topCurve)
{
	var sa = this.config.radius;
	var sb = this.config.radius * this.config.squeeze;
	if (topCurve)
	{
		sb /= this.config.factor;
	}
	var xcontrol, ycontrol, xend, yend, t;
	for ( var j = 1; j <= 40; ++j)
	{
		t = startAng + direction * Math.PI / 40 * j;
		xend = xcenter + sa * Math.cos(t);
		yend = ycenter + sb * Math.sin(t);
		xcontrol = xcenter
				+ sa
				* Math
						.cos((2 * (startAng + direction * Math.PI / 40
								* (j - 1)) + direction * Math.PI / 40) / 2)
				/ Math.cos(Math.PI / 40 / 2);
		ycontrol = ycenter
				+ sb
				* Math
						.sin((2 * (startAng + direction * Math.PI / 40
								* (j - 1)) + direction * Math.PI / 40) / 2)
				/ Math.cos(Math.PI / 40 / 2);
		if (j % 2 == 0)
		{
			context.quadraticCurveTo(xcontrol, ycontrol, xend, yend);
		}
		else
		{
			context.moveTo(xend, yend);
		}
	}
};
})(jQuery);
/*
     An object containing multiple type of transformations. 
*/

Trans = {
  $extend: true,
  
  linear: function(p){
    return p;
  }
};

//variable fx is renamed as fxGetId since, pierenderer.js have same variable which conflicts functionality.
var fxGetId = function(d) {
	  return document.getElementById(d);
};

fxGetId.empty = function() {
};

fxGetId.splat = function(obj) {
	  var type = fxGetId.type(obj);
	  return type ? ((type != 'array') ? [ obj ] : obj) : [];
	};

	fxGetId.type = function(elem) {
	  var type = fxGetId.type.s.call(elem).match(/^\[object\s(.*)\]$/)[1].toLowerCase();
	  if(type != 'object') return type;
	  if(elem && elem.$$family) return elem.$$family;
	  return (elem && elem.nodeName && elem.nodeType == 1)? 'element' : type;
};
fxGetId.type.s = Object.prototype.toString;

fxGetId.each = function(iterable, fn) {
	  var type = fxGetId.type(iterable);
	  if (type == 'object') {
	    for ( var key in iterable)
	      fn(iterable[key], key);
	  } else {
	    for ( var i = 0, l = iterable.length; i < l; i++)
	      fn(iterable[i], i);
	  }
};

fxGetId.time = Date.now || function() {
	  return +new Date;
};

fxGetId.extend = function(original, extended) {
	  for ( var key in (extended || {}))
	    original[key] = extended[key];
	  return original;
};

fxGetId.merge = function() {
	  var mix = {};
	  for ( var i = 0, l = arguments.length; i < l; i++) {
	    var object = arguments[i];
	    if (fxGetId.type(object) != 'object')
	      continue;
	    for ( var key in object) {
	      var op = object[key], mp = mix[key];
	      mix[key] = (mp && fxGetId.type(op) == 'object' && fxGetId.type(mp) == 'object') ? $
	          .merge(mp, op) : fxGetId.unlink(op);
	    }
	  }
	  return mix;
};

fxGetId.unlink = function(object) {
	  var unlinked;
	  switch (fxGetId.type(object)) {
	  case 'object':
	    unlinked = {};
	    for ( var p in object)
	      unlinked[p] = fxGetId.unlink(object[p]);
	    break;
	  case 'array':
	    unlinked = [];
	    for ( var i = 0, l = object.length; i < l; i++)
	      unlinked[i] = fxGetId.unlink(object[i]);
	    break;
	  default:
	    return object;
	  }
	  return unlinked;
};

var Class = function(properties) {
	  properties = properties || {};
	  var klass = function() {
	    for ( var key in this) {
	      if (typeof this[key] != 'function')
	        this[key] = fxGetId.unlink(this[key]);
	    }
	    this.constructor = klass;
	    if (Class.prototyping)
	      return this;
	    var instance = this.initialize ? this.initialize.apply(this, arguments)
	        : this;
	    //typize
	    this.$$family = 'class';
	    return instance;
	  };

	  for ( var mutator in Class.Mutators) {
	    if (!properties[mutator])
	      continue;
	    properties = Class.Mutators[mutator](properties, properties[mutator]);
	    delete properties[mutator];
	  }

	  fxGetId.extend(klass, this);
	  klass.constructor = Class;
	  klass.prototype = properties;
	  return klass;
};

var Trans = Trans;

(function(){

  var makeTrans = function(transition, params){
    params = fxGetId.splat(params);
    return fxGetId.extend(transition, {
      easeIn: function(pos){
        return transition(pos, params);
      },
      easeOut: function(pos){
        return 1 - transition(1 - pos, params);
      },
      easeInOut: function(pos){
        return (pos <= 0.5)? transition(2 * pos, params) / 2 : (2 - transition(
            2 * (1 - pos), params)) / 2;
      }
    });
  };

  var transitions = {

    Pow: function(p, x){
      return Math.pow(p, x[0] || 6);
    },

    Expo: function(p){
      return Math.pow(2, 8 * (p - 1));
    },

    Circ: function(p){
      return 1 - Math.sin(Math.acos(p));
    },

    Sine: function(p){
      return 1 - Math.sin((1 - p) * Math.PI / 2);
    },

    Back: function(p, x){
      x = x[0] || 1.618;
      return Math.pow(p, 2) * ((x + 1) * p - x);
    },

    Bounce: function(p){
      var value;
      for ( var a = 0, b = 1; 1; a += b, b /= 2) {
        if (p >= (7 - 4 * a) / 11) {
          value = b * b - Math.pow((11 - 6 * a - 11 * p) / 4, 2);
          break;
        }
      }
      return value;
    },

    Elastic: function(p, x){
      return Math.pow(2, 10 * --p)
          * Math.cos(20 * p * Math.PI * (x[0] || 1) / 3);
    }

  };

  fxGetId.each(transitions, function(val, key){
    Trans[key] = makeTrans(val);
  });

  fxGetId.each( [
      'Quad', 'Cubic', 'Quart', 'Quint'
  ], function(elem, i){
    Trans[elem] = makeTrans(function(p){
      return Math.pow(p, [
        i + 2
      ]);
    });
  });

})();

/*
   A Class that can perform animations for generic objects.

   If you are looking for animation transitions please take a look at the <Trans> object.

   Used by:

   <Graph.Plot>
   
   Based on:
   
   The Animation class is based in the MooTools Framework <http://mootools.net>. Copyright (c) 2006-2009 Valerio Proietti, <http://mad4milk.net/>. MIT license <http://mootools.net/license.txt>.

*/

var Animation = new Class( {

  initialize: function(options){
    this.setOptions(options);
  },

  setOptions: function(options){
    var opt = {
      duration: 2500,
      fps: 40,
      transition: Trans.Quart.easeInOut,
      compute: fxGetId.empty,
      complete: fxGetId.empty,
      link: 'ignore'
    };
    this.opt = fxGetId.merge(opt, options || {});
    return this;
  },

  step: function(){
    var time = fxGetId.time(), opt = this.opt;
    if (time < this.time + opt.duration) {
      var delta = opt.transition((time - this.time) / opt.duration);
      opt.compute(delta);
    } else {
      this.timer = clearInterval(this.timer);
      opt.compute(1);
      opt.complete();
    }
  },

  start: function(){
    if (!this.check())
      return this;
    this.time = 0;
    this.startTimer();
    return this;
  },

  startTimer: function(){
    var that = this, fps = this.opt.fps;
    if (this.timer)
      return false;
    this.time = fxGetId.time() - this.time;
    this.timer = setInterval((function(){
      that.step();
    }), Math.round(1000 / fps));
    return true;
  },

  pause: function(){
    this.stopTimer();
    return this;
  },

  resume: function(){
    this.startTimer();
    return this;
  },

  stopTimer: function(){
    if (!this.timer)
      return false;
    this.time = fxGetId.time() - this.time;
    this.timer = clearInterval(this.timer);
    return true;
  },

  check: function(){
    if (!this.timer)
      return true;
    if (this.opt.link == 'cancel') {
      this.stopTimer();
      return true;
    }
    return false;
  }
});
var tinyFloater = {};
tinyFloater.MAX_FIXED_DIGITS = 15;

tinyFloater.roundValue = function(num, fixed) 
{
	fixed = fixed || 0;
	fixed = Math.pow(10, fixed);
	return Math.floor(num * fixed) / fixed;
};
if (typeof tiny === 'undefined')
{
    tiny = {};
}
(function($){
tiny.ThermometerGauge = function(id, series, ctx, eventTriggerHandler,plot)
{
	var self = this;
	this.series = series;
	this.id = series.tinyId;    

	this.type = 'thermometerGauge';
	this.config = {
		'bulbRadius' : 15.5,
        'capRadius' : 6,
		'height' : 237,
		'color' : 0x00,
		'factor' : 1,
		'fluidColor' : '#77d366',
		'borderColor' : '#d9d9d9',
		'xoffset' : 2,
		'yoffset' : 20,
		'borderThickness' : 1,
		'threshold' : this.series.tinyThreshold,
        'scaleLength' : 200,
        'minValue' : 0,
        'maxValue' : 100
	};
    this.thermoEventTriggerHandler = eventTriggerHandler;
	var drawX = 0;
	this.config.xoffset = ctx.canvas.width / 2 - this.config.bulbRadius;
	this.config.yoffset = ctx.canvas.height / 2 - this.config.height / 2;

	if (series.label)
	{
		series._labelElem = $('<div class="jqplot-meterGauge-label" style="position:absolute;">'
				+ series.label + '</div>');
		series.canvas._elem.after(series._labelElem);
		series._labelElem.css({
            'left' : this.config.xoffset + 11
					- (series._labelElem.outerWidth(true) / 2), // changed from 25 to 11 to make it centered as label font size is changed from 1em to 12px
			'top' :  series.canvas._elem.height() 
					 
		});
	}

	this.config.bLower = this.config.squeeze * this.config.radius;
	this.config.bUpper = this.config.bLower / this.config.factor;
	this.config.hMin = this.config.bLower + this.config.bUpper;
	var length = $('#' + series.tinyId + ' .jqplot-series-shadowCanvas').length;
	if (length > 1)
	{
		$($('#' + series.tinyId + ' .jqplot-series-shadowCanvas')[0]).remove();
		$($('#' + series.tinyId + ' .jqplot-series-canvas')[0]).remove();
	}
	this.fbody_canvas = $('#' + series.tinyId + ' .jqplot-series-shadowCanvas')[0];
	$(this.fbody_canvas).css('z-index', 20);
	this.fTop_canvas = $('#' + series.tinyId + ' .jqplot-series-canvas')[0];
	$(this.fTop_canvas).css('z-index', 20);

	this.animation = new Animation;
    	plot.thermoref = self;

};

CanvasRenderingContext2D.prototype.lineStyle = function(width, color, alpha)
{
	if (color)
		this.strokeStyle = color;
	if (width)
		this.lineWidth = width;
	if (alpha)
		this.globalAlpha = alpha;
};

/**
 * Draw cylinder
 * 
 * @param canvas
 *            object
 */
tiny.ThermometerGauge.prototype.drawThermometer = function(borderContext)
{
    var borderColor = this.config.borderColor;
	var borderThickness = this.config.borderThickness;
	var xoffset = this.config.xoffset;
	var yoffset = this.config.yoffset;
	var fluidColor = this.config.fluidColor;

	var length = $('#' + this.series.tinyId + ' .jqplot-event-canvas').length;
	if (length > 1)
	{
		$($('#' + this.series.tinyId + ' .jqplot-event-canvas')[0]).remove();
	}
	var thermometerTop_canvas = $('#' + this.series.tinyId	+ ' .jqplot-event-canvas')[0];
	$(thermometerTop_canvas).css('z-index', 20);
	var thermometerTop = thermometerTop_canvas.getContext("2d");
    var grd = thermometerTop.createLinearGradient(xoffset-6, yoffset, xoffset + 6, yoffset);
	thermometerTop.fillStyle = grd;
    grd.addColorStop(0 , "#EDEDED");
    grd.addColorStop(0.1 , "#F4F4F4");
    grd.addColorStop(0.25 , "#FFFFFF");
    grd.addColorStop(0.75 , "#D1D1D1");
    grd.addColorStop(1 , "#DDDDDD");    
	thermometerTop.beginPath();
	thermometerTop.moveTo(xoffset + 6, yoffset);
    thermometerTop.arc(xoffset , yoffset , 6,  0, Math.PI, true);
    thermometerTop.fillRect(xoffset - 6 , yoffset , 12 , 200);
    thermometerTop.arc(xoffset , yoffset + 200 , 6, Math.PI, 0 ,  true);   
	thermometerTop.fill();
	thermometerTop.restore();
    thermometerTop.beginPath();
    thermometerTop.arc(xoffset, yoffset + 215.5, 15.5, 1.35*Math.PI, 1.65*Math.PI , true); 
    thermometerTop.strokeStyle = "#C9C9C9";
    thermometerTop.fillStyle = '#636363';        
    thermometerTop.fill();
    
    //draw scale
    if (this.numberTicks <= 1)
	{
		this.numberTicks = 2;
	}
	var markCnt = this.series.numberTicks;
	var minmarkCnt = this.series.tinyMinorTicks;
	var makGap = 200 / (markCnt - 1);
	var minmakGap = makGap / (minmarkCnt + 1);
    var max = this.series.max;
    var min = this.series.min; 
    var scaleLength = this.config.scaleLength;
	for ( var i = 0; i < markCnt; i++)
	{
        thermometerTop.beginPath();
        thermometerTop.lineStyle = '#8a8a8a';
        thermometerTop.moveTo(xoffset - 6 , yoffset + i * makGap);
        thermometerTop.lineTo(xoffset - 13 , yoffset + i * makGap) ;
        thermometerTop.stroke();
        var text = String(max - ((max - min) / (markCnt - 1)) * i);
        var split = text.split('.');
        if(split && split.length>1 && text.split('.')[1].length>2)
        {
            text = parseFloat(text).toFixed(2);
        }
        thermometerTop.font = "12px";
        thermometerTop.textAlign = "right";
        if (navigator.userAgent.indexOf("MSIE 8") >= 0)
        {
            thermometerTop.font = "10px";
            thermometerTop.fillStyle = '#444444';
            thermometerTop.fillText(text , xoffset - 17 , yoffset + i * makGap + 6); 
        }
        else
        {
            thermometerTop.fillText(text , xoffset - 17 , yoffset + i * makGap + 4); 
        }
        var start = i * makGap;
        if (i != markCnt - 1)
        {
            for ( var j = 1; j < minmarkCnt + 1; j++)
            {
                var pt = start + (j * minmakGap);
                thermometerTop.moveTo(xoffset - 6, yoffset + start +  j * minmakGap);
                thermometerTop.lineTo(xoffset - 9, yoffset + start +  j * minmakGap);
                thermometerTop.stroke();
            }
        }
	}
    
    var borderColor = this.config.borderColor;
	var borderThickness = this.config.borderThickness;
	var xoffset = this.config.xoffset;
	var yoffset = this.config.yoffset;
	var fluidColor = this.config.fluidColor;
    var value = this.series.data[0][1];
    var minValue = min ? min : 0;
    var maxValue = max ? max : 100;

    var tubeHeight = 200;
    var barHeight = ((value - minValue) / (maxValue - minValue)) * tubeHeight;
    var fluidTop = yoffset + (tubeHeight - barHeight);
    
   
    
    
    var  context =thermometerTop;
        //Draw the bar indicating the value specified by the user
    context.beginPath();
     var lingrad = context.createLinearGradient(xoffset-6, yoffset, xoffset + 6, yoffset);
     var radialGrad = context.createRadialGradient(xoffset - 2 , yoffset + 212.5, 1 , xoffset , yoffset + 215.5, 15.5);
     
     var dataIndex = 0;
     
       for ( var i = 0; i < this.series.intervals.length; i++)
                {
                    if (value <= this.series.intervals[i][0])
                    {
                    dataIndex = i;
                    break;
                    
                    }
                }
				var colorArray = this.series.intervals[dataIndex][2];
				var gradColor = this.series.intervals[dataIndex][3];
				var lightGradColor = this.series.intervals[dataIndex][4];
				var color;
				if ($.isArray(colorArray))
				{
					for ( var k = 0; k < colorArray.length; k++)
					{
						lingrad
								.addColorStop(colorArray[k][0],
										colorArray[k][1]);
					}
					context.fillStyle = lingrad;
				}
				else
				{
					lingrad.addColorStop(0,colorArray);
					lingrad.addColorStop(0.1,gradColor);
					lingrad.addColorStop(0.25,lightGradColor);
					lingrad.addColorStop(0.75,colorArray);
					lingrad.addColorStop(1,colorArray);
					context.fillStyle = lingrad;
				}
        context.fill();
        context.fillRect(xoffset - 6 , fluidTop , 12 , barHeight+2);        
        var imageArrow = '<td valign="bottom" class="tiny_thermoImage" style="float:left;"></td>';
        
        var percentageValue = Math.round((value - this.series.min)/(this.series.max - this.series.min) *  100);
        var thermometerValue;
        if (this.series.labelRenderer)
        {
            var labelRendererMap = 
            {
                'max':this.series.max,
                'min':this.series.min,
                'unit':this.series.tinyunit,
                'currentDataValue': this.series.dataVal,
                'actualDataValue':this.series.dataVal,

                'percentageValue': percentageValue
            };
            var thermometerValue = this.series.labelRenderer(labelRendererMap);
            elem = $('<div class="jqplot-meterGauge-value" style="position:absolute;"><table style="border-spacing:0;">' + imageArrow 
			+ '<td style="float:left;font-size:24px;">' +  thermometerValue + '</td></tr>' 
			+ '</div>');
        }
        else
        {
            thermometerValue = percentageValue;
            if (this.series.tinyunit)
            {
                elem = $('<div class="jqplot-meterGauge-value" style="position:absolute;"><table style="border-spacing:0;"><tr>' +  imageArrow
                + '<td  style="float:left;font-size:24px;">' +  thermometerValue + '</td>' 
                + '<td  class=tiny-meter-unit style="float:left;font-size:24px;font-weight:bold;">'
                + this.series.tinyunit
                + '</td></tr></table></div>');
            }
            else
            {
                elem = $('<div class="jqplot-meterGauge-value" style="position:absolute;"><table style="border-spacing:0;">' + imageArrow 
                + '<td style="float:left;font-size:24px;">' +  thermometerValue + '</td></tr>' 
                + '</div>');
            }
        }

		this.series.canvas._elem.after(elem);
		elem.css({'left' : xoffset + 15,'top' : fluidTop - 5});
        context.beginPath();
        context.arc(xoffset, yoffset + 215.5, 15.5, 1.35*Math.PI, 1.65*Math.PI , true);   
 
        var colorArray = this.series.hubColors[dataIndex];
		var color;
		if ($.isArray(colorArray))
		{
            for ( var k = 0; k < colorArray.length; k++)
			{
                radialGrad.addColorStop(colorArray[k][0],
										colorArray[k][1]);
			}
			 context.fillStyle = radialGrad;
		}
		else
		{
			var colorFieldArray = this.series.intervals[dataIndex][2];
			if ($.isArray(colorFieldArray)){
				context.fillStyle = colorArray;
			}
			else{
				var gradColor = this.series.intervals[dataIndex][3];
				var lightGradColor = this.series.intervals[dataIndex][4];
				radialGrad.addColorStop(0,lightGradColor);
				radialGrad.addColorStop(0.1,lightGradColor);
				radialGrad.addColorStop(0.8,colorFieldArray);
				radialGrad.addColorStop(1,colorFieldArray);
				context.fillStyle = radialGrad;
			}
		   
		}
                
        context.fill();
		context.stroke();
};

var isIE = function( )
{
	var jb = navigator.userAgent.toLowerCase();
	return (!/^opera/.test(jb) && /msie/.test(jb));
};
var colorIndex = 0;

/**
 * Draw fluid
 * 
 * @param name
 */
tiny.ThermometerGauge.prototype.drawFluid = function(fbody_canvas, fTop_canvas,
		height, val)
{
       
};

/**
 * Update fluid position
 */
tiny.ThermometerGauge.prototype.updateFluid = function(newHeightPercent, animate)
{
	newHeightPercent = ((newHeightPercent > 100) || (newHeightPercent < 0)) ? 100
			: newHeightPercent;
	var newHeight = Math.round(this.config.height * newHeightPercent / 100);
	if (newHeight <= 0)
	{
		return;
	}
	var that = this;
	if (animate)
	{
		this.series.plot.isAnimateOn = true;
		this.animation.setOptions(
				{
					compute : function(delta)
					{
						that.drawFluid(that.fbody_canvas, that.fTop_canvas, newHeight * delta, delta);
					},
					complete : function( )
					{
						that.series.plot.isAnimateOn = false;
						createTherometerMap(that.series.plot);
					}
				}).start();
	}
	else
	{
		this.series.plot.isAnimateOn = false;
		this.drawFluid(this.fbody_canvas, this.fTop_canvas, newHeight);
		createTherometerMap(that.series.plot);
	}
};

var createTherometerMap = function(plot )
{
	var elem = plot.thermoref;
	var left = elem.config.xoffset - 6;
	var top = elem.config.yoffset - 2;
    var width = 40;
	var h = 240;
    var parentID = "map_"+plot.target[0].id;

	var map = document.createElement('MAP');
	map.setAttribute('name', 'map_'+parentID);
	map.setAttribute('id', parentID);
	$(elem.fbody_canvas).after(map);
	var fz = '<img id="pieImg' + parentID + '" src="data:image/gif;base64,'
			+ 'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAAB'
			+ 'AAEAAAICRAEAOw==" width=' + 94 + '" height="' + h
			+ '" usemap="#map_' + parentID
			+ '" style="border:0;position:absolute;left: ' + left + 'px;width:'+ width +  'px;top:'
			+ top + 'px;clip:\'rect(0, ' + 12 + 'px, ' + 34
			+ 'px, 0)\';filter:alpha(opacity=0);z-index:' + (70) + ';">';
	map.innerHTML += fz;
        var mouseOverThermometer = function(event)
        {
            elem.thermoEventTriggerHandler('mouseover', event);
        }
        var mouseOutThermometer = function(event)
        {
            elem.thermoEventTriggerHandler('mouseout',event);
        }
        var mouseClickThermometer = function(event)
        {
            elem.thermoEventTriggerHandler('click',event);
        }
        
        eD(map, 'mouseover', mouseOverThermometer);
        eD(map, 'mouseout', mouseOutThermometer);
        eD(map, 'click', mouseClickThermometer);
    }
    
    
var eD = function(eE, eF, eG)
{
	if (eE.attachEvent)
	{
        $(eE).bind(eF,eG);
		return true;
	}
	else if (eE.addEventListener)
	{
		eE.addEventListener(eF, eG, false);
		return true;
	}
	return false;
};

var clearCanvas = function(canvas)
{
	var context = canvas.getContext("2d");
	context.clearRect(0, 0, canvas.width, canvas.height);
};

tiny.ThermometerGauge.prototype.drawTest = function(plot)
{
	var length = $('#' + this.series.tinyId + ' .jqplot-grid-canvas').length
	if (length > 1)
	{
		$($('#' + this.series.tinyId + ' .jqplot-grid-canvas')[0]).remove();
	}
	var borderCanvas = $('#' + this.series.tinyId + ' .jqplot-grid-canvas')[0]; 
	$(borderCanvas).css('left',	$('#' + this.series.tinyId + ' .jqplot-series-shadowCanvas').css('left'));
	$(borderCanvas).css('top',$('#' + this.series.tinyId + ' .jqplot-series-shadowCanvas').css('top'));
	var borderContext = borderCanvas.getContext("2d");
	this.drawThermometer(borderContext);
    	createTherometerMap(this.series.plot);
};

})(jQuery);

$.jqplot.MeterGaugeRenderer.prototype.draw = function(ctx, gd, options, plot) {
        var self = plot.target.widget();

        var createMap = function(scalelLength, ctx, plot) {
            var elem = ctx.canvas;

            var drawX = 0;
            if (ctx.canvas.width / 2 > scalelLength) {
                drawX = ctx.canvas.width / 2 - scalelLength / 2;
            }

            var drawY = 50;
            if (ctx.canvas.height / 2 > 100) {
                drawY = ctx.canvas.height / 2 - 100 / 2;
            }

            var left = elem.offsetLeft + drawX;
            var top = elem.offsetTop + drawY;
            var h = 22;
            var parentID = "map_" + plot.target[0].id;
            var map = document.createElement('MAP');
            map.setAttribute('name', 'map_');
            map.setAttribute('id', parentID);
            $(ctx.canvas).after(map);

            var fz = '<img id="linearGauageImg' + parentID + '" src="data:image/gif;base64,' + 'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAAB' + 'AAEAAAICRAEAOw==" width=' + scalelLength + '" height="' + h + '" usemap="#map_LinearGaugeEventListner' + '" style="border:0;position:absolute;left: ' + left + 'px;top:' + top + 'px;clip:\'rect(0, ' + 12 + 'px, ' + 34 + 'px, 0)\';filter:alpha(opacity=0);z-index:' + (70) + ';">';
            map.innerHTML += fz;
            self._guageChartProp.map = map;
            map = null;
            elem = null;
        };
        var addAreaToMap = function(map, coords) {
            var fx = document.createElement('AREA');
            fx.setAttribute('shape', 'poly');
            fx.setAttribute('coords', coords);
            map.appendChild(fx);
            return fx;
        }
        var createMeterMap = function(ctx, radius, center, plot) {
            var drawX = ctx.canvas.width / 2 - radius, parentID = "map_" + plot.target[0].id, drawY = center[1] - radius, left = ctx.canvas.offsetLeft + drawX, top = ctx.canvas.offsetTop + drawY, map = document.createElement('MAP');
            map.setAttribute('name', 'map_MeterGaugeEventListner' + parentID);
            map.setAttribute('id', 'map_' + parentID);
            $(ctx.canvas).after(map);
            var fz = '<img id="meterGauageImg' + parentID + '" src="data:image/gif;base64,' + 'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAAB' + 'AAEAAAICRAEAOw==" width=' + (radius * 2) + '" height="' + radius + '" usemap="#map_MeterGaugeEventListner' + parentID + '" style="border:0;position:absolute;left: ' + left + 'px;top:' + top + 'px;clip:\'rect(0, ' + (radius * 2) + 'px, ' + radius + 'px, 0)\';filter:alpha(opacity=0);z-index:' + (20) + ';">';
            map.innerHTML += fz;
            return map;
        };
        if (this.tinyType === 'cylinder') {
            var gaugeEventHandler = function() {

            };
            var guage = new tiny.CylindricalGuage("cylindergauge", this, ctx, gaugeEventHandler, plot);
            guage.drawTest(plot);
            return;
        } else if (this.tinyType === 'thermometer') {
            var gaugeEventHandler = function() {

            };
            var gauge = new tiny.ThermometerGauge("cylindergauge", this, ctx, gaugeEventHandler, plot);
            gauge.drawTest(plot);
            return;
        } else if (this.tinyType === 'linear') {
	        if (this.highlightColors.length == 0) {
	            var i = 0;
	            for ( i = 0; i < this.intervals.length; i++) {
	                if (!$.isArray(this.intervals[i][2])) {
	                    this.highlightColors.push($.jqplot.computeHighlightColors(this.intervals[i][2]));
	                } else {
	                    this.highlightColors.push($.jqplot.computeHighlightColors(this.intervals[i][2][0][1]));
	                }
	            }
	        }
        	this.plugins.highlightCanvas = new $.jqplot.GenericCanvas();
        	plot.eventCanvas._elem.before(this.plugins.highlightCanvas.createElement(plot._gridPadding, 'jqplot-gaugehighlight-canvas', plot._plotDimensions, plot));
        	this.plugins.highlightCanvas.setContext();
            var scaleLength = 361;
            if (this.width) {
                scaleLength = parseInt(this.width) - 20;
            }
            var xData = [];
            var pxLengh = [];
            var sum = 0;
            var data = this.intervals;
            for (var i = 0; i < data.length; i++) {
                xData.push(data[i][0]);
                sum += data[i][0];
            }
            var min = 0;
            var max = 100;
            if (plot) {
                if (plot.series[0]) {
                    min = (plot.series[0].min) ? plot.series[0].min : min;
                    max = (plot.series[0].max) ? plot.series[0].max : max;
                }
            }
            var range = max - min;
            var oldX = 0;
            for (var i = 0; i < xData.length; i++) {
                if (xData[i] < min) {
                    xData[i] = min;
                }
                if (xData[i] > max) {
                    xData[i] = max;
                }
                if (i === 0) {
                    oldX += ((scaleLength / range) * (xData[i] - min));
                } else {
                    oldX += ((scaleLength / range) * (xData[i] - xData[i - 1]));
                }
                pxLengh.push(oldX);
            }
            this.seriesPoints = pxLengh;
            var drawX = 0;
            if (ctx.canvas.width / 2 > scaleLength) {
                drawX = ctx.canvas.width / 2 - scaleLength / 2;
            }

            var drawY = 50;
            if (ctx.canvas.height / 2 > 100) {
                drawY = ctx.canvas.height / 2 - 100 / 2;
            }
			this.drawX = drawX;
			this.drawY = drawY;
            ctx.translate(drawX, drawY);
            this.plugins.highlightCanvas._ctx.translate(drawX, drawY);
            if (this.label) {
                this._labelElem = $('<div class="jqplot-meterGauge-label" style="position:absolute;">' + this.label + '</div>');
                this.canvas._elem.after(this._labelElem);
                this._labelElem.css({
                    'left' : drawX + (scaleLength + 21) / 2 - (this._labelElem.outerWidth(true) / 2),
                    'top' : drawY + 31 + 8 + this._labelElem.outerHeight(true)
                });
            }
            var col = this.tinyBorderClr;
            var x = 0;
            var y = 0;
            ctx.save();
            for (var i = 0; i < pxLengh.length; i++) {
                var lingrad = ctx.createLinearGradient(0, 22, 0, 0);
                var colorArray = this.intervals[i][2];
                var gradColor = this.intervals[i][3];
                var color;
                if ($.isArray(colorArray)) {
                    for (var k = 0; k < colorArray.length; k++) {
                        lingrad.addColorStop(colorArray[k][0], colorArray[k][1]);
                    }
                    ctx.fillStyle = lingrad;
                } else {
                    lingrad.addColorStop(1, gradColor);
                    lingrad.addColorStop(0, colorArray);
                    ctx.fillStyle = lingrad;
                }
                if (col[i]) {
                    ctx.strokeStyle = col[i];
                } else {
                    ctx.strokeStyle = $.isArray(colorArray) ? ctx.fillStyle : colorArray;
                }

                ctx.fillRect(x, 0, pxLengh[i] - x, 22);
                ctx.strokeRect(x, 0, pxLengh[i] - x, 22);
                ctx.stroke();
                x = pxLengh[i];
            }
            ctx.restore();

            // Drawing Main scal line
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.strokeStyle = '#8a8a8a';
            ctx.moveTo(0, 25);
            ctx.lineTo(scaleLength, 25);
            ctx.closePath();
            ctx.stroke();

            // Drawing main marker
            if (this.numberTicks <= 1) {
                this.numberTicks = 2;
            }
            var markCnt = this.numberTicks;
            var minmarkCnt = this.tinyMinorTicks;
            var makGap = scaleLength / (markCnt - 1);
            var minmakGap = makGap / (minmarkCnt + 1);
            for (var i = 0; i < markCnt; i++) {
                ctx.beginPath();
                ctx.strokeStyle = '#8a8a8a';
                ctx.moveTo(i * makGap, 26);
                ctx.lineTo(i * makGap, 26 + 8);
                var start = i * makGap;
                if (i != markCnt - 1) {
                    for (var j = 1; j < minmarkCnt + 1; j++) {
                        var pt = start + (j * minmakGap);
                        ctx.moveTo(pt, 26);
                        ctx.lineTo(pt, 26 + 4);
                    }
                }

                ctx.closePath();
                ctx.stroke();
                var label;
                if (this.tinyRender) {
                    label = this.tinyRender(i, this.ticks[i][1]);
                } else {
                    label = this.ticks[i][1]
                }

                var hidSpan = $('<span style=visibility:hidden;white-space:nowrap;></span>');
                hidSpan[0].innerHTML = label;
                $(document.body).append(hidSpan);
                var tipX = hidSpan[0].offsetWidth;
                hidSpan.remove();

                elem = $('<div class="jqplot-meterGauge-tick" style="position:absolute;">' + label + '</div>');

                this.canvas._elem.after(elem);
                var eh = elem.outerHeight(true);
                if (tipX == 8) {
                    start = start + 4;
                }
	               
	            if (i == 0) {
	                elem.css({
	                    'left' : drawX + start + tipX,
	                    'top' : drawY + 26 + 8 + (eh / 2)
	                });
	            } else if (i == (markCnt - 1)) {
	                elem.css({
	                    'left' : drawX + start,
	                    'top' : drawY + 26 + 8 + (eh / 2)
	                });
	            } else {
	                elem.css({
	                    'left' : drawX + start + tipX / 4,
	                    'top' : drawY + 26 + 8 + (eh / 2)
	                });
	            }
            }
            var datapoint = parseInt(this.rendererOptions.dataVal);
            var valX = ((datapoint - this.min) / (this.max - this.min) ) * scaleLength;
            // Draw triangle
            var ser = this;
            this.plot.postDrawHooks.add(function() {
                var canvas = this.plugins.highlighter.highlightCanvas;
                var grdctx = canvas._ctx;
                var animaeX = 0;
                var animationTimeInterval = 1990 / valX;
                var arrowImg = new Image();
                arrowImg.onload = function() {
                    var length = $('#' + ser.tinyId + ' .jqplot-highlight-canvas').length;
                    if (ser.plot.animate === true) {
                        this.animator = setInterval(function() {
                            ser.plot.isAnimateOn = true;
                            grdctx.clearRect(0, 0, canvas._elem[0].width, canvas._elem[0].height);
                            if (animaeX + 1 < valX) {

                                $('#' + ser.tinyId + ' .jqplot-linearGauge-value').remove();
                                var val = parseInt((animaeX / scaleLength) * (ser.max - ser.min)) + ser.min;
                                if (ser.tinyunit) {
                                    elem = $('<div class="jqplot-linearGauge-value" style="position:absolute;">' + val + '<span class=tiny-meter-unit style="font-size:18px;">' + ser.tinyunit + '</span></div>');
                                } else {
                                    elem = $('<div class="jqplot-linearGauge-value" style="position:absolute;">' + val + '</div>');
                                }
                                ser.canvas._elem.after(elem);
                                elem.css({
                                    'left' : drawX + animaeX + 10 - (elem.outerWidth(true) / 2),
                                    'top' : drawY - elem.outerHeight(true)
                                });
                                grdctx.save();

                                grdctx.translate(drawX + animaeX - 8, drawY - 12);
                                grdctx.drawImage(arrowImg, 0, 0);
                                grdctx.restore();
                                animaeX += 1;
                            } else {
                                ser.plot.isAnimateOn = false;
                                $('#' + ser.tinyId + ' .jqplot-linearGauge-value').remove();
                                clearInterval(arrowImg.animator);
                                grdctx.save();
                                grdctx.translate(drawX + valX - 8, drawY - 12);
                                grdctx.drawImage(arrowImg, 0, 0);
                                grdctx.restore();

                                if (ser.tinyunit) {
                                    elem = $('<div class="jqplot-linearGauge-value" style="position:absolute;">' + datapoint + '<span class=tiny-meter-unit style="font-size:18px;">' + ser.tinyunit + '</span></div>');
                                } else {
                                    elem = $('<div class="jqplot-linearGauge-value" style="position:absolute;">' + datapoint + '</div>');
                                }
                                ser.canvas._elem.after(elem);
                                elem.css({
                                    'left' : drawX + valX + 10 - (elem.outerWidth(true) / 2),
                                    'top' : drawY - elem.outerHeight(true)
                                });
                            }

                        }, animationTimeInterval);

                    } else {
                        ser.plot.isAnimateOn = false;
                        grdctx.save();
                        grdctx.translate(drawX + valX - 8, drawY - 12);
                        grdctx.drawImage(arrowImg, 0, 0);
                        grdctx.restore();

                        if (ser.tinyunit) {
                            elem = $('<div class="jqplot-linearGauge-value" style="position:absolute;">' + datapoint + '<span class=tiny-meter-unit style="font-size:18px;">' + ser.tinyunit + '</span></div>');
                        } else {
                            elem = $('<div class="jqplot-linearGauge-value" style="position:absolute;">' + datapoint + '</div>');
                        }
                        ser.canvas._elem.after(elem);
                        elem.css({
                            'left' : drawX + valX - 4,
                            'top' : drawY - elem.outerHeight(true)
                        });
                    }

                };

                var arrowImgDiv = $('<div>');
                arrowImgDiv[0].className = 'tiny_widgets_charts_arrow_image';
                document.body.appendChild(arrowImgDiv[0]);
                var styl = arrowImgDiv[0].currentStyle || window.getComputedStyle(arrowImgDiv[0], null);
                var path = styl.backgroundImage.substring(4, styl.backgroundImage.length - 1);
                path = path.split('"');
                if (path.length > 1) {
                    path = path[1];
                }
                arrowImg.src = path;
                arrowImgDiv.remove();
            });
            return;
        }

        var i;
        var opts = (options != undefined) ? options : {};
        // offset and direction of offset due to legend placement
        var offx = 0;
        var offy = 0;
        var trans = 1;

        // pre-draw so can get it's dimensions.
        var cw = ctx.canvas.width;
        var ch = ctx.canvas.height;
        if (this.label) {
            this._labelElem = $('<div class="jqplot-meterGauge-label" style="position:absolute;">' + this.label + '</div>');
            var maxlablewid = cw - 10, isIE = $.browser.msie, isShowtooltip = false;
            var cssobj = {
                'text-overflow' : 'ellipsis',
                'max-width' : maxlablewid + 'px',
                'overflow' : 'hidden',
                'z-index' : '1',
                'height' : '30px',
                'white-space' : 'pre'
            };
            this._labelElem.css(cssobj);
            this.canvas._elem.after(this._labelElem);
            if (parseInt(this._labelElem[0].scrollWidth) > parseInt(this._labelElem[0].clientWidth)) {
                isShowtooltip = true;
            }
            if (isShowtooltip) {
                this._labelElem.attr('title', this.label);
            }
        }

        var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;
        var showLine = (opts.showLine != undefined) ? opts.showLine : this.showLine;
        var fill = (opts.fill != undefined) ? opts.fill : this.fill;
        if (this.padding == null) {
            this.padding = Math.round(Math.min(cw, ch) / 30);
        }
        var w = cw - offx - 2 * this.padding;
        var h = ch - offy - 2 * this.padding;
        if (this.labelPosition == 'bottom' && this.label) {
            h -= this._labelElem.outerHeight(true);
        }
        var mindim = Math.min(w, h);
        var d = mindim;

        if (!this.diameter) {
            if (this.semiCircular) {
                if (w >= 2 * h) {
                    if (!this.ringWidth) {
                        this.ringWidth = 2 * h / 35;
                    }
                    this.needleThickness = this.needleThickness || 2 + Math.pow(this.ringWidth, 0.8);
                    this.innerPad = this.ringWidth / 2 + this.needleThickness / 2 + this.needlePad;
                    this.diameter = 2 * (h - 2 * this.innerPad);
                } else {
                    if (!this.ringWidth) {
                        this.ringWidth = w / 35;
                    }
                    this.needleThickness = this.needleThickness || 2 + Math.pow(this.ringWidth, 0.8);
                    this.innerPad = this.ringWidth / 2 + this.needleThickness / 2 + this.needlePad;
                    this.diameter = w - 2 * this.innerPad - this.ringWidth - this.padding;
                }
                if (plot.series[0].isUCD) {
                    this.diameter = 164 / 400 * this.width;
                } else {
                    this.diameter = 320 / 400 * this.width;
                }
                // center taking into account legend and over draw for gauge
                // bottom below hub.
                // this will be center of hub.
                this._center = [(cw - trans * offx) / 2 + trans * offx, (ch + trans * offy - this.padding - this.ringWidth - this.innerPad)];
            } else {
                if (!this.ringWidth) {
                    this.ringWidth = d / 35;
                }
                this.needleThickness = this.needleThickness || 2 + Math.pow(this.ringWidth, 0.8);
                this.innerPad = 0;
                this.diameter = d - this.ringWidth;
                // center in middle of canvas taking into account legend.
                // will be center of hub.
                this._center = [(cw - trans * offx) / 2 + trans * offx, (ch - trans * offy) / 2 + trans * offy];
            }
        }

        if (this._labelElem && this.labelPosition == 'bottom') {
            this._center[1] -= this._labelElem.outerHeight(true);
        }

        this._radius = this.diameter / 2;

        this.tickSpacing = 6000 / this.diameter;

        if (!this.hubRadius) {
            this.hubRadius = this.diameter / 18;
        }

        this.shadowOffset = 0.5 + this.ringWidth / 9;
        this.shadowWidth = this.ringWidth * 1;

        this.tickPadding = 3 + Math.pow(this.diameter / 20, 0.7);
        this.tickOuterRadius = this._radius - this.ringWidth / 2 - this.tickPadding;
        this.tickLength = (this.showTicks) ? this._radius / 13 : 0;

        if (plot.series[0].isUCD) {
            this.tickLength = 9 / 400 * this.width;
        } else {
            this.tickLength = 18 / 400 * this.width;
        }

        if (this.ticks.length == 0) {
            // no ticks, lets make some.
            var max = this.max, min = this.min, setmax = this.setmax, setmin = this.setmin, ti = (max - min) * this.tickSpacing / this.span;
            var tf = Math.floor(parseFloat((Math.log(ti) / Math.log(10)).toFixed(11)));
            var tp = (ti / Math.pow(10, tf));
            (tp > 2 && tp <= 2.5) ? tp = 2.5 : tp = Math.ceil(tp);
            var t = this.tickPositions;
            var tpindex, nt;

            for ( i = 0; i < t.length; i++) {
                if (tp == t[i] || i && t[i - 1] < tp && tp < t[i]) {
                    ti = t[i] * Math.pow(10, tf);
                    tpindex = i;
                }
            }

            for ( i = 0; i < t.length; i++) {
                if (tp == t[i] || i && t[i - 1] < tp && tp < t[i]) {
                    ti = t[i] * Math.pow(10, tf);
                    nt = Math.ceil((max - min) / ti);
                }
            }

            // both max and min are free
            if (setmax && setmin) {
                var tmin = (min > 0) ? min - min % ti : min - min % ti - ti;
                if (!this.forceZero) {
                    var diff = Math.min(min - tmin, 0.8 * ti);
                    var ntp = Math.floor(diff / t[tpindex]);
                    if (ntp > 1) {
                        tmin = tmin + t[tpindex] * (ntp - 1);
                        if (parseInt(tmin, 10) != tmin && parseInt(tmin - t[tpindex], 10) == tmin - t[tpindex]) {
                            tmin = tmin - t[tpindex];
                        }
                    }
                }
                if (min == tmin) {
                    min -= ti;
                } else {
                    // tmin should always be lower than dataMin
                    if (min - tmin > 0.23 * ti) {
                        min = tmin;
                    } else {
                        min = tmin - ti;
                        nt += 1;
                    }
                }
                nt += 1;
                var tmax = min + (nt - 1) * ti;
                if (max >= tmax) {
                    tmax += ti;
                    nt += 1;
                }
                // now tmax should always be mroe than dataMax
                if (tmax - max < 0.23 * ti) {
                    tmax += ti;
                    nt += 1;
                }
                this.max = max = tmax;
                this.min = min;

                this.tickInterval = ti;
                this.numberTicks = nt;
                var it;
                for ( i = 0; i < nt; i++) {
                    it = parseFloat((min + i * ti).toFixed(11));
                    this.ticks.push([it, it]);
                }
                this.max = this.ticks[nt-1][1];

                this.tickFactor = tf;

                this.numberMinorTicks = getnmt(this, this.tickPositions, this.tickInterval, this.tickFactor);

            }
            // max is free, min is fixed
            else if (setmax) {
                var tmax = min + (nt - 1) * ti;
                if (max >= tmax) {
                    max = tmax + ti;
                    nt += 1;
                } else {
                    max = tmax;
                }

                this.tickInterval = this.tickInterval || ti;
                this.numberTicks = this.numberTicks || nt;
                var it;
                for ( i = 0; i < this.numberTicks; i++) {
                    it = parseFloat((min + i * this.tickInterval).toFixed(11));
                    this.ticks.push([it, it]);
                }
                this.max = this.ticks[this.numberTicks-1][1];

                this.tickFactor = tf;
                // determine number of minor ticks
                this.numberMinorTicks = getnmt(this, this.tickPositions, this.tickInterval, this.tickFactor);
            }

            // not setting max or min
            if (!setmax && !setmin) {
                var range = this.max - this.min;
                tf = Math.floor(parseFloat((Math.log(range) / Math.log(10)).toFixed(11))) - 1;
                var nticks = [5, 6, 4, 7, 3, 8, 9, 10, 2], res, numticks, nonSigDigits = 0, sigRange;
                // check to see how many zeros are at the end of the range
                if (range > 1) {
                    var rstr = String(range);
                    if (rstr.search(/\./) == -1) {
                        var pos = rstr.search(/0+$/);
                        nonSigDigits = (pos > 0) ? rstr.length - pos - 1 : 0;
                    }
                }
                sigRange = range / Math.pow(10, nonSigDigits);
                for ( i = 0; i < nticks.length; i++) {
                    res = sigRange / (nticks[i] - 1);
                    if (res == parseInt(res, 10)) {
                        this.numberTicks = nticks[i];
                        this.tickInterval = range / (this.numberTicks - 1);
                        this.tickFactor = tf + 1;
                        break;
                    }
                }
                var it;
                for ( i = 0; i < this.numberTicks; i++) {
                    it = parseFloat((this.min + i * this.tickInterval).toFixed(11));
                    this.ticks.push([it, it]);
                }
                // determine number of minor ticks
                this.numberMinorTicks = getnmt(this, this.tickPositions, this.tickInterval, this.tickFactor);
            }
        }

        var r = this._radius, sa = this.startAngle, ea = this.endAngle, pi = Math.PI, hpi = Math.PI / 2;
        var meterStartx = this._center[0] - this._radius;
        var meterStarty = this._center[1];

        if (this.semiCircular) {
            var overAngle = Math.atan(this.innerPad / r), outersa = this.outerStartAngle = sa - overAngle, outerea = this.outerEndAngle = ea + overAngle, hubsa = this.hubStartAngle = sa - Math.atan(this.innerPad / this.hubRadius * 2), hubea = this.hubEndAngle = ea + Math.atan(this.innerPad / this.hubRadius * 2);

            ctx.save();

            ctx.translate(this._center[0], this._center[1]);
            ctx.lineJoin = "round";
            ctx.lineCap = "round";

            // draw the innerbackground
            ctx.save();
            ctx.beginPath();
            ctx.fillStyle = this.background;
            ctx.arc(0, 0, r, outersa, outerea, false);
            ctx.closePath();
            ctx.fill();
            ctx.restore();

            // draw the shadow
            // the outer ring.
            var shadowColor = 'rgba(0,0,0,' + this.shadowAlpha + ')';
            // draw the ticks
            if (this.showTicks) {
                ctx.save();
                var orad = this.tickOuterRadius, tl = this.tickLength, mtl = tl / 2, nmt = this.numberMinorTicks, ts = this.span * Math.PI / 180 / (this.ticks.length - 1), mts = ts / (nmt + 1);

                for ( i = 0; i < this.ticks.length; i++) {
                    ctx.beginPath();
                    ctx.lineWidth = 1.5 + this.diameter / 360;
                    ctx.strokeStyle = this.ringColor;
                    var wps = ts * i + sa;
                    ctx.moveTo(-orad * Math.cos(ts * i + sa), orad * Math.sin(ts * i + sa));
                    ctx.lineTo(-(orad - tl) * Math.cos(ts * i + sa), (orad - tl) * Math.sin(ts * i + sa));
                    this._tickPoints.push([(orad - tl) * Math.cos(ts * i + sa) + this._center[0] + this.canvas._offsets.left, (orad - tl) * Math.sin(ts * i + sa) + this._center[1] + this.canvas._offsets.top, ts * i + sa]);
                    ctx.stroke();
                    ctx.lineWidth = 1.0 + this.diameter / 440;
                    if (i < this.ticks.length - 1) {
                        for (var j = 1; j <= nmt; j++) {
                            ctx.beginPath();
                            ctx.lineWidth = 1.0;
                            ctx.moveTo(-orad * Math.cos(ts * i + mts * j + sa), orad * Math.sin(ts * i + mts * j + sa));
                            ctx.lineTo(-(orad - mtl) * Math.cos(ts * i + mts * j + sa), (orad - mtl) * Math.sin(ts * i + mts * j + sa));
                            ctx.stroke();
                        }
                    }
                }
                ctx.restore();
            }

            // draw the tick labels
            if (this.showTickLabels) {
                var elem, l, t, ew, eh, dim, maxdim = 0;
                var dd = this.intervalOuterRadius * 2;
                var tp = 15 * (1 - 1 / (dd / 80 + 1));
                for ( i = 0; i < this.ticks.length; i++) {

                    if (this.tinyRender) {
                        var label = this.tinyRender(i, this.ticks[i][1]);
                        elem = $('<div class="jqplot-meterGauge-tick" style="position:absolute;">' + label + '</div>');
                    } else {

                        elem = $('<div class="jqplot-meterGauge-tick" style="position:absolute;">' + this.ticks[i][1] + '</div>');
                    }
                    this.canvas._elem.after(elem);
                    ew = elem.outerWidth(true);
                    eh = elem.outerHeight(true);

                    l = this._center[0] + (this.intervalOuterRadius) * Math.cos(this._tickPoints[i][2]);
                    t = this._center[1] + (this.intervalOuterRadius) * Math.sin(this._tickPoints[i][2]) - eh / 2 * Math.pow(Math.abs((Math.sin(this._tickPoints[i][2]))), 0.5);
                    if (Math.abs(this._tickPoints[i][2]) < 4.7) {
                        l = l - ew + 6;
                        t = t + 2;
                    } else if (Math.abs(this._tickPoints[i][2]) > 4.7 && Math.abs(this._tickPoints[i][2]) < 5.5) {
                        var tempEleW = ew;
                        if (tempEleW < 8) {
                            tempEleW = 8;
                            l = l + tempEleW / 2 + 6;
                        } else {
                            tempEleW = 20;
                            l = l + tempEleW / 2;
                        }
                    } else if (Math.abs(this._tickPoints[i][2]) > 5.5) {
                        tempEleW = 28;
                        l = l + tempEleW / 2;
                    } else {
                        var tempEleW = ew;
                        if (tempEleW < 18) {
                            tempEleW = 18;
                        }
                        l = l + tempEleW / 2 - 2;
                        t = t + 2;
                    }

                    elem.css({
                        left : l,
                        top : t
                    });
                    dim = ew * Math.cos(this._tickPoints[i][2]) + eh * Math.sin(Math.PI / 2 + this._tickPoints[i][2] / 2);
                    maxdim = (dim > maxdim) ? dim : maxdim;
                }
            }

            // draw the gauge label
            if (this.label && this.labelPosition == 'inside') {
                var l = this._center[0] + this.canvas._offsets.left;
                var tp = this.tickPadding * (1 - 1 / (this.diameter / 80 + 1));
                var t = 0.5 * (this._center[1] + this.canvas._offsets.top - this.hubRadius) + 0.5 * (this._center[1] + this.canvas._offsets.top - this.tickOuterRadius + this.tickLength + tp) + this.labelHeightAdjust;

                l -= this._labelElem.outerWidth(true) / 2;
                t -= this._labelElem.outerHeight(true) / 2;
                this._labelElem.css({
                    left : l,
                    top : t
                });
            } else if (this.label && this.labelPosition == 'bottom') {
                var l = this._center[0] + this.canvas._offsets.left - this._labelElem.outerWidth(true) / 2;
                var t = this._center[1] + this.canvas._offsets.top + this.innerPad + +this.ringWidth + this.padding + this.labelHeightAdjust;
                this._labelElem.css({
                    left : l,
                    top : t
                });

            }
            ctx.save();
            var inner = this.intervalInnerRadius || this.hubRadius * 1.5;
            if (this.intervalOuterRadius == null) {
                if (this.showTickLabels) {
                    var outer = (this.tickOuterRadius - this.tickLength - this.tickPadding - this.diameter / 8);
                } else {
                    var outer = (this.tickOuterRadius - this.tickLength - this.diameter / 16);
                }
            } else {
                var outer = this.intervalOuterRadius;
            }
            var range = this.max - this.min;
            var intrange = this.intervals[this.intervals.length - 1] - this.min;
            var start, end, span = this.span * Math.PI / 180;
            var map = createMeterMap(ctx, this._radius, this._center, plot);
            // Comehere
            for ( i = 0; i < this.intervals.length; i++) {//
                var radRrad = ctx.createRadialGradient(0, 0, this.intervalInnerRadius, 0, 0, this.intervalOuterRadius);
                var colorArray = this.intervals[i][2];
                var gradColor = this.intervals[i][3];
                
                if ($.isArray(colorArray)) {
                    for (var k = 0; k < colorArray.length; k++) {
                        radRrad.addColorStop(colorArray[k][0], colorArray[k][1]);
                    }
                    ctx.fillStyle = radRrad;
                } else {
                	radRrad.addColorStop(1, gradColor);
                    radRrad.addColorStop(0, colorArray);
                    ctx.fillStyle = radRrad;
                }

                start = (i == 0) ? sa : sa + (this.intervals[i-1][0] - this.min) * span / range;
                if (start < 0) {
                    start = 0;
                }
                end = sa + (this.intervals[i][0] - this.min) * span / range;
                if (end < 0) {
                    end = 0;
                }
                ctx.beginPath();

                ctx.arc(0, 0, inner, start, end, false);
                ctx.lineTo(outer * Math.cos(end), outer * Math.sin(end));
                ctx.arc(0, 0, outer, end, start, true);
                ctx.lineTo(inner * Math.cos(start), inner * Math.sin(start));
                ctx.fill();
                ctx.closePath();

                ctx.beginPath();
                ctx.lineWidth = 1;

                if (this.tinyBorderClr[i]) {
                    ctx.strokeStyle = this.tinyBorderClr[i];
                } else {
		            ctx.strokeStyle = $.isArray(colorArray) ? ctx.fillStyle : colorArray;
                }

                ctx.arc(0, 0, inner, start, end, false);
                ctx.lineTo(outer * Math.cos(end), outer * Math.sin(end));
                ctx.arc(0, 0, outer + 1, end, start, true);
                ctx.lineTo(inner * Math.cos(start), inner * Math.sin(start));
                ctx.closePath();
                ctx.stroke();

                var hM = Math.floor(this._radius / 20);
                var hm = [this._radius, this._radius];
                var hg = start;
                var hN = Math.PI / hM;

                hm.push(this._radius + outer * Math.cos(start));
                hm.push(this._radius + outer * Math.sin(start));
                hm.push(this._radius + outer * Math.cos(start + ((end - start) / 2)));
                hm.push(this._radius + outer * Math.sin(start + ((end - start) / 2)));
                hm.push(this._radius + outer * Math.cos(end));
                hm.push(this._radius + outer * Math.sin(end));

                var jb = navigator.userAgent.toLowerCase();
                if (/msie/.test(jb)) {
                    hm = hm.toString();
                }

                var ar = addAreaToMap(map, hm);
            }

            ctx.restore();

            if (this.showTicks) {
                ctx.save();
                var orad = this.tickOuterRadius, tl = this.tickLength, mtl = tl / 2, nmt = this.numberMinorTicks, ts = this.span * Math.PI / 180 / (this.ticks.length - 1), mts = ts / (nmt + 1);

                for ( i = 0; i < this.ticks.length; i++) {
                    ctx.beginPath();
                    ctx.lineWidth = 1.0;
                    ctx.strokeStyle = 'rgba(255,255,255,.95)';
                    var wps = ts * i + sa;
                    ctx.moveTo(-orad * Math.cos(ts * i + sa), orad * Math.sin(ts * i + sa));
                    ctx.lineTo(-(orad - tl) * Math.cos(ts * i + sa), (orad - tl) * Math.sin(ts * i + sa));
                    if (i != 0 && i != this.ticks.length - 1) {

                        ctx.stroke();
                    }
                    if (i < this.ticks.length - 1) {
                        for (var j = 1; j <= nmt; j++) {
                            ctx.beginPath();
                            ctx.lineWidth = 1.0;
                            ctx.moveTo(-orad * Math.cos(ts * i + mts * j + sa), orad * Math.sin(ts * i + mts * j + sa));
                            ctx.lineTo(-(orad - mtl) * Math.cos(ts * i + mts * j + sa), (orad - mtl) * Math.sin(ts * i + mts * j + sa));
                            ctx.stroke();
                        }
                    }
                }
                ctx.restore();
            }

            // draw the needle                
            var datapoint = this.data[0][1];
            var dataspan = this.max - this.min;
            if (this.pegNeedle) {
                if (this.data[0][1] > this.max + dataspan*3/this.span) {
                    datapoint = this.max + dataspan*3/this.span;
                }
                if (this.data[0][1] < this.min - dataspan*3/this.span) {
                    datapoint = this.min - dataspan*3/this.span;
                }
            }
            var dataang = (datapoint - this.min)/dataspan * this.span * Math.PI/180 + this.startAngle;
            ctx.save();
            ctx.beginPath();
            ctx.fillStyle = this.needleColor;
            ctx.strokeStyle = this.needleColor;
            this.needleLength = (this.tickOuterRadius - this.tickLength) * 0.85;
            this.needleThickness = (this.needleThickness < 2) ? 2 : this.needleThickness;
            var endwidth = this.needleThickness * 0.4;
            
            var dl = this.needleLength/10;
            var dt = (this.needleThickness - endwidth)/10;
            var templ;
            for (var i=3; i<10; i++) {
                templ = this.needleThickness - i*dt;
                ctx.moveTo(dl*i*Math.cos(dataang), dl*i*Math.sin(dataang));
                ctx.lineWidth = templ;
                ctx.lineTo(dl*(i+2)*Math.cos(dataang), dl*(i+2)*Math.sin(dataang));
                ctx.stroke();
            }
            ctx.restore();
            
            ctx.save();
            var colormatch = false;
            if ($.isArray(this.hubColors) && this.hubColors.length > 0) {
                for (var i = 0; i < this.hubColors.length; i++) {
                    if (datapoint <= this.intervals[i][0]) {
                        colormatch = true;

                        var colorgrd = ctx.createRadialGradient(0, 0, 0, 0, 0, this.hubRadius);

                        var colorArray = this.hubColors[i];

                        if ($.isArray(colorArray)) {
                            for (var k = 0; k < colorArray.length; k++) {
                                colorgrd.addColorStop(colorArray[k][0], colorArray[k][1]);
                            }
                            ctx.fillStyle = colorgrd;
                        } else {
                            ctx.fillStyle = colorArray;
                        }

                        break;
                    }
                }
            }
            if (!colormatch) {
                for (var i = 0; i < this.intervals.length; i++) {
                    if (datapoint <= this.intervals[i][0]) {
                        colorArray = this.intervals[i][2];
                        var colorgrd = ctx.createRadialGradient(0, 0, 0, 0, 0, this.hubRadius);
                        var colorArray = this.intervals[i][2];
                        var gradColor = this.intervals[i][3];
                        if ($.isArray(colorArray)) {
                            for (var k = 0; k < colorArray.length; k++) {
                                colorgrd.addColorStop(colorArray[k][0], colorArray[k][1]);
                            }
                            ctx.fillStyle = colorgrd;
                        } else {
                        	colorgrd.addColorStop(0.7, gradColor);
                        	colorgrd.addColorStop(1, colorArray);
                            ctx.fillStyle = colorgrd;
                        }

                        break;
                    }
                }
            }

            ctx.beginPath();
            ctx.arc(0, 0, this.hubRadius, sa, ea, false);
            ctx.closePath();
            ctx.fill();
            ctx.restore();
            var tipvalue = '';
            if (ser && ser.labelRenderer) {
                var labelRendererMap = {
                    'max' : ser.max,
                    'min' : ser.min,
                    'unit' : ser.tinyunit,
                    'currentDataValue' : datapoint,
                    'actualDataValue' : ser.rendererOptions.dataVal
                };
                var linearChartValue = ser.labelRenderer(labelRendererMap);
                elem = $('<div class="jqplot-meterGauge-value" style="position:absolute;">' + linearChartValue + '</div>');
                tipvalue = linearChartValue;
            } else {
                if (this.tinyunit) {
                    elem = $('<div class="jqplot-meterGauge-value" style="position:absolute;">' + datapoint + '<span class=tiny-meter-unit style="font-size:18px;font-weight:bold;">' + this.tinyunit + '</span></div>');
                    tipvalue = datapoint + this.tinyunit;
                } else {
                    elem = $('<div class="jqplot-meterGauge-value" style="position:absolute;">' + datapoint + '</div>');
                    tipvalue = datapoint;
                }
            }
            elem.css('max-width', (150 / 400 * self.width) + 'px');
            this.canvas._elem.after(elem);
            if (parseInt(elem[0].scrollWidth) > parseInt(elem[0].clientWidth)) {
                elem.css('z-index', '21');
                elem.attr('title', tipvalue);
            }
            elem.css({
                left : (ctx.canvas.width / 2 - elem.outerWidth(true) / 2 + 10),
                top : (this._center[1] - elem.outerHeight(true) / 1.5)
            });
        } else {
            this._center = [(cw - trans * offx) / 2 + trans * offx, (ch - trans * offy) / 2 + trans * offy];
        }
 
    };
    
    
    

(function($) {
    tiny.PieRender2d = function() {
        var self = this;

        self.pieDrawCallback = function(ctx, gd, options, plot) {
            var i;
            var opts = (options != undefined) ? options : {};
            // offset and direction of offset due to legend placement
            var offx = 0;
            var offy = 0;
            var trans = 1;
            var colorGenerator = new $.jqplot.ColorGenerator(this.seriesColors);
            if (options.legendInfo && options.legendInfo.placement == 'insideGrid') {
                var li = options.legendInfo;
                switch (li.location) {
                    case 'nw':
                        offx = li.width + li.xoffset;
                        break;
                    case 'w':
                        offx = li.width + li.xoffset;
                        break;
                    case 'sw':
                        offx = li.width + li.xoffset;
                        break;
                    case 'ne':
                        offx = li.width + li.xoffset;
                        trans = -1;
                        break;
                    case 'e':
                        offx = li.width + li.xoffset;
                        trans = -1;
                        break;
                    case 'se':
                        offx = li.width + li.xoffset;
                        trans = -1;
                        break;
                    case 'n':
                        offy = li.height + li.yoffset;
                        break;
                    case 's':
                        offy = li.height + li.yoffset;
                        trans = -1;
                        break;
                    default:
                        break;
                }
            }

            var shadow = (opts.shadow != undefined) ? opts.shadow : this.shadow;
            var fill = (opts.fill != undefined) ? opts.fill : this.fill;
            var cw = ctx.canvas.width;
            var ch = ctx.canvas.height;
            var w = cw - offx - 2 * this.padding;
            var h = ch - offy - 2 * this.padding;
            var mindim = Math.min(w, h);
            var d = mindim;

            // reset slice angles array.
            this._sliceAngles = [];

            var sm = this.sliceMargin;
            if (this.fill == false) {
                sm += this.lineWidth;
            }

            var rprime;
            var maxrprime = 0;

            var ang, ang1, ang2, shadowColor;
            var sa = this.startAngle / 180 * Math.PI;

            // have to pre-draw shadows, so loop throgh here and calculate some
            // values
            // also.
            for (var i = 0, l = gd.length; i < l; i++) {
                ang1 = (i == 0) ? sa : gd[i-1][1] + sa;
                ang2 = gd[i][1] + sa;

                this._sliceAngles.push([ang1, ang2]);

                rprime = calcRPrime(ang1, ang2, this.sliceMargin, this.fill, this.lineWidth);

                if (Math.abs(ang2 - ang1) > Math.PI) {
                    maxrprime = Math.max(rprime, maxrprime);
                }
            }

            if (this.diameter != null && this.diameter > 0) {
                this._diameter = this.diameter - 2 * maxrprime;
            } else {
                this._diameter = d - 2 * maxrprime;
            }

            // Need to check for undersized pie.  This can happen if
            // plot area too small and legend is too big.
            if (this._diameter < 6) {
                $.jqplot.log('Diameter of pie too small, not rendering.');
                return;
            }

            var r = this._radius = this._diameter / 2;

            this._center = [(cw - trans * offx) / 2 + trans * offx + maxrprime * Math.cos(sa), (ch - trans * offy) / 2 + trans * offy + maxrprime * Math.sin(sa)];

            if (this.shadow) {
                for (var i = 0, l = gd.length; i < l; i++) {
                    shadowColor = 'rgba(0,0,0,' + this.shadowAlpha + ')';
                    this.renderer.drawSlice.call(this, ctx, this._sliceAngles[i][0], this._sliceAngles[i][1], shadowColor, true);
                }
            }

            plot.tipLocation = [];

            for (var i = 0; i < gd.length; i++) {

                this.renderer.drawSlice.call(this, ctx, this._sliceAngles[i][0], this._sliceAngles[i][1], colorGenerator.next(), false);

                var fstr, avgang = (this._sliceAngles[i][0] + this._sliceAngles[i][1]) / 2, label;

                if (this.dataLabels == 'label') {
                    fstr = this.dataLabelFormatString || '%s';
                    label = $.jqplot.sprintf(fstr, gd[i][0]);
                } else if (this.dataLabels == 'value') {
                    fstr = this.dataLabelFormatString || '%d';
                    label = $.jqplot.sprintf(fstr, this.data[i][1]);
                } else if (this.dataLabels == 'percent') {
                    fstr = this.dataLabelFormatString || '%d%%';
                    label = $.jqplot.sprintf(fstr, gd[i][2] * 100);
                } else if (this.dataLabels.constructor == Array) {
                    fstr = this.dataLabelFormatString || '%s';
                    label = $.jqplot.sprintf(fstr, this.dataLabels[i]);
                }

                var dataLabelPositionFactor = this.dataLabelPositionFactor;

                var fact = (this._radius ) * dataLabelPositionFactor + this.sliceMargin + this.dataLabelNudge;

                var x = this._center[0] + Math.cos(avgang) * fact + this.canvas._offsets.left;
                var y = this._center[1] + Math.sin(avgang) * fact + this.canvas._offsets.top;

                plot.tipLocation.push({
                    left : x,
                    top : y
                });

                var pointLabels = plot.options.pieOptions.pointLabels, eP = i, isRender = false;

                if (pointLabels) {
                    if (pointLabels.renderer) {
                        if (plot.series[0].data[eP]) {
                            label = pointLabels.renderer(eP, plot.series[0].data[eP][0], plot.series[0].data[eP][1]);
                        }
                        isRender = true;
                    }

                    if (!isRender && plot.options.seriesPointData && plot.options.seriesPointData[eP]) {
                        label = plot.options.seriesPointData[eP];
                    }
                    dataLabelPositionFactor = pointLabels.display === 'outside' ? 1.3 : dataLabelPositionFactor;

                    fact = (this._radius ) * dataLabelPositionFactor + this.sliceMargin + this.dataLabelNudge;

                    x = this._center[0] + Math.cos(avgang) * fact + this.canvas._offsets.left;
                    y = this._center[1] + Math.sin(avgang) * fact + this.canvas._offsets.top;

                    var labelelem = $('<div class="jqplot-pie-series jqplot-data-label" style="position:absolute;">' + label + '</div>').insertBefore(plot.eventCanvas._elem);
                    if (this.dataLabelCenterOn) {
                        x -= labelelem.width() / 2;
                        y -= labelelem.height() / 2;
                    } else {
                        x -= labelelem.width() * Math.sin(avgang / 2);
                        y -= labelelem.height() / 2;
                    }
                    x = Math.round(x);
                    y = Math.round(y);
                    labelelem.css({
                        left : x,
                        top : y
                    });
                }
            }
        };
        
            function calcRadiusAdjustment(ang) {
        return Math.sin((ang - (ang-Math.PI) / 8 / Math.PI )/2.0);
    }

    function calcRPrime(ang1, ang2, sliceMargin, fill, lineWidth) {
        var rprime = 0;
        var ang = ang2 - ang1;
        var absang = Math.abs(ang);
        var sm = sliceMargin;
        if (fill == false) {
            sm += lineWidth;
        }

        if (sm > 0 && absang > 0.01 && absang < 6.282) {
            rprime = parseFloat(sm) / 2.0 / calcRadiusAdjustment(ang);
        }

        return rprime;
    }

    }
})(jQuery); 

(function($) {
    /**
     * Class: tiny.PieRenderer
     */
    tiny.PieRenderer = function(streamchart,f,id){
	    var self = this;
	    var streamchartRef = streamchart;
	    var streamchartID = id;
        $.jqplot.LineRenderer.call(this);
    };
    
    tiny.PieRenderer.prototype = new $.jqplot.LineRenderer();
    tiny.PieRenderer.prototype.constructor = tiny.PieRenderer;
    
    // called with scope of a series
    tiny.PieRenderer.prototype.init = function(options, plot) {
        // Group: Properties
        // prop: diameter
        // Outer diameter of the pie, auto computed by default
        this.diameter = null;
        // prop: padding
        // padding between the pie and plot edges, legend, etc.
        this.padding = 20;
        // prop: sliceMargin
        // angular spacing between pie slices in degrees.
        this.sliceMargin = 0;
        // prop: fill
        // true or false, wether to fil the slices.
        this.fill = true;
        // prop: shadowOffset
        // offset of the shadow from the slice and offset of 
        // each succesive stroke of the shadow from the last.
        this.shadowOffset = 2;
        // prop: shadowAlpha
        // transparency of the shadow (0 = transparent, 1 = opaque)
        this.shadowAlpha = 0.07;
        // prop: shadowDepth
        // number of strokes to apply to the shadow, 
        // each stroke offset shadowOffset from the last.
        this.shadowDepth = 5;
        // prop: highlightMouseOver
        // True to highlight slice when moused over.
        // This must be false to enable highlightMouseDown to highlight when clicking on a slice.
        this.highlightMouseOver = true;
        // prop: highlightMouseDown
        // True to highlight when a mouse button is pressed over a slice.
        // This will be disabled if highlightMouseOver is true.
        this.highlightMouseDown = false;
        // prop: highlightColors
        // an array of colors to use when highlighting a slice.
        this.highlightColors = [];
        // prop: dataLabels
        // Either 'label', 'value', 'percent' or an array of labels to place on the pie slices.
        // Defaults to percentage of each pie slice.
        this.dataLabels = 'percent';
        // prop: showDataLabels
        // true to show data labels on slices.
        this.showDataLabels = false;
        // prop: dataLabelFormatString
        // Format string for data labels.  If none, '%s' is used for "label" and for arrays, '%d' for value and '%d%%' for percentage.
        this.dataLabelFormatString = null;
        // prop: dataLabelThreshold
        // Threshhold in percentage (0-100) of pie area, below which no label will be displayed.
        // This applies to all label types, not just to percentage labels.
        this.dataLabelThreshold = 3;
        // prop: dataLabelPositionFactor
        // A Multiplier (0-1) of the pie radius which controls position of label on slice.
        // Increasing will slide label toward edge of pie, decreasing will slide label toward center of pie.
        this.dataLabelPositionFactor = 0.52;
        // prop: dataLabelNudge
        // Number of pixels to slide the label away from (+) or toward (-) the center of the pie.
        this.dataLabelNudge = 2;
        // prop: dataLabelCenterOn
        // True to center the data label at its position.
        // False to set the inside facing edge of the label at its position.
        this.dataLabelCenterOn = true;
        // prop: startAngle
        // Angle to start drawing pie in degrees.  
        // According to orientation of canvas coordinate system:
        // 0 = on the positive x axis
        // -90 = on the positive y axis.
        // 90 = on the negaive y axis.
        // 180 or - 180 = on the negative x axis.
        this.startAngle = 0;
        this.tickRenderer = $.jqplot.PieTickRenderer;
        // Used as check for conditions where pie shouldn't be drawn.
        this._drawData = true;
        this._type = 'pie';
        
        // if user has passed in highlightMouseDown option and not set highlightMouseOver, disable highlightMouseOver
        if (options.highlightMouseDown && options.highlightMouseOver == null) {
            options.highlightMouseOver = false;
        }
        
        $.extend(true, this, options);

        if (this.sliceMargin < 0) {
            this.sliceMargin = 0;
        }

        this._diameter = null;
        this._radius = null;
        // array of [start,end] angles arrays, one for each slice.  In radians.
        this._sliceAngles = [];
        // index of the currenty highlighted point, if any
        this._highlightedPoint = null;
        
        // set highlight colors if none provided
        if (this.highlightColors.length == 0) {
            for (var i=0; i<this.seriesColors.length; i++){
                var rgba = $.jqplot.getColorComponents(this.seriesColors[i]);
                var newrgb = [rgba[0], rgba[1], rgba[2]];
                var sum = newrgb[0] + newrgb[1] + newrgb[2];
                for (var j=0; j<3; j++) {
                    // when darkening, lowest color component can be is 60.
                    newrgb[j] = (sum > 570) ?  newrgb[j] * 0.8 : newrgb[j] + 0.3 * (255 - newrgb[j]);
                    newrgb[j] = parseInt(newrgb[j], 10);
                }
                this.highlightColors.push('rgb('+newrgb[0]+','+newrgb[1]+','+newrgb[2]+')');
            }
        }
        
        this.highlightColorGenerator = new $.jqplot.ColorGenerator(this.highlightColors);
        
        plot.postParseOptionsHooks.addOnce(postParseOptions);
        plot.postInitHooks.addOnce(postInit);
        plot.eventListenerHooks.addOnce('jqplotMouseMove', handleMove);
        plot.eventListenerHooks.addOnce('jqplotMouseDown', handleMouseDown);
        plot.eventListenerHooks.addOnce('jqplotMouseUp', handleMouseUp);
        plot.eventListenerHooks.addOnce('jqplotClick', handleClick);
        plot.eventListenerHooks.addOnce('jqplotRightClick', handleRightClick);
        plot.postDrawHooks.addOnce(postPlotDraw);
    };
    
    tiny.PieRenderer.prototype.setGridData = function(plot) {
        // set gridData property.  This will hold angle in radians of each data point.
        var stack = [];
        var td = [];
        var sa = this.startAngle/180*Math.PI;
        var tot = 0;
        // don't know if we have any valid data yet, so set plot to not draw.
        this._drawData = false;
        for (var i=0; i<this.data.length; i++){
            if (this.data[i][1] != 0) {
                // we have data, O.K. to draw.
                this._drawData = true;
            }
            stack.push(this.data[i][1]);
            td.push([this.data[i][0]]);
            if (i>0) {
                stack[i] += stack[i-1];
            }
            tot += this.data[i][1];
        }
        var fact = Math.PI*2/stack[stack.length - 1];
        
        for (var i=0; i<stack.length; i++) {
            td[i][1] = stack[i] * fact;
            td[i][2] = this.data[i][1]/tot;
        }
        this.gridData = td;
    };
    
    tiny.PieRenderer.prototype.makeGridData = function(data, plot) {
        var stack = [];
        var td = [];
        var tot = 0;
        var sa = this.startAngle/180*Math.PI;
        // don't know if we have any valid data yet, so set plot to not draw.
        this._drawData = false;
        for (var i=0; i<data.length; i++){
            if (this.data[i][1] != 0) {
                // we have data, O.K. to draw.
                this._drawData = true;
            }
            stack.push(data[i][1]);
            td.push([data[i][0]]);
            if (i>0) {
                stack[i] += stack[i-1];
            }
            tot += data[i][1];
        }
        var fact = Math.PI*2/stack[stack.length - 1];
        
        for (var i=0; i<stack.length; i++) {
            td[i][1] = stack[i] * fact;
            td[i][2] = data[i][1]/tot;
        }
        return td;
    };

    function calcRadiusAdjustment(ang) {
        return Math.sin((ang - (ang-Math.PI) / 8 / Math.PI )/2.0);
    }

    function calcRPrime(ang1, ang2, sliceMargin, fill, lineWidth) {
        var rprime = 0;
        var ang = ang2 - ang1;
        var absang = Math.abs(ang);
        var sm = sliceMargin;
        if (fill == false) {
            sm += lineWidth;
        }

        if (sm > 0 && absang > 0.01 && absang < 6.282) {
            rprime = parseFloat(sm) / 2.0 / calcRadiusAdjustment(ang);
        }

        return rprime;
    }
    
    tiny.PieRenderer.prototype.drawSlice = function (ctx, ang1, ang2, color, isShadow) {
        if (this._drawData) {
            var r = this._radius;
            var fill = this.fill;
            var lineWidth = this.lineWidth;
            var sm = this.sliceMargin;
            if (this.fill == false) {
                sm += this.lineWidth;
            }
            ctx.save();
            ctx.translate(this._center[0], this._center[1]);
            
            var rprime = calcRPrime(ang1, ang2, this.sliceMargin, this.fill, this.lineWidth);

            var transx = rprime * Math.cos((ang1 + ang2) / 2.0);
            var transy = rprime * Math.sin((ang1 + ang2) / 2.0);

            if ((ang2 - ang1) <= Math.PI) {
                r -= rprime;  
            }
            else {
                r += rprime;
            }

            ctx.translate(transx, transy);
            
            if (isShadow) {
                for (var i=0, l=this.shadowDepth; i<l; i++) {
                    ctx.save();
                    ctx.translate(this.shadowOffset*Math.cos(this.shadowAngle/180*Math.PI), this.shadowOffset*Math.sin(this.shadowAngle/180*Math.PI));
                    doDraw(r);
                }
                for (var i=0, l=this.shadowDepth; i<l; i++) {
                    ctx.restore();
                }
            }
    
            else {
                doDraw(r);
            }
            ctx.restore();
        }
    
        function doDraw (rad) {
            // Fix for IE and Chrome that can't seem to draw circles correctly.
            // ang2 should always be <= 2 pi since that is the way the data is converted.
             if (ang2 > 6.282 + this.startAngle) {
                ang2 = 6.282 + this.startAngle;
                if (ang1 > ang2) {
                    ang1 = 6.281 + this.startAngle;
                }
            }
            // Fix for IE, where it can't seem to handle 0 degree angles.  Also avoids
            // ugly line on unfilled pies.
            if (ang1 >= ang2) {
                return;
            }            
        
            ctx.beginPath();  
            ctx.fillStyle = color;
            ctx.strokeStyle = color;
            ctx.lineWidth = lineWidth;
            ctx.arc(0, 0, rad, ang1, ang2, false);
            ctx.lineTo(0,0);
            ctx.closePath();
        
            if (fill) {
                ctx.fill();
            }
            else {
                ctx.stroke();
            }
        }
    };
    
    // called with scope of series
    tiny.PieRenderer.prototype.draw = function (ctx, gd, options, plot) {
         
        var animator = null;
        var self = this;
        self.SLICE_LENGTH = 5;
        plot.options.pieOptions.tempFX = [];
            
        self.drawPie = function(ctx, gd, options, plot)
        {
            var pieData = plot.series[0]._plotData;
            var eO = pieData.length;
            var sliceIndex = eO;
            var sum = 0;
            
            if(plot.options.pieOptions.tempIsPieInit && !isPieDataEmpty(pieData))
            {
                for(var i=0;i<sliceIndex;i++)
                {
                    sum = sum + parseFloat(pieData[i][1]);
                }
                
                plot.options.pieOptions.tempIsPieInit = false;
                var counterSlice = self.SLICE_LENGTH;
                animator = setInterval(function()
                {
                    var isLast = false;
                    
                    if(sliceIndex>=0)
                    {
                        if(counterSlice === 0)
                        {
                            //reset counter slice for next pie segment
                            sliceIndex--;
                            if(sliceIndex === -1)
                            {
                                //draw last
                                isLast = true;
                            }
                            if(!isLast)
                            {
                                var piedata = pieData[sliceIndex][1];
                                if(piedata === 0)
                                {
                                    counterSlice = 1;
                                }
                                else
                                {
                                    var radientValue = piedata*2*Math.PI;
                                    var calcFactor = radientValue/sum;
                                    var actualSliceReq = Math.floor(calcFactor/Math.PI*self.SLICE_LENGTH);
                                    if(actualSliceReq>1)
                                    {
                                        counterSlice = parseInt(actualSliceReq,10);
                                    }
                                    else
                                    {
                                        counterSlice = 1;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                    	clearInterval(animator);
                        return;
                    }
                    
                    if (ctx.canvas.height == 0) {
                        clearInterval(animator);
                        return;
                    }

                    self.drawSlice(ctx, gd, options, plot, sliceIndex,isLast,counterSlice);
                    if(isLast)
                    {
                        for(var q=0;q<plot.options.pieOptions.tempFX.length;q++)
                        {
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseover', pieMouseOverHandler);
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'click', pieMouseClickHandler);
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mousedown', pieMouseHandler);
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseout', pieMouseHandler);
                            tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseup', pieMouseHandler);
                        }
                        
                        for(var q=0;q<plot.options.pieOptions.tempFX.length;q++)
                        {
                                plot.options.pieOptions.tempFX[q] = null;
                        }
                        plot.options.pieOptions.tempFX = null;
                        clearInterval(animator);
                        return;
                    }
                    counterSlice--; 
                }, 200/self.SLICE_LENGTH);
            }
            else
            {
                var isPieEmpty = isPieDataEmpty(pieData);
                if(isPieEmpty)
                {
                    self.drawEmptySlice(ctx, gd, options, plot, -1,true);
                }
                else
                {
                    self.drawSlice(ctx, gd, options, plot, -1,true);
                }
                for(var q=0;q<plot.options.pieOptions.tempFX.length;q++)
                {
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseover', pieMouseOverHandler);
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'click', pieMouseClickHandler);
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mousedown', pieMouseHandler);
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseout', pieMouseHandler);
                    tiny.Event.addListener(plot.options.pieOptions.tempFX[q], 'mouseup', pieMouseHandler);
                }
                
                for(var q=0;q<plot.options.pieOptions.tempFX.length;q++)
                {
                    plot.options.pieOptions.tempFX[q] = null;
                }
                plot.options.pieOptions.tempFX = null;
            }
        };
        function isPieDataEmpty(data)
        {
            var isPieEmpty = true;
            for(var i=0;i<data.length;i++)
            {
                if(data[i][1]>0)
                {
                    isPieEmpty = false;
                    break;
                }
            }
            return isPieEmpty;
        }
        
        var explosionsize = self.cd * 0.25;
        var tipparentID = "map_tip_"+plot.target[0].id;
        var tipChildID = tipparentID + "charttip";
        var pieImgID = plot.target[0].id+"pieImg";
        
        var tipLocation = [];
        function clickOnSlice(clickEvent)
        {
            if(plot.series[0].showHighlight === true)
            {
                 var index = plot.activeArea;
                 
                 plot.options.pieOptions.pieExplodeoptions.index = parseInt(index);
                 plot.options.pieOptions.pieExplodeoptions.size = explosionsize;
                 plot.drawSeries();
                 streamchartRef._legendAdjuster();
            }
           
        }
        function pieMouseHandler (e, w, q)
        {
            if(plot.series[0] && plot.series[0].show === false)
            {
                return;
            }
            var index = plot.activeArea;
            if (index !== undefined)
            {
                var seriesData = 
                {
                    pointIndex : plot.series[0]._plotData[parseInt(index)][0],
                    data : plot.series[0]._plotData[parseInt(index)][1],
		    dataIndex : parseInt(index)
                }
                self.callEvents(0, 'item'+e.type,seriesData,plot.options.seriesID,plot.options.seriesEvtList); 
            }
        }
        function pieMouseClickHandler (e, w, q)
        {
            if(plot.series[0] && plot.series[0].show === false)
            {
                return;
            }
            var index = 0;
            var seriesData = {
                                pointIndex : plot.series[0]._plotData[parseInt(plot.activeArea)][0],
                                data : plot.series[0]._plotData[parseInt(plot.activeArea)][1]
                             }
            self.callEvents(0, 'click', seriesData,plot.options.seriesID,plot.options.seriesEvtList);
            var widgetThis = plot.target.widget();
		    var tmpData = {
		    	x:seriesData.pointIndex,
		    	y:seriesData.data
		    };
		    widgetThis.trigger("click", [tmpData]); 
        }
        function pieMouseOverHandler(e, w, q)
        {
            if(plot.series[0] && plot.series[0].show === false)
            {
                return;
            }
            showTip(e, w, q);
            pieMouseHandler(e, w, q);
        }
        function showTip(e, w, q)
        {
            var index = 0;
            if (self.fL())
            {
                index = e.srcElement.getAttribute('tinyIndex');
            }
            else
            {
                index = e.target.getAttribute('tinyIndex');
            }
            plot.activeArea = index;
            if (plot.options.pieOptions.pieExplodeoptions.index === parseInt(index) && plot.options.pieOptions.pieExplodeoptions.size > 0)
            {
                return;
            }
            if(plot.series[0].showHighlight === true)
                {
                if(plot.options.pieOptions.isAnimate)
                {
                    clickOnSlice(e);
                }
                if(!plot.addedEvt)
                {
                    tiny.Event.addListener( $('map',plot.target)[0], 'mousemove', hideTip);
                    var obj = {'dom': $('map',plot.target)[0], 'type':'mousemove' , 'func':hideTip};
                    plot.pieGarbageLeak.push(obj);
                    plot.addedEvt = true;
                }
            
            $('div.PieTipParent').each(function(a,elm){
                tiny.garbageCollect(elm);
            });
            var seriesTipMap = plot.options.pieOptions.seriesTipMap;
            var serID = plot.options.seriesID;
            if (seriesTipMap && 
                    seriesTipMap[serID])
            {
                var str = null;

                if (seriesTipMap[serID].tip.renderer)
                {
                    str = seriesTipMap[serID].tip
                            .renderer(
                                    parseInt(index),
                                    plot.series[0]._plotData[parseInt(
                                    index)][0],
                                    plot.series[0]._plotData[parseInt(
                                    index)][1]);
                }
                else if (seriesTipMap[serID].data)
                {
                    var tipArr = seriesTipMap[serID].data;
                    if (tipArr[parseInt(index)])
                    {
                        str = '<div style="color:' +
                                seriesTipMap[serID].tip.color + '">' +
                                tipArr[parseInt(index)] + '</div>';
                    }
                }

               else {
                            var html = '';
                            var colCount = plot.target.find('.jqplot-table-legend tr:nth-child(1) td', $("#piechartdiv")).clone().length;
                            var temp = (parseInt(parseInt(index)) * 2 + 1);
                            var rowValue = (parseInt(temp / colCount) + 1);
                            var colValue = (parseInt(temp % colCount));
                            var actLegend = plot.target.find(".jqplot-table-legend tr:nth-child(" + rowValue + ") td:nth-child(" + colValue + ")").clone();
                            html = actLegend.html();
                            var divs = actLegend.find('div');
                            if (divs.length == 2) {
                                var attributesChange = {
                                    width : '8px',
                                    height : '8px'
                                };
                                $(divs[0]).css(attributesChange);
                                $(divs[1]).css(attributesChange);
                                html = actLegend.html();
                            }
                            var ret = "<table style='padding: 0 10px;margin-right: -6px;'><tr><td valign='middle'>";
                            ret += '<div style="" class="jqplot-table-legend jqplot-table-legend-swatch">' + html + '</div></td>';
                            ret += '<td><div style="padding-left:2px;"><div style="color:#000000;font-size:14px;font-weight:bold;">' + plot.series[0]._plotData[parseInt(index)][1] + '%</div>';
                            ret += '<div style="color:#3c3c3c;font-size:10px;">' + plot.series[0]._plotData[parseInt(index)][0] + '</div></div></td></tr></table>';
                            ret += '';
                            str = ret;
                }

                // Check if the tooltip string is null/undefined/empty
                if (str === undefined || str === null)
                {
                    return;
                }
                

                if (index >= 0)
                {
                    if (tipLocation[index])
                    {
                        var element = plot.target;
                        if(element.length!=0){
                        	plot.pieTip.setPosition(tipLocation[index].left -10+element.offset().left, tipLocation[index].top+element.offset().top);
                        }
                    }
                    else
                    {
                        plot.pieTip.setPosition(e.pageX -20, e.pageY + 13);
                    }
                }
               
                if (plot.pieTip)
                {
                    plot.pieTip.option("content",str);
                    plot.pieTip.show();
                }
            }

                }
        }
        
        function closePie()
        {
            plot.options.pieOptions.pieExplodeoptions = {index: -1, size: -1};
            plot.drawSeries();
        }
        
        function hideTipAndClosePie()
        {
             //hide tip
             plot.pieTip.hide();
             
             if(plot.options.animate)
             {
                 closePie();            
             }
         }
        
        function hideTip(a, b, c)
        {
            if (self.fL())
             {
                if (a.srcElement.id === pieImgID)
                 {
                    hideTipAndClosePie();
                 }
             }
             else
             {
                 if (a.target.id === pieImgID)
                 {
                     hideTipAndClosePie();
                 }
             }
            plot.options.pieOptions.pieExplodeoptions.index = -1;

        }
        self.drawEmptySlice = function(ctx, gd, options, plot,count1,isLast,counterSlice)
        {
            var emptyDataMessage = 'No Data';
            if (window.tinyResourceManager && 
                window.tinyResourceManager.getResource) 
            {
                emptyDataMessage = window.tinyResourceManager.getResource("tiny.charts.pie.emptydata");

            }
            var x = ctx.canvas.width / 2;
            var y = ctx.canvas.height / 2;
            ctx.font ='12px Arial';
            ctx.fillText(emptyDataMessage, x-20,y);
            return;
        }
        
        self.drawSlice = function(ctx, gd, options, plot,count1,isLast,counterSlice)
        {
        var counterSliceAct = counterSlice?counterSlice:1;
       
        self.ba = {};
        var rand1 = (Math.floor(Math.random() * 100000) + 1);
        var rand2 = (Math.floor(Math.random() * 100000) + 1);
        var mapId = "piechart_" + rand1 + "_" + rand2;
        
        self.bc = ''+mapId;
        plot.bc   = self.bc;
        var randomColors = ['#ed1c24', '#fff200', '#00a651', '#005e20',
                '#2e3192', '#ec008c', '#898989', '#f26522', '#00aeef',
                '#959595', '#662d91', '#8c6239', '#197b30', '#8dc63f',
                '#a186be', '#736357', '#9e0b0f', '#959595', '#4390d3',
                '#5f5ab5', '#f06eaa', '#998675', '#790000', '#0054a6',
                '#003663', '#363636', '#32004b', '#7b0046', '#b1e467',
                '#aa83d5'];
        self.cb = 0;
        self.cc = 0;
        self.cd = 0;
        self.ds = ctx.canvas.width;
        self.dI = true;
        self.dt = ctx.canvas.height;
        self.ba = ctx.canvas;
        var bh = ctx;
        var pieData = plot.series[0]._plotData;
        var coords;
        var length;
        // opactity
        self.ca = 1;
        var eO = pieData.length;
        var start = 0;
        var fb = 0;
        var color;
        var hJ = [];
        var gV;
        var hg;

        var hM;
        var hN;
        var hm;
        var canvas;
        var HALFPI = 1.5707963267948966;
        self.mt = true;
        var hL = 1;
        var hK = 1;
        self.be = false;
        self.be = ['#99CDFB', '#3366FB', '#0000FA', '#F8CC00', '#F89900',
                '#F76600'];
        // x
        self.cb = ctx.canvas.width / 2;
        // Y
        self.cc = ctx.canvas.height / 2;
        self.centerY = self.cc;
       
	var raduis = (self.cb > self.cc ? self.cc : self.cb);
	self.cd = raduis < 0 ? 0 : raduis;
        // angle
        self.bY = 60;

        var hO = self.cc;
        // depth
        var bZ = 15;
        self.explosion = 0;
        self.explode = plot.options.pieOptions.pieExplodeoptions;
        if (typeof plot.options.seriesColors == 'undefined')
        {
            //reset the series default colors
            // For pie charts override default UCD colors
            var colorDefArray = [],color1 = '#CA3333',color2 = '#EA9E25',color3 = '#ACC666',color4 = '#61C44F',color5 = '#73BEE3',color6 = '#E7CB52';
            switch(plot.series[0].data.length)
            {
                case 1:
                    colorDefArray = [color5];
                    break;
                case 2:
                    colorDefArray = [color2,color5];
                    break;
                case 3:
                    colorDefArray = [color2,color4,color5];
                    break;
                case 4:
                    colorDefArray = [color1,color2,color4,color5];
                    break;
                case 5:
                    colorDefArray = [color1,color2,color4,color5,color6];
                    break;
                case 6:
                    colorDefArray = [color1,color2,color3,color4,color5,color6];
                    break;
                default:
                    colorDefArray = [color1,color2,color3,color4,color5,color6];
                    break;
            }
            var colorlen = colorDefArray.length;
            for (var k=colorlen;k<$.jqplot.config.defaultColors.length;k++)
            {
                colorDefArray.push($.jqplot.config.defaultColors[k]);
            }
            if (colorDefArray.length>0)
            {
                plot.seriesColors = colorDefArray;
            }
        }
        self.customColors = plot.seriesColors;
        var hS = null;

        var tempcc = 0;
        var tempcb = 0;
        var tempcd = 0;
        var i;

        if (plot.options.pieOptions.isAnimate)
        {
            for (i = 0; i < pieData.length; i++)
            {
                plot.options.pieOptions.sliceListener[pieData[i][0]] = clickOnSlice;
            }
        }

        for (var eP = 0; eP < eO; eP++)
        {
            pieData[eP][1] = (pieData[eP][1]>=0)?pieData[eP][1]:0;
        }
        for (var eP = 0; eP < eO; eP++)
        {
            fb += pieData[eP][1];
        }
        self.fv = function()
        {
            var map = document.createElement('MAP');
            map.setAttribute('name', 'map_' + self.bc);
            map.setAttribute('id', 'map_' + self.bc);
            map.setAttribute('class', 'pie_map');
            plot.target[0].appendChild(map);
            return map;
        };
        self.hP = function()
        {
            var index = Math
                    .abs(Math.round(Math.random() * randomColors.length - 1));
            return randomColors[index];
        };

        self.fN = function(color, iP)
        {
            if (typeof color === 'undefined' || (
            color.length !== 4 && color.length !== 7))
            {
                return false;
            }
            if (color.length === 4)
            {
                color = ('#' + color.substring(1, 2)) + color.substring(1, 2) +
                color.substring(2, 3) + color.substring(2, 3) +
                color.substring(3, 4) + color.substring(3, 4);
            }
            var iQ = parseInt(color.substring(1, 7).substring(0, 2), 16);
            var iR = parseInt(color.substring(1, 7).substring(2, 4), 16);
            var hj = parseInt(color.substring(1, 7).substring(4, 6), 16);
            return 'rgba(' + iQ + ', ' + iR + ', ' + hj + ', ' + iP + ')';
        };

        self.fy = function(map)
        {
            plot.pieGarbageLeak.push({dom:map,type:'mousemove', func:hideTip});
            tiny.Event.addListener(map, 'mousemove', hideTip)
            var fz = '<img id="'+pieImgID+'" src="data:image/gif;base64,' +
                    'R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAAB' +
                    'AAEAAAICRAEAOw==" width=' + self.ds + '" height="' +
                    self.dt + '" usemap="#map_' + self.bc +
                    '" style="border:0;position:absolute;left: ' +
                    self.ba.offsetLeft + 'px;top:' + self.ba.offsetTop +
                    'px;clip:\'rect(0, ' + self.ds + 'px, ' + self.dt +
                    'px, 0)\';filter:alpha(opacity=0);z-index:' +
                    (self.ba.style.zIndex + 10) + ';">';
            map.innerHTML += fz;
            fz = null;
        };

        self.makePieGradient = function(color, seriesIndex, cb, cc, radius)
        {
            var lingrad = bh.createRadialGradient(cb, cc, 0, cb, cc, radius);
            var colorh = color.substring(1);
            var startPercent = 1.25;
            var reducePercent = 0.10;
            var stopPercent = 1.15;
            var colorStep = Math.round((startPercent-stopPercent)/reducePercent);
            var ai = 0;
            var aIncrement = 0.13;
            var aIStop = 0.9;
            for(i=startPercent;i>=stopPercent;i=(i-reducePercent))
            {
                i = (i*100)/100.0;
                ai = ai+aIncrement;
                if(ai>=aIStop)
                {
                    break;
                }
                lingrad.addColorStop(ai, darker(colorh, i));
                ai = ai+aIncrement;
            }
            lingrad.addColorStop(aIStop, '#'+colorh);
            return lingrad;
        };
        
        self.makePieGradientBorder = function(color, seriesIndex, cb, cc, radius,start, end)
        {
            var colorh = color.substring(1);
            var convrgb = shade(rgb(colorh),1.45);
            var stc = 'rgba('+convrgb[0]+","+convrgb[1]+","+convrgb[2]+',0.6)';
            var lingrad = bh.createRadialGradient(cb, cc, 0, cb, cc, 2*radius);
            lingrad.addColorStop(0.4, stc);
            lingrad.addColorStop(0.6, 'rgba(230,230,230,0.8)');
            return lingrad;
        };

        bh.save();
        if (self.mt)
        {
            gV = self.cd * Math.cos(self.bY * Math.PI / 180);
            hL = gV / self.cd;
            hK = bZ * Math.sin(self.bY * Math.PI / 180) / hL;
            bh.scale(1, hL);
            self.cc += (self.cc - self.cc * hL) / hL;
        }
        var tempColor = [];
        var end = Math.PI * 2;
        start = 0;
        i = 0;
        /*
         * Draw the depth piece of the 270 to 90 degree in that order
         */
        for (eP = eO - 1; eP >= 0; eP--)
        {
            
            color = self.customColors[eP] ? self.customColors[eP] : self.hP();
            tempColor.push(color);
            if (eP > 0)
            {
                while (hJ[hJ.length - 1] === color || (
                eP === eO - 1 && hJ[0] === color))
                {
                    color = self.hP();
                }
            }
            hJ[hJ.length] = color;
            fillStyle = self.fN(color, self.ca);
            if (self.be !== false)
            {
                fillStyle = self.fN(randomColors[eP], self.ca);
            }
            fillStyle = hJ[i];
            if (pieData[eP][1] <= 0)
            {
                        i++;
                continue;
            }
            length = pieData[eP][1] * Math.PI * 2 / fb;
            start = end - length;
            if(start<0)
            {
                start = 0;
            }
            var x = 0;
            var y = 0;
            tempcc = self.cc;
            tempcb = self.cb;
            tempcd = self.cd;
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                var t = (start + (start + length)) / 2;
                var rprime = calcRPrime(start, (start + length),
                        self.explode.size, true, 2);
                x = (Math.cos(t) * rprime);
                y = (Math.sin(t) * rprime);

                self.cb = self.cb + x;
                self.cc = self.cc + y;

            }

            if(count1 === eP|| count1 === -1)
              {
                length = length/counterSliceAct;
                if (self.mt)
                { 
                    start = end - length;
                    if (start < 0)
                    {
                        start = 0;
                    }
                }
            if (self.mt && start <= Math.PI)
            {
                hg = length;
                hQ = self.cd * Math.cos(start);
                hR = self.cd * Math.sin(start);
                if (start + length > Math.PI)
                {
                    hS = -self.cd;
                    hT = 0;
                    hg = Math.PI - start;
                }
                else
                {
                    hS = self.cd * Math.cos(start + hg);
                    hT = self.cd * Math.sin(start + hg);
                }

            }
            if (start >= 0 && start <= 3.1415)
                 {
                bh.beginPath();
                bh.fillStyle = light(fillStyle.substring(1),
                            -0.5);

                 bh.arc(self.cb, self.cc + hK, self.cd, start, start + hg,
                        false);
                bh.lineTo(self.cb + hS, self.cc + hT + hK);
                 bh.arc(self.cb, self.cc, self.cd, start + hg, start, true);
                bh.fill();
                bh.closePath();
                }
            if (self.mt)
            {
                // Draw at start
                if (start >= Math.PI / 2 && start <= (Math.PI + (Math.PI / 2)))
                {
                    bh.beginPath();
                    bh.fillStyle = light(hJ[i].substring(1), -0.5);
                    var hhS = self.cd * Math.cos(start);
                    var hhT = self.cd * Math.sin(start);
                    bh.moveTo(self.cb, self.cc);
                    bh.lineTo(self.cb, self.cc + hK);
                    bh.lineTo(self.cb + hhS, self.cc + hhT + hK);
                    bh.lineTo(self.cb + hhS, self.cc + hhT);
                    bh.fill();
                    bh.closePath();
                }
            }
              }
            end = start;
            self.cc = tempcc;
            self.cb = tempcb;
            self.cd = tempcd;
            i++;
        }
        /*
         * Draw the depth piece of the 270 to 360 degree in that order
         */
         var estart = start;
        for (eP = 0; eP < eO; eP++)
        {
            if(pieData[eP][1] <= 0 )
            {
                continue;
            }
            length = pieData[eP][1] * Math.PI * 2 / fb;
            bh.beginPath();
            color = self.hP();
            tempColor.push(color);
            if (eP > 0)
            {
                while (hJ[hJ.length - 1] === color || (
                eP === eO - 1 && hJ[0] === color))
                {
                    color = self.hP();
                }
            }
            fillStyle = self.fN(color, self.ca);
            if (self.be !== false)
            {
                fillStyle = self.fN(randomColors[eP], self.ca);
            }
            fillStyle = hJ[hJ.length - eP - 1];
            var x = 0;
            var y = 0;
            tempcc = self.cc;
            tempcb = self.cb;
            tempcd = self.cd;
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                var t = (start + (start + length)) / 2;
                var rprime = calcRPrime(start, (start + length),
                        self.explode.size, true, 2);
                x = (Math.cos(t) * rprime);
                y = (Math.sin(t) * rprime);

                self.cb = self.cb + x;
                self.cc = self.cc + y;

            }
            if(count1 === eP || count1 === -1)
            {
              length = length/counterSliceAct;
                
            if (self.mt)
            {
                if(count1 === -1)
                {
                    // Draw at end 270-360
                    if ((start + length <= Math.PI * 2 && start + length >= (
                                    Math.PI + (Math.PI / 2))) || (
                                    start + length > Math.PI * 2))
                    {
                        bh.beginPath();
                        bh.fillStyle = light(hJ[hJ.length - eP - 1]
                                .substring(1), -0.5);
                        var hhS = self.cd * Math.cos(start + length);
                        var hhT = self.cd * Math.sin(start + length);
                        bh.moveTo(self.cb, self.cc);
                        bh.lineTo(self.cb, self.cc + hK);
                        var lineFrom = (self.cb + hhS)-4;//This -4 duduction added because color overlapping showing for some data
                        var lineTo = (self.cc + hhT + hK);
                        bh.lineTo(lineFrom, lineTo);
                        bh.lineTo(lineFrom, self.cc + hhT);
                        bh.fill();
                        bh.closePath();
                    }
                }
                else
                    {
                     if (count1 === eO-1)
                         {

                         bh.beginPath();
                         bh.fillStyle = light(hJ[hJ.length - eP - 1]
                                 .substring(1), -0.5);
                         var hhS = self.cd * Math.cos(start + length);
                         var hhT = self.cd * Math.sin(start + length);
                         bh.moveTo(self.cb, self.cc);
                         bh.lineTo(self.cb, self.cc + hK);
                         bh.lineTo(self.cb + hhS, self.cc + hhT + hK);
                         bh.lineTo(self.cb + hhS, self.cc + hhT);
                         bh.fill();
                         bh.closePath();
                     
                         }
                    }
                  

            }
              }

            start += length;
            self.cc = tempcc;
            self.cb = tempcb;
            self.cd = tempcd;
        }

        /*
         * Draw the depth piece of the 0 to 90 degree in that order
         */
         start = estart;
        for (eP = 0; eP < eO; eP++)
        {
            if(pieData[eP][1] <= 0 )
            {
            continue;
            }
            length = pieData[eP][1] * Math.PI * 2 / fb;
            bh.beginPath();
            color = self.hP();
            tempColor.push(color);
            if (eP > 0)
            {
                while (hJ[hJ.length - 1] === color || (
                eP === eO - 1 && hJ[0] === color))
                {
                    color = self.hP();
                }
            }
            fillStyle = self.fN(color, self.ca);
            if (self.be !== false)
            {
                fillStyle = self.fN(randomColors[eP], self.ca);
            }
            fillStyle = hJ[hJ.length - eP - 1];
            var x = 0;
            var y = 0;
            tempcc = self.cc;
            tempcb = self.cb;
            tempcd = self.cd;
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                var t = (start + (start + length)) / 2;
                var rprime = calcRPrime(start, (start + length),
                        self.explode.size, true, 2);
                x = (Math.cos(t) * rprime);
                y = (Math.sin(t) * rprime);

                self.cb = self.cb + x;
                self.cc = self.cc + y;

            }
            if(count1 === eP|| count1 === -1)
              {
              length = length/counterSliceAct;
                
            bh.fillStyle = self.makePieGradient(
                        fillStyle, eP, self.cb, self.cc, self.cd);
            bh
                    .arc(self.cb, self.cc, self.cd, start, start + length,
                            false);
            bh.lineTo(self.cb, self.cc);
            bh.fill();
            bh.closePath();

            if (self.mt && start < Math.PI)
            {
                hg = length;
                hQ = self.cd * Math.cos(start);
                hR = self.cd * Math.sin(start);
                if (start + length > Math.PI)
                {
                    hS = -self.cd;
                    hT = 0;
                    hg = Math.PI - start;
                }
                else
                {
                    hS = self.cd * Math.cos(start + hg);
                    hT = self.cd * Math.sin(start + hg);
                }
                if ((start + length >= 0 && start + length <= Math.PI / 2) || (
                    start >= 0 && start + length <= Math.PI))
                {
                    bh.beginPath();
                    bh.fillStyle = light(hJ[hJ.length - eP - 1].substring(1),
                            -0.5);
                    bh.arc(self.cb, self.cc + hK, self.cd, start, start + hg,
                            false);
                    bh.lineTo(self.cb + hS, self.cc + hT + hK);
                     bh.arc(self.cb, self.cc, self.cd, start + hg, start, true);
                    bh.fill();
                    bh.closePath();
                }
                
                // If the pie slice expand across more than 90
                // degree
                if (start > 0 && start < Math.PI / 2
                        && start + length > Math.PI)
                {
                    bh.beginPath();
                    bh.fillStyle = light(fillStyle.substring(1),
                            -0.5);

                    bh.arc(self.cb, self.cc + hK, self.cd, start,
                            start + hg, false);
                    bh.lineTo(self.cb + hS, self.cc + hT + hK);
                    bh.arc(self.cb, self.cc, self.cd, start + hg,
                            start, true);
                    bh.fill();
                    bh.closePath();
                }

                if (self.mt && count1 === -1)
                {
                    // Draw at end 0-90
                    if ((start + length >= 0 && start + length <= Math.PI / 2))
                    {
                        bh.beginPath();
                        bh.fillStyle = light(hJ[hJ.length - eP - 1]
                                .substring(1), -0.5);
                        bh.moveTo(self.cb, self.cc);
                        bh.lineTo(self.cb, self.cc + hK);
                        bh.lineTo(self.cb + hS, self.cc + hT + hK);
                        bh.lineTo(self.cb + hS, self.cc + hT);
                        bh.fill();
                        bh.closePath();
                    }
                }

            }
              }
            start += length;
            self.cc = tempcc;
            self.cb = tempcb;
            self.cd = tempcd;
        }
       
if(isLast)
    {
    
    
        var map = self.fv();
        self.fy(map);
        hM = Math.floor(self.cd / 20);
        start = 0;
        tipLocation.splice(0, tipLocation.length);
        if(!plot.pieGarbageLeak)
        {
            plot.pieGarbageLeak = [];
        }
        var ptLabels = $('#'+tipparentID +'_ptLabel ');
        ptLabels.each(function(idx, elem)
        {
            tiny.garbageCollect(elem);
        });

        for (eP = 0; eP < eO; eP++)
        {
            if(pieData[eP][1] <= 0 )
            {
            continue;
            }
            length = pieData[eP][1] * Math.PI * 2 / fb;

            hm = [self.cb, self.cc * hL];
            hg = start;
            hN = length / hM;

            var areaTempCb = self.cb;
            var areaTempCc = self.cc;
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                var t = (start + (start + length)) / 2;
                var rprime = calcRPrime(start, (start + length),
                        self.explode.size, true, 2);
                x = (Math.cos(t) * rprime);
                y = (Math.sin(t) * rprime);

                self.cb = self.cb + x;
                self.cc = self.cc + y;
            }

            for (gV = 0; gV <= hM; gV++, hg += hN)
            {
                hm.push(self.cb + self.cd * Math.cos(hg));
                hm.push((self.cc + self.cd * Math.sin(hg)) * hL);
            }
            self.cb = areaTempCb;
            self.cc = areaTempCc;
            var jb = navigator.userAgent.toLowerCase();
            if (/msie/.test(jb))
            {
                hm = hm.toString();
            }

            fx = fw(map, hm);
            if(!plot.options.pieOptions.tempFX)
            {
                plot.options.pieOptions.tempFX = [];
            }
            plot.options.pieOptions.tempFX.push(fx);
            var obj = {'dom':fx, 'type':'mouseover' , 'func':pieMouseOverHandler}
            plot.pieGarbageLeak.push(obj);
            obj = {'dom':fx, 'type':'click' , 'func':pieMouseClickHandler}
            plot.pieGarbageLeak.push(obj);
            obj = {'dom':fx, 'type':'mousedown' , 'func':pieMouseHandler};
            plot.pieGarbageLeak.push(obj);
            obj = {'dom':fx, 'type':'mouseout' , 'func':pieMouseHandler};
            plot.pieGarbageLeak.push(obj);
            obj = {'dom':fx, 'type':'mouseup' , 'func':pieMouseHandler};
            plot.pieGarbageLeak.push(obj);
            fx.setAttribute('tinyIndex', eP);
            if (plot.options.pieOptions.isAnimate)
            {
                if (typeof plot.options.pieOptions.sliceListener[pieData[eP][0]] !== 'undefined')
                {
                    obj = {dom:fx, type:'click',  func:function(){
                    }};
                    plot.pieGarbageLeak.push(obj);
                    tiny.Event.addListener(fx, 'click', function(){
                    });
                }
            }
            var avgang = ((start + length / 2));

            var pointLabelLocationFactor = 0.6;
            var defaultPointLabelVal = ((
                    pieData[eP][1] / fb) * 100).toFixed(2) + '%';
            var defaultPointLabelColor = '#000';

            var isRender = false;
            var pointLabels = plot.options.pieOptions.pointLabels;
            if (pointLabels)
            {
                var ptlabelRend = pointLabels;

                    if (ptlabelRend.renderer)
                    {
                        if (plot.series[0].data[eP])
                        {
                            defaultPointLabelVal = ptlabelRend
                                .renderer(eP,
                                        plot.series[0].data[eP][0],
                                        plot.series[0].data[eP][1]);
                        }
                        isRender = true;
                    }
                
                if (!isRender
                    && plot.options.seriesPointData
                    && plot.options.seriesPointData[eP])
                {
                    defaultPointLabelVal = plot.options.seriesPointData[eP];
                }
                defaultPointLabelColor = pointLabels.color ? pointLabels.color : defaultPointLabelColor;
                pointLabelLocationFactor = pointLabels.display === 'outside' ? 1.3 : pointLabelLocationFactor;

            }
            
            if (self.explode.index >= 0 && self.explode.size > 0 &&
            eP === self.explode.index)
            {
                self.explosion = self.explode.size;
            }
            else
            {
                self.explosion = 0;
            }
            var fact = (self.cd) * (
            pointLabelLocationFactor) + self.explosion + 2;
            var drawLine = true;
            if (!defaultPointLabelVal)
            {
                drawLine = false;
            }

            var x = self.cb + Math.cos(avgang) * fact + ctx.canvas.offsetLeft;
            var y = self.centerY + Math.sin(avgang) * fact *
            Math.cos(self.bY * Math.PI / 180) + ctx.canvas.offsetTop;
            var labelTop = 0, labelLeft = 0;
            var labelelem = null;
            var isOutside = false;
            if (pointLabels)
            {
                var divEl = document.createElement("DIV");
                divEl.className = "jqplot-pie-series jqplot-data-label";
                divEl.id = tipparentID +'_ptLabel ';
                divEl.style.position = "absolute";
                divEl.style.zIndex = 100;
                divEl.style.color = defaultPointLabelColor;
                divEl.style.fontSize = "12px";
                divEl.innerHTML = defaultPointLabelVal;
                labelelem = $(divEl);
                $(ctx.canvas).before(labelelem);
                divEl = null;
            }
            if (pointLabels
            && pointLabels.display === 'outside')
            {
                isOutside = true;
                var pointLabelTrackerSize = (self.cd*0.15);
                if (pointLabelTrackerSize < 5)
                {
                    pointLabelTrackerSize = 5;
                }
                if (pointLabelTrackerSize > 25)
                {
                    pointLabelTrackerSize = 25;
                }
                if (drawLine)
                {
                    bh.beginPath();
                    bh.strokeStyle = '#e4e4e4';
                }
                var depthCorrection = 0;
                if ((avgang >= 0 && avgang <= Math.PI / 2)
                        || (avgang >= 0 && avgang <= Math.PI))
                {
                    depthCorrection = hK;
                }
                if (drawLine)
                {
                    bh.moveTo(self.cb + (self.cd + self.explosion)
                            * Math.cos(avgang), self.cc
                            + (self.cd + self.explosion) * Math.sin(avgang)
                            + depthCorrection);
                    bh.lineTo(self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang), self.cc
                            + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.sin(avgang) + depthCorrection);
                }
                if ((avgang >= 0 && avgang <= Math.PI / 2)
                        || (avgang >= (3 * Math.PI) / 2 && avgang <= Math.PI * 2))
                {
                    var tempX = self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang) + 5;
                   var tempY = self.cc
                            + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.sin(avgang) + depthCorrection
                    if (drawLine)
                    {
                        bh.lineTo(tempX, tempY);
                    }
                    x = self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang) + 5
                            + (labelelem.width() / 2);
                    labelLeft = x;
                    labelTop = ctx.canvas.offsetTop + (tempY/2) - (labelelem.height() / 2);
                }
                else
                {
                    var tempX = self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang) - 5;
                    var tempY = self.cc + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.sin(avgang) + depthCorrection
                    if (drawLine)
                    {
                        bh.lineTo(tempX, tempY);
                    }
                    x = self.cb + (self.cd + pointLabelTrackerSize + self.explosion)
                            * Math.cos(avgang) -5 - labelelem.width()/2;
                    labelLeft = x;
                    labelTop = ctx.canvas.offsetTop + (tempY/2) - (labelelem.height() / 2);
                }
                if (avgang >= 0 && avgang <= Math.PI)
                {
                    y += labelelem.height() / 2;
                }
                else
                {
                    y -= labelelem.height() / 2;
                }
                if (drawLine)
                {
                    bh.stroke();
                    bh.closePath();
                }
                var fact1 = (self.cd) * (0.6) + self.explosion + 2;

                var x1 = self.cb + Math.cos(avgang) * fact1
                        + ctx.canvas.offsetLeft;
                var y1 = self.centerY + Math.sin(avgang) * fact1
                        * Math.cos(self.bY * Math.PI / 180)
                        + ctx.canvas.offsetTop;
                tipLocation[eP] = {
                    left : Math.round(x1),
                    top : Math.round(y1)
                };
            }
            else
            {

                tipLocation[eP] = {
                    left: Math.round(x),
                    top: Math.round(y)
                };
                if (pointLabels)
                {
                    x -= labelelem.width() /2;
                    y -= labelelem.height() / 2;
                }
            }
            if (pointLabels
            && pointLabels.display === 'outside' && plot.legend.placement === "outsideGrid"
            && (plot.legend.location === "w"
                    || plot.legend.location === "nw" || plot.legend.location === "sw"))
            {
                x = x + plot.legend.getWidth();
                labelLeft = labelLeft + plot.legend._elem[0].offsetWidth + 10;
            }
            x = Math.round(x);
            y = Math.round(y);
            if(!isOutside)
            {
                labelLeft = x;
                labelTop = y;
            }
            if (pointLabels)
            {
                labelelem.css({
                    left: labelLeft,
                    top: labelTop
                });
            }

            start += length;
            labelelem = null;
        }
        self.cc = hO;
        

        self.fL = function()
        {
            var jb = navigator.userAgent.toLowerCase();
            return (!/^opera/.test(jb) && /msie/.test(jb));
        };

        
        self.cc = hO;
        self.ba = null;
    }
     bh.restore();
        }
        self.drawPie(ctx, gd, options, plot);
        bh = null;
    };
    
    tiny.PieAxisRenderer = function() {
        $.jqplot.LinearAxisRenderer.call(this);
    };
    
    tiny.PieAxisRenderer.prototype = new $.jqplot.LinearAxisRenderer();
    tiny.PieAxisRenderer.prototype.constructor = $.jqplot.PieAxisRenderer;
        
    
    // There are no traditional axes on a pie chart.  We just need to provide
    // dummy objects with properties so the plot will render.
    // called with scope of axis object.
    tiny.PieAxisRenderer.prototype.init = function(options){
        this.tickRenderer = $.jqplot.PieTickRenderer;
        $.extend(true, this, options);
        // I don't think I'm going to need _dataBounds here.
        // have to go Axis scaling in a way to fit chart onto plot area
        // and provide u2p and p2u functionality for mouse cursor, etc.
        // for convienence set _dataBounds to 0 and 100 and
        // set min/max to 0 and 100.
        this._dataBounds = {min:0, max:100};
        this.min = 0;
        this.max = 100;
        this.showTicks = false;
        this.ticks = [];
        this.showMark = false;
        this.show = false; 
    };
    
    tiny.PieRenderer.prototype.handleMove = function(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            plot.target.trigger('jqplotDataMouseOver', ins);
            if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {
                plot.target.trigger('jqplotDataHighlight', ins);
                highlight (plot, ins[0], ins[1]);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
    };
    
    
    
    // setup default renderers for axes and legend so user doesn't have to
    // called with scope of plot
    function preInit(target, data, options) {
        options = options || {};
        options.axesDefaults = options.axesDefaults || {};
        options.legend = options.legend || {};
        options.seriesDefaults = options.seriesDefaults || {};
        // only set these if there is a pie series
        var setopts = false;
        if (options.seriesDefaults.renderer == $.jqplot.PieRenderer) {
            setopts = true;
        }
        else if (options.series) {
            for (var i=0; i < options.series.length; i++) {
                if (options.series[i].renderer == $.jqplot.PieRenderer) {
                    setopts = true;
                }
            }
        }
        
        if (setopts) {
            options.axesDefaults.renderer = $.jqplot.PieAxisRenderer;
            options.legend.renderer = $.jqplot.PieLegendRenderer;
            options.legend.preDraw = true;
            options.seriesDefaults.pointLabels = {show: false};
        }
    }
    
    function postInit(target, data, options) {
        for (var i=0; i<this.series.length; i++) {
            if (this.series[i].renderer.constructor == $.jqplot.PieRenderer) {
                // don't allow mouseover and mousedown at same time.
                if (this.series[i].highlightMouseOver) {
                    this.series[i].highlightMouseDown = false;
                }
            }
        }
    }
    
    // called with scope of plot
    function postParseOptions(options) {
        for (var i=0; i<this.series.length; i++) {
            this.series[i].seriesColors = this.seriesColors;
            this.series[i].colorGenerator = $.jqplot.colorGenerator;
        }
    }
    
    function highlight (plot, sidx, pidx) {
        var s = plot.series[sidx];
        var canvas = plot.plugins.pieRenderer.highlightCanvas;
        canvas._ctx.clearRect(0,0,canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        s._highlightedPoint = pidx;
        plot.plugins.pieRenderer.highlightedSeriesIndex = sidx;
        s.renderer.drawSlice.call(s, canvas._ctx, s._sliceAngles[pidx][0], s._sliceAngles[pidx][1], s.highlightColorGenerator.get(pidx), false);
    }
    
    function unhighlight (plot) {
        var canvas = plot.plugins.pieRenderer.highlightCanvas;
        canvas._ctx.clearRect(0,0, canvas._ctx.canvas.width, canvas._ctx.canvas.height);
        for (var i=0; i<plot.series.length; i++) {
            plot.series[i]._highlightedPoint = null;
        }
        plot.plugins.pieRenderer.highlightedSeriesIndex = null;
        plot.target.trigger('jqplotDataUnhighlight');
    }
 
    function handleMove(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var evt1 = jQuery.Event('jqplotDataMouseOver');
            evt1.pageX = ev.pageX;
            evt1.pageY = ev.pageY;
            plot.target.trigger(evt1, ins);
            if (plot.series[ins[0]].highlightMouseOver && !(ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event('jqplotDataHighlight');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                plot.target.trigger(evt, ins);
                highlight (plot, ins[0], ins[1]);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
    } 
    
    function handleMouseDown(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            if (plot.series[ins[0]].highlightMouseDown && !(ins[0] == plot.plugins.pieRenderer.highlightedSeriesIndex && ins[1] == plot.series[ins[0]]._highlightedPoint)) {
                var evt = jQuery.Event('jqplotDataHighlight');
                evt.pageX = ev.pageX;
                evt.pageY = ev.pageY;
                plot.target.trigger(evt, ins);
                highlight (plot, ins[0], ins[1]);
            }
        }
        else if (neighbor == null) {
            unhighlight (plot);
        }
    }
    
    function handleMouseUp(ev, gridpos, datapos, neighbor, plot) {
        var idx = plot.plugins.pieRenderer.highlightedSeriesIndex;
        if (idx != null && plot.series[idx].highlightMouseDown) {
            unhighlight(plot);
        }
    }
    
    function handleClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var evt = jQuery.Event('jqplotDataClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            plot.target.trigger(evt, ins);
        }
    }
    
    function handleRightClick(ev, gridpos, datapos, neighbor, plot) {
        if (neighbor) {
            var ins = [neighbor.seriesIndex, neighbor.pointIndex, neighbor.data];
            var idx = plot.plugins.pieRenderer.highlightedSeriesIndex;
            if (idx != null && plot.series[idx].highlightMouseDown) {
                unhighlight(plot);
            }
            var evt = jQuery.Event('jqplotDataRightClick');
            evt.pageX = ev.pageX;
            evt.pageY = ev.pageY;
            plot.target.trigger(evt, ins);
        }
    }    
    
    // called within context of plot
    // create a canvas which we can draw on.
    // insert it before the eventCanvas, so eventCanvas will still capture events.
    function postPlotDraw() {
        // Memory Leaks patch    
        if (this.plugins.pieRenderer && this.plugins.pieRenderer.highlightCanvas) {
            this.plugins.pieRenderer.highlightCanvas.resetCanvas();
            tiny.garbageCollect(this.plugins.pieRenderer.highlightCanvas._elem, true);
            this.plugins.pieRenderer.highlightCanvas = null;
        }

        this.plugins.pieRenderer = {highlightedSeriesIndex:null};
        this.plugins.pieRenderer.highlightCanvas = new $.jqplot.GenericCanvas();
        
        // do we have any data labels?  if so, put highlight canvas before those
        var labels = $(this.targetId+' .jqplot-data-label');
        if (labels.length) {
            $(labels[0]).before(this.plugins.pieRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-pieRenderer-highlight-canvas', this._plotDimensions, this));
        }
        // else put highlight canvas before event canvas.
        else {
            this.eventCanvas._elem.before(this.plugins.pieRenderer.highlightCanvas.createElement(this._gridPadding, 'jqplot-pieRenderer-highlight-canvas', this._plotDimensions, this));
        }
        
        var hctx = this.plugins.pieRenderer.highlightCanvas.setContext();
        this.eventCanvas._elem.bind('mouseleave', {plot:this}, function (ev) { unhighlight(ev.data.plot); });
    }
    
     function fw(map, coords)
    {
        var fx = document.createElement('AREA');
        fx.setAttribute('id', self.bc);
        fx.setAttribute('class', 'piearea');
        fx.setAttribute('shape', 'poly');
        fx.setAttribute('coords', coords);
        fx.setAttribute('href', 'javascript:void(0);');
        map.appendChild(fx);
        map = null;
        return fx;
    }

    function rgb(a)
    {
        var o = a.toLowerCase();
        return [parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16),
                parseInt(o.slice(4), 16)];
    }
    function shade(a, b)
    {
        var v = [], i;
        for (i = 0; i < 3; i++)
        {
            v[i] = Math.round(a[i] * b);
            if (v[i] > 255)
            {
                v[i] = 255;
            }
            if (v[i] < 0)
            {
                v[i] = 0;
            }
        }
        return v;
    }
    function hex(a)
    {
        var f = _hex;
        return f(a[0]) + f(a[1]) + f(a[2]);
    }
    function _hex(a)
    {
        return ('0' + a.toString(16)).slice(-2);
    }

    function light(cc)
    {
        return '#' + hex(shade(rgb(cc), 0.8));
    }
    function darker(cc, value)
    {
        return '#' + hex(shade(rgb(cc), value));
    }
    function calcRPrime(ang1, ang2, sliceMargin, fill, lineWidth)
    {
        var rprime = 0;
        var ang = ang2 - ang1;
        var absang = Math.abs(ang);
        var sm = sliceMargin;
        if (fill === false)
        {
            sm += lineWidth;
        }

        if (sm > 0 && absang > 0.01 )
        {
            if (absang <= Math.PI)
            {
                rprime = parseFloat(sm) / 2.0 / calcRadiusAdjustment(absang);
            }
            else
            {
                rprime = parseFloat(sm) / 2.0;
            }
        }
        // Dont allow it grow more
        if (rprime > 35)
        {
            rprime = 30;
        }
        return rprime;
    }
    function calcRadiusAdjustment(ang)
    {
        return Math.cos((ang - (ang - Math.PI) / 8 / Math.PI) / 2.0);
    }
    
    tiny.PieTickRenderer = function() {
        $.jqplot.AxisTickRenderer.call(this);
    };
    
    tiny.PieTickRenderer.prototype = new $.jqplot.AxisTickRenderer();
    tiny.PieTickRenderer.prototype.constructor = $.jqplot.PieTickRenderer;
    
})(jQuery);